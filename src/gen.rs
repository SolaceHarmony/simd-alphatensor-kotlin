#![allow(unused_parens)]
use std::simd::i32x16;

pub fn multiply_2_by_2_matrix_a_with_2_by_2_matrix_b(a: [i32; 4], b: [i32; 4]) -> [i32; 4] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b21, b22] = b;
    let lefts = [i32x16::from([
        (a21 - a22),
        (a11 + a21 - a22),
        (a11 - a12 + a21 - a22),
        a12,
        (a11 + a21),
        a11,
        a22,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ])];
    let rights = [i32x16::from([
        b12,
        (b12 + b21 + b22),
        (b21 + b22),
        b21,
        (b11 + b12 + b21 + b22),
        b11,
        (b12 + b22),
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ])];
    let hs = [lefts[0] * rights[0]];
    let c11 = (hs[0][3] + hs[0][5]);
    let c12 = (-hs[0][1] + hs[0][4] - hs[0][5] - hs[0][6]);
    let c21 = (-hs[0][0] + hs[0][1] - hs[0][2] - hs[0][3]);
    let c22 = (hs[0][0] + hs[0][6]);

    return [c11, c12, c21, c22];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_3_matrix_b(a: [i32; 4], b: [i32; 6]) -> [i32; 6] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b21, b22, b23] = b;
    let lefts = [i32x16::from([
        a21,
        (a21 + a22),
        (a12 + a21),
        a12,
        (a11 + a12),
        (a11 - a21),
        a11,
        (a12 - a22),
        (a21 - a22),
        a12,
        a22,
        0,
        0,
        0,
        0,
        0,
    ])];
    let rights = [i32x16::from([
        (b12 - b22),
        b22,
        (b13 + b22),
        (b13 - b23),
        b13,
        (b12 + b13),
        (b11 - b13),
        (b22 + b23),
        b11,
        (b13 - b21),
        (b11 + b21),
        0,
        0,
        0,
        0,
        0,
    ])];
    let hs = [lefts[0] * rights[0]];
    let c11 = (hs[0][4] + hs[0][6] - hs[0][9]);
    let c12 = (hs[0][8] + hs[0][10]);
    let c13 = (hs[0][0] + hs[0][2] - hs[0][4] + hs[0][5]);
    let c21 = (hs[0][0] + hs[0][1]);
    let c22 = (-hs[0][3] + hs[0][4]);
    let c23 = (-hs[0][1] + hs[0][2] - hs[0][3] - hs[0][7]);

    return [c11, c12, c13, c21, c22, c23];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_4_matrix_b(a: [i32; 4], b: [i32; 8]) -> [i32; 8] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24] = b;
    let lefts = [i32x16::from([
        a11,
        (a11 - a12),
        (a11 + a22),
        a22,
        a11,
        (a11 - a12),
        (a11 - a12 - a22),
        (a12 + a22),
        (a11 - a12 + a21 - a22),
        a22,
        (a11 + a21),
        (a21 - a22),
        a21,
        (a12 + a22),
        0,
        0,
    ])];
    let rights = [i32x16::from([
        (b14 + b24),
        b24,
        (b11 - b24),
        (b11 + b21 - b22),
        (b13 + b23),
        b23,
        (b12 + b13 + b23),
        (b12 + b13 + b22 + b23),
        (b12 + b13),
        b22,
        (b11 + b14),
        b11,
        b12,
        (b12 + b13 + b21 + b22 + b23 + b24),
        0,
        0,
    ])];
    let hs = [lefts[0] * rights[0]];
    let c11 = (hs[0][1] + hs[0][2] - hs[0][3] - hs[0][7] - hs[0][9] + hs[0][13]);
    let c12 = (hs[0][3] + hs[0][9] + hs[0][11]);
    let c13 = (-hs[0][4] + hs[0][6] + hs[0][7] - hs[0][9]);
    let c14 = (hs[0][9] + hs[0][12]);
    let c21 = (hs[0][4] - hs[0][5]);
    let c22 = (hs[0][5] - hs[0][6] + hs[0][8] - hs[0][12]);
    let c23 = (hs[0][0] - hs[0][1]);
    let c24 = (-hs[0][0] - hs[0][2] + hs[0][10] - hs[0][11]);

    return [c11, c12, c13, c14, c21, c22, c23, c24];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_5_matrix_b(a: [i32; 4], b: [i32; 10]) -> [i32; 10] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25] = b;
    let lefts = [
        i32x16::from([
            a21,
            (a21 + a22),
            (a12 + a21),
            (a12 - a22),
            (a11 - a21),
            a12,
            (a11 + a12),
            a21,
            (a21 - a22),
            (a12 + a21 - a22),
            a12,
            a12,
            (a12 - a22),
            (a11 - a12 - a21 + a22),
            a11,
            (a11 - a21),
        ]),
        i32x16::from([
            a11,
            (a11 - a12 - a21 + a22),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 - b22),
            b22,
            (b15 - b22),
            (b22 - b25),
            (b12 - b15),
            (b15 - b25),
            b15,
            (b11 + b21),
            b21,
            (b13 - b21),
            (b21 - b24),
            (b23 + b24),
            (b13 + b23),
            b13,
            (b13 + b14),
            (b13 - b14 + b23 - b24),
        ]),
        i32x16::from([
            (b11 - b14),
            (b13 + b23 - b24),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (-hs[0][8] - hs[0][9] - hs[0][13] + hs[0][14] + hs[1][0]);
    let c12 = (hs[0][7] - hs[0][8]);
    let c13 = (hs[0][0] - hs[0][2] + hs[0][4] + hs[0][6]);
    let c14 = (hs[0][0] + hs[0][1]);
    let c15 = (hs[0][8] + hs[0][9] + hs[0][10] + hs[0][11] + hs[0][13]);
    let c21 = (hs[0][8] + hs[0][9] + hs[0][10] + hs[0][11] - hs[0][12]);
    let c22 = (-hs[0][8] - hs[0][9] - hs[0][10] - hs[0][13] + hs[0][14]);
    let c23 = (-hs[0][8] - hs[0][9] - hs[0][10] - hs[0][12] - hs[0][13] + hs[0][14] + hs[0][15]
        - hs[1][1]);
    let c24 = (-hs[0][5] + hs[0][6]);
    let c25 = (hs[0][1] + hs[0][2] + hs[0][3] - hs[0][5]);

    return [c11, c12, c13, c14, c15, c21, c22, c23, c24, c25];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_6_matrix_b(a: [i32; 4], b: [i32; 12]) -> [i32; 12] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b14, b15, b16, b21, b22, b23, b24, b25, b26] = b;
    let lefts = [
        i32x16::from([
            a21,
            (a21 - a22),
            (a12 + a21),
            (a12 + a22),
            (a11 + a21),
            a12,
            a22,
            (a21 - a22),
            (a11 + a22),
            (a12 + a22),
            a11,
            a22,
            (a11 + a21),
            (a11 - a12),
            (a21 + a22),
            (a11 - a12),
        ]),
        i32x16::from([
            (a11 + a22),
            (a11 - a21),
            a11,
            (a11 + a12),
            (a12 - a22),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 + b22),
            b22,
            (b14 - b22),
            (b22 + b24),
            (b12 + b14),
            (b14 + b24),
            (b11 + b21),
            b11,
            (b11 + b26),
            (b21 - b26),
            (b16 + b26),
            (b13 - b23),
            (b11 - b16),
            b14,
            b13,
            b26,
        ]),
        i32x16::from([
            (b13 + b25),
            (b13 + b15),
            (b15 - b25),
            b25,
            (b23 + b25),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (-hs[0][6] + hs[0][8] + hs[0][9] - hs[0][15]);
    let c12 = (hs[0][6] + hs[0][7]);
    let c13 = (-hs[0][0] - hs[0][2] + hs[0][4] - hs[0][13]);
    let c14 = (hs[0][0] - hs[0][1]);
    let c15 = (-hs[0][11] + hs[1][0] - hs[1][3] + hs[1][4]);
    let c16 = (-hs[0][11] + hs[0][14]);
    let c21 = (hs[0][5] + hs[0][13]);
    let c22 = (hs[0][1] + hs[0][2] + hs[0][3] - hs[0][5]);
    let c23 = (hs[1][2] + hs[1][3]);
    let c24 = (-hs[0][14] + hs[1][0] - hs[1][1] + hs[1][2]);
    let c25 = (hs[0][10] - hs[0][15]);
    let c26 = (hs[0][7] + hs[0][8] - hs[0][10] - hs[0][12]);

    return [c11, c12, c13, c14, c15, c16, c21, c22, c23, c24, c25, c26];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_7_matrix_b(a: [i32; 4], b: [i32; 14]) -> [i32; 14] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b14, b15, b16, b17, b21, b22, b23, b24, b25, b26, b27] = b;
    let lefts = [
        i32x16::from([
            a11,
            (a11 - a12),
            (a11 - a22),
            (a21 - a22),
            (a12 - a22),
            a22,
            (a21 + a22),
            (a11 + a22),
            (a11 - a21),
            a11,
            a22,
            (a11 + a22),
            (a21 + a22),
            a11,
            (a11 + a12),
            (a11 - a12),
        ]),
        i32x16::from([
            (a12 - a22),
            (a21 - a22),
            (a11 - a21),
            a22,
            (a12 - a22),
            (a11 + a12),
            a11,
            a21,
            (a11 - a21),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b11 + b21),
            b21,
            (b14 - b21),
            b14,
            (b21 + b24),
            (b13 - b23),
            b13,
            (b13 - b27),
            (b13 - b17),
            (b17 - b27),
            (b16 - b26),
            (b16 - b25),
            b16,
            (b15 - b25),
            b25,
            b22,
        ]),
        i32x16::from([
            (b23 - b27),
            (b16 + b22),
            (b15 - b16),
            (b14 + b24),
            ((b23 << 1) - b25 + b26 - (b27 << 1)),
            b27,
            (b11 - b12 - (b17 << 1) + b21 - b22 + (b27 << 1)),
            (b12 + (b16 << 1) + b22),
            (b11 + b14 - (b15 << 1) + (b16 << 1)),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (hs[0][0] - hs[0][1]);
    let c12 = (hs[0][0] + hs[0][2] - hs[0][3] - (hs[1][2] << 1) - hs[1][8]);
    let c13 = (hs[0][0] - (hs[0][9] << 1) - hs[0][15] - hs[1][6]);
    let c14 = (-hs[0][12] - hs[1][1] + hs[1][7]);
    let c15 = (-hs[0][5] + hs[0][7] + hs[1][0] + hs[1][5]);
    let c16 = (-hs[0][5] + hs[0][6]);
    let c17 = (hs[0][1] + hs[0][2] + hs[0][4] + hs[1][3]);
    let c21 = (hs[0][3] + hs[1][3]);
    let c22 = (hs[0][13] + hs[0][14]);
    let c23 = (-hs[0][11] + hs[0][12] + hs[0][13] - hs[1][2]);
    let c24 = (-hs[0][10] + hs[0][11] + hs[0][14] - (hs[1][0] << 1) + hs[1][4]);
    let c25 = (-hs[0][10] + hs[0][12]);
    let c26 = (hs[0][9] + hs[1][5]);
    let c27 = (hs[0][6] - hs[0][7] + hs[0][8] + hs[0][9]);

    return [
        c11, c12, c13, c14, c15, c16, c17, c21, c22, c23, c24, c25, c26, c27,
    ];
}
pub fn multiply_2_by_2_matrix_a_with_2_by_8_matrix_b(a: [i32; 4], b: [i32; 16]) -> [i32; 16] {
    let [a11, a12, a21, a22] = a;
    let [b11, b12, b13, b14, b15, b16, b17, b18, b21, b22, b23, b24, b25, b26, b27, b28] = b;
    let lefts = [
        i32x16::from([
            a11,
            (a11 + a12),
            (a11 + a12 + a22),
            a21,
            a22,
            a21,
            (a21 + a22),
            (a12 - a21 - a22),
            (a11 + a12 - a21 - a22),
            a11,
            a12,
            a12,
            (a12 + a22),
            (a11 + a12),
            (a11 + a12 + a21),
            (a11 + a12 + a21 + a22),
        ]),
        i32x16::from([
            a22,
            (a11 + a12 + a21 + a22),
            a11,
            (a11 + a12 - a22),
            a21,
            (a12 - a22),
            (a11 + a12),
            a22,
            (a11 + a21),
            (a12 - a22),
            (a11 + a12 - a21 - a22),
            a21,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 - b22),
            b22,
            (b12 + b14 - b22),
            b14,
            b24,
            (b11 - b21),
            b21,
            (b11 - b16 - b21),
            (b11 - b16),
            b16,
            b26,
            (b17 - b27),
            (b12 + b14 - b22 - b24),
            b17,
            (b17 - b27 - b28),
            (b12 + b14),
        ]),
        i32x16::from([
            (b23 - b28),
            (b12 + b14 - b27 - b28),
            (b13 + b15 - (b16 << 1) - b23 - b25),
            (b15 - b23 - b25),
            b18,
            (b15 - b25),
            (b23 + b25),
            b23,
            (b17 + b18 - b27 - b28),
            (b11 + (b15 << 1) - b16 - b21 - (b25 << 1) + b26),
            b15,
            (b13 + b14),
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (hs[0][6] - hs[0][7] + hs[0][8] + hs[0][9]);
    let c12 = (hs[0][5] + hs[0][6]);
    let c13 = (hs[0][0] + hs[0][1]);
    let c14 = (-hs[0][1] - hs[0][2] - hs[0][3] + hs[0][15]);
    let c15 = ((hs[0][9] << 1) + hs[1][2] - hs[1][3] + hs[1][5] + hs[1][7]);
    let c16 = (-hs[0][3] + hs[1][7] + hs[1][11]);
    let c17 = (-hs[0][0] + hs[0][2] - hs[0][4] - hs[0][12]);
    let c18 = (hs[0][3] + hs[0][4]);
    let c21 = (hs[1][3] - hs[1][5] + hs[1][6] - hs[1][7]);
    let c22 = (hs[1][3] + hs[1][6] - hs[1][7] - hs[1][10]);
    let c23 = (hs[0][9] + hs[0][10]);
    let c24 = (hs[0][5] + hs[0][7] + hs[0][10] + (hs[1][5] << 1) - hs[1][9]);
    let c25 = (-hs[0][11] + hs[0][13]);
    let c26 = (-hs[0][13] + hs[0][14] + hs[0][15] + hs[1][0] - hs[1][1] - hs[1][7]);
    let c27 = (hs[0][11] - hs[0][14] - hs[1][4] + hs[1][8]);
    let c28 = (-hs[1][0] + hs[1][4] + hs[1][7]);

    return [
        c11, c12, c13, c14, c15, c16, c17, c18, c21, c22, c23, c24, c25, c26, c27, c28,
    ];
}
pub fn multiply_2_by_3_matrix_a_with_3_by_3_matrix_b(a: [i32; 6], b: [i32; 9]) -> [i32; 6] {
    let [a11, a12, a13, a21, a22, a23] = a;
    let [b11, b12, b13, b21, b22, b23, b31, b32, b33] = b;
    let lefts = [i32x16::from([
        a23,
        (a11 - a23),
        a11,
        (a11 - a13),
        (a13 - a23),
        a12,
        (a12 - a13 + a23),
        (a11 - a21 + a22),
        (a21 - a22),
        (a12 - a13 - a22 + a23),
        (a12 - a13),
        a22,
        (a11 - a12 - a21 + a22),
        (a21 - a23),
        (a11 - a21),
        0,
    ])];
    let rights = [i32x16::from([
        (b11 + b31 + b32),
        (b11 + b33),
        (b12 - b13 - b33),
        b33,
        (b21 + b31 - b33),
        (b22 - b23 + b32),
        (b21 - b32),
        (b12 + b23),
        b12,
        b21,
        b32,
        (b12 + b21 + b22),
        b23,
        b11,
        (b11 - b13 - b23),
        0,
    ])];
    let hs = [lefts[0] * rights[0]];
    let c11 = (hs[0][0] + hs[0][1] - hs[0][3] + hs[0][4] + hs[0][6] + hs[0][10]);
    let c12 = (hs[0][0] + hs[0][6] - hs[0][9] + hs[0][10] + hs[0][13]);
    let c13 = (hs[0][5] + hs[0][7] + hs[0][8] - hs[0][10] - hs[0][12]);
    let c21 = (-hs[0][6] + hs[0][8] + hs[0][9] - hs[0][10] + hs[0][11]);
    let c22 = (-hs[0][2] - hs[0][3] + hs[0][7] + hs[0][8] - hs[0][12]);
    let c23 = (-hs[0][1] - hs[0][2] + hs[0][7] + hs[0][8] + hs[0][13] + hs[0][14]);

    return [c11, c12, c13, c21, c22, c23];
}
pub fn multiply_2_by_3_matrix_a_with_3_by_4_matrix_b(a: [i32; 6], b: [i32; 12]) -> [i32; 8] {
    let [a11, a12, a13, a21, a22, a23] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34] = b;
    let lefts = [
        i32x16::from([
            a12,
            (a12 - a13),
            (a12 - a13 + a23),
            (a12 - a13 - a22 + a23),
            a22,
            (a12 - a13 - a21 - a22),
            (a13 - a23),
            (a11 + a23),
            (a11 + a13),
            (a21 + a22),
            (a21 + a23),
            a23,
            (a11 - a21 - a22),
            (a11 + a12 - a21 - a22),
            a12,
            a22,
        ]),
        i32x16::from([
            a11,
            (a11 + a13),
            (a21 + a23),
            (a11 - a21),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 - b22 - b32),
            (b12 - b32),
            (b12 - b22 - b24 - b32),
            (b12 - b22 - b24 + b31),
            b24,
            (b12 + b31),
            (b12 - b22 - b24 - b32 - b33 - b34),
            (b14 + b33),
            (b12 - b33),
            (b11 - b31),
            (b14 + b31),
            (b14 - b34),
            (b11 - b21 - b23 - b31),
            (b12 + b21 + b23 + b31),
            b23,
            (b11 - b21 - b31),
        ]),
        i32x16::from([
            (b13 - b33),
            b12,
            b31,
            (b11 + b13 + b14 - b21 - b23 - b31),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (-hs[0][5] + hs[0][9] + hs[0][12] + hs[0][13] - hs[0][14] - hs[1][1]);
    let c12 = (hs[0][9] - hs[0][15] + hs[1][2]);
    let c13 = (-hs[0][0] + hs[0][1] + hs[1][1]);
    let c14 = (hs[0][1] - hs[0][2] + hs[0][3] - hs[0][4] - hs[0][5] - hs[1][2]);
    let c21 = (-hs[0][8] + hs[0][14] + hs[1][0] + hs[1][1]);
    let c22 = (hs[0][7] - hs[0][10] + hs[0][12] + hs[0][15] + hs[1][0] + hs[1][2] - hs[1][3]);
    let c23 = (hs[0][0] - hs[0][2] - hs[0][6] + hs[0][7] + hs[0][8] - hs[0][11] - hs[1][1]);
    let c24 = (hs[0][4] + hs[0][10] - hs[0][11] - hs[1][2]);

    return [c11, c12, c13, c14, c21, c22, c23, c24];
}
pub fn multiply_2_by_3_matrix_a_with_3_by_5_matrix_b(a: [i32; 6], b: [i32; 15]) -> [i32; 10] {
    let [a11, a12, a13, a21, a22, a23] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35] = b;
    let lefts = [
        i32x16::from([
            a23,
            (a22 - a23),
            (a12 + a22 - a23),
            a12,
            (a12 + a22),
            (a12 + a21 + a22),
            (a21 + a22),
            (a11 + a12 + a21 + a22),
            a21,
            a13,
            (a12 - a13 + a22 - a23),
            (a11 - a12 + a13 - a22 + a23),
            (a11 - a12 + a13 + a21 - a22 + a23),
            (a11 - a12 + a13 + a21 + a23),
            (a11 + a13 + a21 + a23),
            (a13 + a21 + a23),
        ]),
        i32x16::from([
            (a13 + a23),
            a22,
            a11,
            a21,
            a12,
            (a21 + a23),
            (a11 - a12 + a13),
            a11,
            a13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b22 + b32),
            b22,
            (b22 + b31 + b32),
            (b21 - b24),
            (b11 - b21 - b22 - b31 - b32),
            (b11 - b24),
            b24,
            b11,
            b12,
            b31,
            (b12 + b13 - b31 - b32 - b33),
            (b12 + b13 - b33),
            (b12 + b13 - b23 - b25 - b33),
            (b23 + b25 + b33),
            (b15 + b23 + b25 + b33),
            (b15 + b34 - b35),
        ]),
        i32x16::from([
            (b15 - b35),
            b25,
            (b13 - b33),
            (b14 - b15 - b24 - b34 + b35),
            (b23 + b33),
            (b34 - b35),
            b33,
            (b11 - b13 - b14 + b33),
            b34,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (hs[0][3] - hs[0][5] - hs[0][6] + hs[0][7] + hs[0][9]);
    let c12 = (-hs[0][0] - hs[0][2] - hs[0][3] - hs[0][4] + hs[0][5] + hs[0][6]);
    let c13 = (-hs[0][1] + hs[0][2] - hs[0][9] + hs[0][10] + hs[0][11] - hs[1][2]);
    let c14 = (hs[0][0] + hs[0][1] + hs[0][8]);
    let c15 = (hs[1][2] + hs[1][4] + hs[1][6]);
    let c21 = (-hs[0][8] - hs[0][11] + hs[0][12] + hs[0][13] - hs[1][1] - hs[1][6]);
    let c22 = (-hs[0][5] - hs[0][6] + hs[0][7] - hs[1][2] - hs[1][7] + hs[1][8]);
    let c23 = (hs[0][6] + hs[0][15] - hs[1][0] + hs[1][3] - hs[1][8]);
    let c24 = (-hs[0][13] + hs[0][14] - hs[0][15] - hs[1][4] + hs[1][5] + hs[1][8]);
    let c25 = (hs[0][15] - hs[1][0] + hs[1][1] - hs[1][5] - hs[1][8]);

    return [c11, c12, c13, c14, c15, c21, c22, c23, c24, c25];
}
pub fn multiply_2_by_4_matrix_a_with_4_by_4_matrix_b(a: [i32; 8], b: [i32; 16]) -> [i32; 8] {
    let [a11, a12, a13, a14, a21, a22, a23, a24] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44] = b;
    let lefts = [
        i32x16::from([
            a13,
            (a12 - a13),
            (a13 - a22),
            (a13 - a23),
            (a13 - a23 - a24),
            (a23 + a24),
            (a22 - a23),
            (a21 + a23 + a24),
            (a11 + a23 + a24),
            a22,
            (a11 - a22),
            (a12 - a22),
            (a12 - a14 - a22),
            (a12 - a14 - a22 + a24),
            (a12 - a14),
            (a11 - a12),
        ]),
        i32x16::from([
            (a21 - a22),
            (a13 + a14 - a23 - a24),
            a11,
            (a11 + a13 + a14),
            (a11 - a21),
            (a11 - a21 + a24),
            (a21 - a24),
            (a11 - a14 - a21 + a24),
            a24,
            a14,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b24 - b31 + b34),
            b24,
            (b24 + b32),
            (b32 - b34 + b44),
            (b31 - b44),
            (b14 - b31),
            b32,
            b14,
            (b14 + b33),
            (b12 + b21 + b22 + b32),
            (b12 - b23),
            (b22 + b23 - b24 + b42),
            (b21 - b42),
            b42,
            b21,
            b23,
        ]),
        i32x16::from([
            b12,
            (b33 + b44),
            (b11 - b13 - b14 - b23 + b33),
            b33,
            (b12 + b13 + b14 - b33 + b43),
            (b11 - b14 - b33 + b43),
            (b11 - b14),
            (b33 - b43),
            (b11 - b14 - b31 + b41 + b42),
            (b21 + b33 + b41 - b43 - b44),
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (hs[0][4] - hs[0][5] + hs[0][8] + hs[0][14] + hs[1][1] - hs[1][3]
        + hs[1][5]
        + hs[1][6]
        + hs[1][7]
        + hs[1][9]);
    let c12 = (-hs[0][5] + hs[0][7] - hs[0][12] - hs[0][13] + hs[0][14] + hs[1][6] + hs[1][8]);
    let c13 = (hs[0][1] + hs[0][2] + hs[0][9] + hs[0][10] + hs[0][11] + hs[0][12] - hs[0][14]
        + hs[0][15]);
    let c14 = (-hs[0][6] + hs[0][9] + hs[0][12] + hs[0][13] - hs[0][14] + hs[1][0]);
    let c21 = (-hs[0][15] - hs[1][2] + hs[1][3] + hs[1][5] + hs[1][6] + hs[1][7]);
    let c22 =
        (-hs[0][7] + hs[0][8] + hs[0][10] - hs[1][0] - hs[1][2] - hs[1][4] + hs[1][5] + hs[1][6]);
    let c23 = (hs[0][0] + hs[0][1] + hs[0][4] - hs[0][5] + hs[0][8] + hs[1][1] - hs[1][3]);
    let c24 = (hs[0][0] - hs[0][2] + hs[0][3] + hs[0][4] - hs[0][5] - hs[0][6] + hs[0][7]);

    return [c11, c12, c13, c14, c21, c22, c23, c24];
}
pub fn multiply_2_by_4_matrix_a_with_4_by_5_matrix_b(a: [i32; 8], b: [i32; 20]) -> [i32; 10] {
    let [a11, a12, a13, a14, a21, a22, a23, a24] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45] =
        b;
    let lefts = [
        i32x16::from([
            -a21,
            (a13 - a21 + a23),
            (-a11 + a13 - a21 + a23),
            -a11,
            (-a21 + a23),
            (-a11 + a13 - a14 - a21 + a23),
            (-a11 + a13 - a14 - a21 + a23 - a24),
            (-a11 + a13 - a14),
            (-a11 + a13 - a14 - a21 + a22 + a23 - a24),
            (-a21 + a22 + a23 - a24),
            (-a11 + a12 + a13 - a14 - a21 + a22 + a23 - a24),
            a22,
            (-a13 + a22 - a23),
            (-a12 + a13 - a22 + a23),
            (a22 - a23),
            (-a12 + a13 + a14 - a22 + a23),
        ]),
        i32x16::from([
            (-a11 - a12 + a13 - a22 + a23),
            (-a11 - a12 + a13),
            (-a12 + a13 + a14),
            (-a12 + a13 + a14 - a22 + a23 + a24),
            (-a13 - a23),
            -a13,
            (-a13 - a23 + a24),
            a24,
            -a11,
            (a23 - a24),
            (-a11 - a12 + a13 - a21 - a22 + a23),
            -a12,
            (-a21 - a22),
            -a14,
            (-a13 + a14 - a23 + a24),
            a22,
        ]),
        i32x16::from([-a12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    ];
    let rights = [
        i32x16::from([
            (-b11 - b31),
            (b11 - b15 + b31),
            (b11 - b15 - b41),
            -b15,
            (-b13 + b31),
            (-b13 - b41),
            (b21 + b41),
            (-b13 + b44),
            (b21 - b44),
            b44,
            b21,
            (b22 + b32),
            (b22 - b25 + b32),
            (-b12 + b22 - b25 + b42),
            (b21 + b23 - b32 - b34 - b44),
            (b21 + b23 - b42),
        ]),
        i32x16::from([
            (-b12 + b34 + b44),
            (b34 + b44),
            (b21 + b23),
            b42,
            (b11 - b15 + b22 - b25 + b31 + b32 - b35 - b45),
            (-b13 - b21 - b23 - b33 + b35),
            (-b13 - b21 - b23 - b33 - b45),
            (-b13 - b21 - b23 - b33 - b41 - b42 - b43),
            (-b14 - b34),
            (-b13 - b21 - b23 - b33),
            -b12,
            (b21 + b24 + b34 + b44),
            (-b12 - b14 + b44),
            (-b13 + b21 + b23 + b43 - b45),
            -b45,
            (-b12 - b14 + b24 + b34 + ((b44 << 1) + b44)),
        ]),
        i32x16::from([b25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
    ];
    let c11 =
        (hs[0][1] - hs[0][2] + hs[0][3] - hs[0][4] + hs[0][5] - hs[0][7] - hs[0][8] - hs[0][9]
            + hs[0][10]);
    let c12 = (hs[0][0] + hs[0][4] - hs[0][5] - hs[0][6] + hs[0][7] + hs[0][8] + hs[0][9]);
    let c13 = (-hs[0][12] - hs[0][13] - hs[0][14] - hs[0][15] + hs[1][0] - hs[1][1] + hs[1][2]
        - hs[2][0]);
    let c14 =
        (hs[0][11] + hs[0][14] + hs[0][15] - hs[1][0] + hs[1][1] - hs[1][2] + hs[1][3] + hs[1][10]);
    let c15 = (hs[0][7] + hs[0][8] + hs[0][9] - hs[0][10] - hs[1][2] + hs[1][6] + hs[1][9]
        - hs[1][13]
        - hs[1][14]);
    let c21 = (hs[0][5] + hs[0][6] - hs[0][7] - hs[0][8] - hs[0][9] - hs[0][15] + hs[1][2]
        - hs[1][3]
        - hs[1][7]
        - hs[1][9]);
    let c22 = (hs[0][8] + hs[0][9] - hs[0][10] + hs[1][1] + hs[1][8] - hs[1][11]);
    let c23 = (-hs[0][9] + hs[1][0] - hs[1][1] - hs[1][10] + hs[1][12] + hs[1][15]);
    let c24 = (hs[0][3] - hs[1][5] + hs[1][6] + hs[1][9] - hs[1][14] - hs[2][0]);
    let c25 =
        (hs[0][0] + hs[0][1] + hs[0][11] - hs[0][12] + hs[1][4] + hs[1][5] - hs[1][6] - hs[1][9]);

    return [c11, c12, c13, c14, c15, c21, c22, c23, c24, c25];
}
pub fn multiply_2_by_5_matrix_a_with_5_by_5_matrix_b(a: [i32; 10], b: [i32; 25]) -> [i32; 10] {
    let [a11, a12, a13, a14, a15, a21, a22, a23, a24, a25] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45, b51, b52, b53, b54, b55] =
        b;
    let lefts = [
        i32x16::from([
            a21,
            (a12 + a21 - a22),
            (a11 - a12 - a21 + a22),
            (a11 - a12 - a14 - a21 + a22),
            (a11 - a12 + a15 - a21 + a22),
            (a12 - a22 - a23),
            a11,
            (a21 - a22),
            (a11 - a12 + a15),
            (a11 - a12 + a15 - a21 + a22 - a25),
            (a11 - a12 - a13 - a21 + a22 + a23),
            (a22 + a23),
            (a12 + a13 + a14 - a22 - a23),
            (a12 + a13 - a15 - a22 - a23 + a25),
            (a12 - a22 + a24),
            (a22 - a24),
        ]),
        i32x16::from([
            a24,
            (a12 - a14 - a22 + a24),
            (a12 - a14 + a15 - a22 + a24),
            (a12 + a13 + a14),
            (a12 - a14 + a15),
            (a12 + a13 - a15 - a22 - a23),
            (a12 - a22 - a25),
            (a12 + a13 - a15),
            (a12 - a14 + a15 - a22 + a24 - a25),
            a14,
            a15,
            (a12 + a15 - a22 - a25),
            (a11 - a12 - a13 - a21 + a22),
            a12,
            (a12 + a13 - a22 - a23),
            (a11 - a12 - a13),
        ]),
        i32x16::from([
            (a22 + a25),
            (a12 - a22),
            a23,
            (a11 - a12 - a14 - a21 + a22 + a24),
            a25,
            (a12 + a13 + a14 - a22 - a23 - a24),
            (a11 - a12 - a14),
            a13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 + b22),
            (b11 - b12 - b22),
            (b11 - b12 - b32 - b42 + b52),
            (b13 + b42),
            (b15 - b52),
            (b14 + b24 + b31),
            b11,
            (b13 + b14 + b15 + b22),
            b15,
            b52,
            b32,
            (b14 + b24 + b33 - b35),
            (b33 + b44),
            b54,
            (b13 + b23 - b33 - b41 - b44),
            (b13 + b23 - b33 + b45),
        ]),
        i32x16::from([
            (b13 + b23 - b33 - b42 + b43 + b44),
            (b41 + b44 - b53),
            (b45 + b53),
            b33,
            b45,
            (b35 + b54),
            (b15 + b25 - b35 + b45 - b51 - b53 - b54),
            b35,
            b53,
            (b13 - b33 + b41 + b43 + b44),
            (b15 - b35 - b45 + b51 + b53 + b54 - b55),
            (b51 + b53 + b54),
            (b14 + b32),
            (b13 + b14 - b15 + b21 + b23 + b24 - b25 - b33 + b35 - b45),
            (b31 + b44 - b54),
            b14,
        ]),
        i32x16::from([
            (b15 + b25 - b35 + b45),
            (b11 - b12 + b21 - b22 - b31 + b41 + b44 - b51 - b53 - b54),
            (b14 + b24 + b32 - b34),
            b42,
            (b15 + b25 - b35 + b45 + b52 + b53 + b54 - b55),
            b44,
            b13,
            (b14 + b31 + b34),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
    ];
    let c11 = (-hs[0][5] + hs[0][6]
        - hs[0][11]
        - hs[0][12]
        - hs[0][14]
        - hs[0][15]
        - hs[1][1]
        - hs[1][2]
        + hs[1][3]
        + hs[1][4]
        + hs[1][5]
        + hs[1][6]
        - hs[1][7]
        + hs[1][11]
        + hs[1][13]
        + hs[1][14]
        + hs[2][0]);
    let c12 = (hs[0][0] + hs[0][1]
        - hs[0][5]
        - hs[0][11]
        - hs[0][12]
        - hs[0][13]
        - hs[0][14]
        - hs[0][15]
        - hs[1][2]
        + hs[1][3]
        + hs[1][4]
        + hs[1][5]
        + hs[1][6]
        - hs[1][7]
        + hs[1][8]
        + hs[1][13]
        + hs[2][0]
        - hs[2][1]
        + hs[2][5]);
    let c13 = (-hs[0][1] - hs[0][2] - hs[0][3] - hs[0][4] + hs[0][6] - hs[0][7] + hs[0][8]
        - hs[1][12]
        + hs[1][15]
        + hs[2][6]);
    let c14 = (hs[0][0] - hs[0][3] - hs[0][4] - hs[0][7] + hs[0][8] - hs[0][9] + hs[0][10]
        - hs[1][12]
        + hs[1][15]
        + hs[2][3]
        + hs[2][6]);
    let c15 =
        (hs[0][14] + hs[0][15] + hs[1][1] + hs[1][2] + hs[1][3] - hs[1][4] + hs[1][9] + hs[2][6]);
    let c21 =
        (-hs[0][3] - hs[0][12] + hs[0][15] + hs[1][0] + hs[1][2] + hs[1][3] - hs[1][4] - hs[1][8]
            + hs[2][3]
            + hs[2][5]
            + hs[2][6]);
    let c22 = (hs[0][5] + hs[0][11] + hs[0][12] - hs[1][3] - hs[1][5] + hs[1][7] - hs[1][14]
        + hs[1][15]
        + hs[2][7]);
    let c23 = (hs[0][10] + hs[0][11] + hs[0][12] + hs[0][13] - hs[1][3] - hs[1][5] + hs[1][7]
        - hs[1][12]
        + hs[1][15]
        - hs[2][2]
        - hs[2][5]);
    let c24 = (hs[0][8] - hs[1][4] + hs[1][6] + hs[1][7] - hs[1][10] + hs[1][11] + hs[2][0]);
    let c25 = (-hs[0][4] + hs[0][8] - hs[0][9] + hs[0][13] + hs[1][2] - hs[1][4] - hs[1][5]
        + hs[1][7]
        - hs[1][8]
        + hs[2][0]
        - hs[2][4]);

    return [c11, c12, c13, c14, c15, c21, c22, c23, c24, c25];
}
pub fn multiply_3_by_3_matrix_a_with_3_by_3_matrix_b(a: [i32; 9], b: [i32; 9]) -> [i32; 9] {
    let [a11, a12, a13, a21, a22, a23, a31, a32, a33] = a;
    let [b11, b12, b13, b21, b22, b23, b31, b32, b33] = b;
    let lefts = [
        i32x16::from([
            a32,
            (a11 - a31 + a32),
            (a22 - a23 - a32),
            a12,
            (a12 + a22 - a23),
            (a22 - a23 - a32 + a33),
            a33,
            (a11 - a31 - a33),
            (a12 - a13 + a22 - a23),
            (a31 - a32),
            (a31 + a33),
            (a11 - a12 - a31 + a32),
            (a11 + a13 - a31 - a33),
            a11,
            (a12 + a22),
            (a22 - a23),
        ]),
        i32x16::from([
            (a21 + a22 - a31 - a32),
            (a21 + (a31 << 1) + (a33 << 1)),
            (a22 - a32),
            (a11 - a31),
            (a12 - a21 + a22),
            a13,
            (a21 + a23 + (a31 << 1) + (a33 << 1)),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b12 - b21 + b22),
            (b12 - (b21 << 1) + b22 + b23),
            (b21 + b32),
            (b21 - b23),
            (b21 + b33),
            b32,
            (b11 - b31 + b32),
            (b11 - b31 + b33),
            b33,
            b12,
            b11,
            ((b21 << 1) - b22 - b23),
            (b31 - b33),
            b13,
            (b13 + b23 + b33),
            b21,
        ]),
        i32x16::from([
            b12,
            (b11 - b21 - b31),
            (b12 - b22 - b32),
            (b11 - b12 - b13 + (b21 << 1) - b22 - b23 - b31 + b33),
            b13,
            (b32 - b33),
            (b21 + b31),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 = (hs[0][4] + hs[0][7] - hs[0][8] + hs[0][10] + hs[0][12] - hs[0][15]);
    let c12 = (-(hs[0][10] << 1) + hs[0][15] + hs[1][1] + hs[1][6]);
    let c13 = (-hs[0][2] + hs[0][5] - hs[0][6] + hs[0][10] + hs[0][15]);
    let c21 =
        (hs[0][1] + hs[0][3] + hs[0][4] - hs[0][8] + hs[0][9] + hs[0][11] - hs[0][15] + hs[1][5]);
    let c22 = (hs[0][0] - hs[0][2] + hs[0][9] + hs[0][15] + hs[1][0] - hs[1][2]);
    let c23 = (hs[0][0] - hs[0][2] + hs[0][5] + hs[0][9] + hs[0][15]);
    let c31 = (-hs[0][3] + hs[0][4] - hs[0][8] + hs[0][13] - hs[0][15]);
    let c32 = (hs[0][3] - hs[0][4] + hs[0][14] + hs[0][15] - hs[1][4]);
    let c33 = (-hs[0][0] + hs[0][1] - hs[0][2] + hs[0][5] - hs[0][6] - hs[0][7]
        + hs[0][13]
        + hs[0][15]
        + hs[1][3]);

    return [c11, c12, c13, c21, c22, c23, c31, c32, c33];
}
pub fn multiply_3_by_3_matrix_a_with_3_by_4_matrix_b(a: [i32; 9], b: [i32; 12]) -> [i32; 12] {
    let [a11, a12, a13, a21, a22, a23, a31, a32, a33] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34] = b;
    let lefts = [
        i32x16::from([
            a23,
            (a21 + a23),
            (a23 + a31),
            (a11 + a21 + a23),
            (a11 + a13 + a21 + a23),
            (a23 - a33),
            (a31 + a33),
            (a23 - a32 - a33),
            a31,
            (a22 + a23 - a32 - a33),
            (a13 - a31 - a33),
            (a11 + a13 - a31 - a33),
            (a21 - a31),
            (a21 - a22 - a31),
            (a21 - a22),
            (a13 - a33),
        ]),
        i32x16::from([
            (a11 + a21 - a22),
            (a13 - a32 - a33),
            a32,
            a12,
            (a12 + a13 - a32 - a33),
            a22,
            (a32 + a33),
            a11,
            (a11 + a21),
            (a11 - a12 + a21 - a22),
            (a21 - a22 - a31 + a32),
            a13,
            a12,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b11 - b31 - b34),
            b11,
            (b11 + b32),
            (b11 - b31 - b33 - (b34 << 1)),
            (b31 + b33 + (b34 << 1)),
            (b21 - b31 - b32),
            b32,
            (b21 + b34),
            (b12 + b14 - b32),
            b21,
            (b12 + b13 + b14 - b32),
            (b12 + b13 + b14),
            (b11 + b12 + b22),
            (b14 - b22),
            b14,
            (b12 + b13 + b14 + b23 - b32 - b33),
        ]),
        i32x16::from([
            (b14 + b23 + b24),
            (b23 + b34),
            (b22 + b24 - b34),
            (b22 + b23 + b24),
            b23,
            (b14 + b21 + b24),
            b34,
            b13,
            (b11 + b13 + b14 + b23 + b24 - b31 - b33 - (b34 << 1)),
            (b23 + b24),
            b22,
            (b33 + b34),
            (b21 + b22 + b24),
            0,
            0,
            0,
        ]),
    ];
    let hs = [lefts[0] * rights[0], lefts[1] * rights[1]];
    let c11 =
        (-hs[0][1] + hs[0][3] + hs[0][4] - hs[1][1] - hs[1][3] + hs[1][4] - hs[1][6] - hs[1][11]
            + hs[1][12]);
    let c12 = (-hs[0][0] + hs[0][1] - hs[0][7] + hs[0][9] - hs[1][6]);
    let c13 = (-hs[0][0] + hs[0][2] + hs[0][5] - hs[0][6] - hs[0][7] - hs[1][6]);
    let c14 =
        (hs[0][6] - hs[0][10] + hs[0][11] + hs[0][14] - hs[1][0] + hs[1][3] - hs[1][7] + hs[1][9]);
    let c21 = (-hs[0][1] + hs[0][2] + hs[0][8] + hs[0][12] + hs[0][13] - hs[0][14]);
    let c22 = (hs[0][6] + hs[0][8] + hs[0][13] - hs[0][14] + hs[1][10]);
    let c23 = (-hs[1][1] + hs[1][4] - hs[1][6] + hs[1][7] + hs[1][11]);
    let c24 =
        (hs[0][0] - hs[0][3] - hs[0][7] + hs[0][9] - hs[1][0] - hs[1][5] - hs[1][6] - hs[1][7]
            + hs[1][8]);
    let c31 = (-hs[0][8] - hs[0][10] + hs[0][15] - hs[1][1] - hs[1][6] + hs[1][11]);
    let c32 = (-hs[0][14] + hs[1][0] + hs[1][1] - hs[1][4] + hs[1][6] - hs[1][9]);
    let c33 = (hs[0][7] - hs[0][9] + hs[0][14] + hs[1][5] + hs[1][6]);
    let c34 = (-hs[0][13] + hs[0][14] + hs[1][2] + hs[1][6] - hs[1][10]);

    return [c11, c12, c13, c14, c21, c22, c23, c24, c31, c32, c33, c34];
}
pub fn multiply_3_by_3_matrix_a_with_3_by_5_matrix_b(a: [i32; 9], b: [i32; 15]) -> [i32; 15] {
    let [a11, a12, a13, a21, a22, a23, a31, a32, a33] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35] = b;
    let lefts = [
        i32x16::from([
            a33,
            (a13 + a23),
            (a13 - a22 + a23),
            (a11 + a13 - a22 + a23),
            (a21 + a22 - a31),
            (a21 - a31),
            (a22 - a23),
            (a21 + a22 - a31 - a33),
            a13,
            (a21 + a22 - a31 - a32),
            (a12 - a13 + a22 - a23),
            (a11 + a12),
            (a21 + a22),
            (a11 + a13 + a21 + a23),
            (a11 + a12 + a32),
            a11,
        ]),
        i32x16::from([
            (a11 + a12 + a32 - a33),
            a32,
            a31,
            (a32 - a33),
            (a21 - a31 - a33),
            (a11 + a13 + a23),
            (a12 + a32 - a33),
            (a12 + a32),
            (a21 - a31),
            (a11 + a12 + a31 + a32),
            (a31 + a33),
            (a21 + a23 - a31 - a33),
            a21,
            (a12 + a32),
            (a13 + a23),
            a23,
        ]),
        i32x16::from([
            (a12 - a13 + a32 - a33),
            (a11 + a13),
            a12,
            a22,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            b31,
            (b15 - b25 - b35),
            (b15 - b25 - b31 - b35),
            (b15 + b24),
            (b15 - b21 - b25 - b31 - b35),
            (b11 + b15 - b21 - b25 - b31 - b35),
            (b31 + b35),
            (b22 + b23 - b31 - b35),
            b31,
            (b21 + b22 + b23 + b25),
            (b24 + b25),
            b24,
            b15,
            (b13 + b14 + b15),
            (b11 + b14 - b24 - b34),
            (b14 - b24 - b34),
        ]),
        i32x16::from([
            (b12 + b34),
            b21,
            b11,
            (b22 + b23),
            (b12 - b22 - b23 - b32 - b33),
            (b13 + b14 - b24 - b34),
            (b12 - b22 - b23 - b32),
            ((b11 << 1) - b12 + (b14 << 1) - (b21 << 1) + b22 - (b24 << 1) + b32 - (b34 << 1)),
            (b12 + b13 - b22 - b23 - b32 - b33),
            (b11 + b12 + b14),
            b12,
            (b31 + b32 + b33 + b35),
            b13,
            (b11 + b14 - b21 - b24 - b34),
            (b13 + b14 - b24 - b33 - b34),
            b33,
        ]),
        i32x16::from([
            (b32 + b34),
            b34,
            b23,
            b23,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
    ];
    let c11 = (hs[0][8] + hs[0][14] - hs[0][15] - hs[1][1] - hs[1][13]);
    let c12 = (hs[0][1] - hs[0][2] - hs[0][4] + hs[0][5] - hs[0][8] + hs[1][2]);
    let c13 = (hs[0][0] + hs[1][1] + hs[1][2]);
    let c14 = (hs[1][0] - hs[1][3] - hs[1][6] - hs[2][0] - hs[2][1] - hs[2][2]);
    let c15 = (hs[0][6] + hs[0][7] + hs[1][4] + hs[1][10] + hs[1][11] - hs[1][15] - hs[2][3]);
    let c21 = (hs[1][3] + hs[1][6] + hs[1][7] + hs[1][10] - (hs[1][13] << 1) + hs[2][2]);
    let c22 = (-hs[0][15] + hs[1][5] - hs[1][14] - hs[1][15] + hs[2][2]);
    let c23 = (hs[1][12] + hs[1][15] + hs[2][3]);
    let c24 = (hs[1][4] - hs[1][6] - hs[1][7] - hs[1][8] + hs[1][12] + (hs[1][13] << 1) - hs[2][2]);
    let c25 = (hs[0][11] + hs[0][15] + hs[2][1]);
    let c31 = (-hs[0][3] - hs[0][12] + hs[0][13] - hs[1][5] - hs[1][12] - hs[2][1]);
    let c32 = (-hs[0][11] - hs[0][14] - hs[1][0] - hs[1][2] + hs[1][9] - hs[1][10]);
    let c33 = (-hs[0][2] + hs[0][3] + hs[0][6] - hs[0][8] + hs[0][10] - hs[0][11]);
    let c34 = (-hs[0][1] + hs[0][2] - hs[0][6] + hs[0][8] + hs[0][12]);
    let c35 = (-hs[0][0] - hs[0][4] + hs[0][7] - hs[0][9] + hs[0][12] - hs[1][1] - hs[1][3]);

    return [
        c11, c12, c13, c14, c15, c21, c22, c23, c24, c25, c31, c32, c33, c34, c35,
    ];
}
pub fn multiply_3_by_4_matrix_a_with_4_by_4_matrix_b(a: [i32; 12], b: [i32; 16]) -> [i32; 12] {
    let [a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44] = b;
    let lefts = [
        i32x16::from([
            a12,
            (a12 + a23),
            (a22 + a23 - a32),
            (a12 - a22 + a24),
            -a11,
            (-a11 - a33),
            (-a11 + a31 + a34),
            -a33,
            -a23,
            -a32,
            a34,
            (-a31 - a34),
            (a22 - a24 - a32),
            -a14,
            (-a11 + a31 + a32),
            (a21 - a31 - a34),
        ]),
        i32x16::from([
            (a21 - a31),
            (-a13 + a14 + a33),
            (-a11 - a12 - a13),
            (-a13 + a14 + a23),
            (-a13 + a33),
            (-(a11 << 1) - a13 + a23),
            (a12 + a13 - a33),
            (-a11 + a12 - a14 - a22 + a24 + a31 + a34),
            (a21 + a32),
            (a12 - a21 - a22),
            a21,
            (-a13 + a14 - a22 + a24 + a32 + a33 - a34),
            (a21 - a31 - a33),
            (-a13 + a14),
            -a11,
            -a24,
        ]),
        i32x16::from([
            (a22 - a24),
            (a21 + a22 + a23),
            (a22 + a23 - a32 - a33),
            a21,
            (-a13 + a14 - a21 + a23 - a24 + a31 + a34),
            (a22 - a32),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b21 + b24 - b31),
            (-b23 - b31),
            (-b23 + b32 + b33 + b34),
            (-b24 + b41),
            (-b11 - b14 + b31),
            (b12 + b31),
            (-b14 - b41),
            (b12 - b32 - b34),
            (-b23 + b33 + b34),
            (-b11 - b12 + b21 + b22 + b24 + b41),
            (-b14 + b42 + b44),
            -b14,
            (-b24 + b42),
            (b34 + b41 + b44),
            (-b11 - b12 + b41),
            (-b14 - b43),
        ]),
        i32x16::from([
            (b12 + b13 - b43),
            (b34 - b42),
            -b31,
            (b34 - b43),
            (b21 + b22 + b24 - b31 - b32 - b42),
            (-b31 - b33 - b43),
            (b21 + b22 + b24),
            b41,
            (-b11 - b12 + b21 + b41),
            (b21 + b23 + b41),
            (-b11 + b21 + b41),
            -b42,
            b12,
            b34,
            (-b11 + b13 - b14 - (b33 << 1) - (b43 << 1)),
            (-b24 - b43 - b44),
        ]),
        i32x16::from([
            -b24,
            -b23,
            (-b32 - b33 - b34),
            (-b13 - b14 + b23),
            b43,
            (b22 + b23 - b32 - b33 - b34 + b42),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
    ];
    let c11 =
        (hs[0][0] + hs[0][3] + hs[0][4] - hs[0][6] - hs[0][11] + hs[1][2] - hs[1][7] + hs[2][0]);
    let c12 = (hs[0][0] - hs[0][1] + hs[0][3] - hs[1][9] - hs[1][10] + hs[2][0] + hs[2][1]);
    let c13 =
        (hs[0][4] - hs[0][5] - hs[0][6] - hs[0][11] - hs[0][14] + hs[1][8] - hs[1][10] + hs[1][12]);
    let c14 =
        (-hs[0][0] - hs[0][5] + hs[0][7] - hs[1][1] - hs[1][2] + hs[1][4] + hs[1][6] + hs[1][13]);
    let c21 =
        (hs[0][2] + hs[0][8] - hs[0][9] - hs[0][12] - hs[1][8] + hs[1][10] + hs[2][0] + hs[2][5]);
    let c22 = (hs[0][7] - hs[0][9] - hs[0][12] - hs[1][1] - hs[1][8] + hs[1][10] + hs[1][11]
        - hs[1][12]
        + hs[1][13]
        + hs[2][0]);
    let c23 =
        (-hs[0][1] + hs[0][4] - hs[0][8] - hs[1][2] - hs[1][3] + hs[1][5] + hs[1][13] - hs[1][14]);
    let c24 =
        (-hs[0][8] - hs[0][11] + hs[0][15] - hs[1][3] + hs[1][13] - hs[2][1] - hs[2][3] - hs[2][4]);
    let c31 = (hs[0][2] - hs[0][7] - hs[0][11] + hs[0][15] - hs[1][0] + hs[1][12] - hs[2][1]
        + hs[2][2]
        - hs[2][3]);
    let c32 = (-hs[0][3] + hs[0][6] + hs[0][11] - hs[0][13] + hs[1][7] - hs[1][13] - hs[2][0]);
    let c33 = (hs[0][11] - hs[0][15] + hs[1][3] - hs[1][13] + hs[1][15] - hs[2][0] + hs[2][4]);
    let c34 = (hs[0][10] + hs[0][11] + hs[0][12] + hs[1][1] - hs[1][11] - hs[1][13] - hs[2][0]);

    return [c11, c12, c13, c14, c21, c22, c23, c24, c31, c32, c33, c34];
}
pub fn multiply_3_by_4_matrix_a_with_4_by_5_matrix_b(a: [i32; 12], b: [i32; 20]) -> [i32; 15] {
    let [a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45] =
        b;
    let lefts = [
        i32x16::from([
            -a22,
            (-a22 - a32 - a34),
            -a21,
            (a11 + a14 - a21),
            (a11 - a13 - a21),
            (a11 - a13 - a21 + a22 + a23 + a32 + a33),
            (a11 + a14 - a21 - a22 - a24 - a32 - a34),
            -a12,
            (-a12 + a32 + a34),
            (a11 - a12 - a21),
            (-a12 + a31),
            a31,
            (-a22 + a31 - a32),
            (a11 - a13 - a31),
            (a32 + a34),
            (a11 - a13),
        ]),
        i32x16::from([
            (a11 + a14),
            (a11 + a14 - a31),
            (-a22 - a32 - a33),
            (-a12 + a32 + a33),
            (-a12 - a14 + a32 + a34),
            (-a12 - a14 + a23 - a24 + a32 + a34),
            (a23 - a24),
            (-a22 - a32),
            (-a21 + a22 - a31 + a32),
            (-a12 + a32),
            (a11 - a21),
            (-a12 - a14 - a24 + a32 + a34),
            (a11 - a12),
            a33,
            (a11 - a31),
            (a23 - a24 - a33 + a34),
        ]),
        i32x16::from([
            a34,
            a13,
            a14,
            (a32 + a33),
            (a33 - a34),
            ((a11 << 1) - a13 + a14 - a23 + a24 - (a31 << 1) + a33 - a34),
            (a11 - a13 - a23 + a24 - a31 + a33),
            (a13 - a14 + a23 - a24 - a33 + a34),
            a23,
            (a11 - (a12 << 1) - a14 - a21 + a22 - a24 + a32 + a34),
            (a11 - a13 - a23 - a31 + a33),
            a24,
            (a11 - a13 - a31 + a33),
            (a13 + a14 - a23 + a24),
            (a31 - a32),
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b23 - b24 - b25),
            (b25 - b43),
            (b13 - b14 - b15),
            (-b15 + b43),
            (b14 + b33),
            -b33,
            -b43,
            (-b12 - b22 + b24 + b25),
            (b25 - b42 + b44),
            (-b12 - b22 - b23 + b24 + b25),
            (-b12 - b21),
            (b11 - b14 - b15 + b21),
            (b11 + b13 - b14 - b15 + b21),
            (b14 + b31 - b35),
            b25,
            b14,
        ]),
        i32x16::from([
            -b15,
            (-b15 - b35 + b41),
            (b24 - b33),
            (b24 - b32 - b44),
            (b42 - b44),
            (b32 + b44),
            -b35,
            (b11 + b13 - b14 - b15 + b21 + b23 - b33 - b43),
            (b11 + b13 - b14 - b15),
            (-b21 + b22 - b32 - b42),
            (-b12 - b13 - b22 - b23 + b24 + b25 - b33 + b43),
            (b22 + b23 - b24 - b25 + b32 + b42),
            -b12,
            (b24 + b31 - b34 - b35 - b44),
            (b11 - b12 + b31 - b41),
            -b44,
        ]),
        i32x16::from([
            (b25 + b41 - b45),
            (b14 - b32 + b34),
            (-b15 - b35 - b42 + b44 + b45),
            b24,
            -b44,
            b41,
            (-b35 - b41),
            b32,
            (-b33 + b34 + b44),
            (b22 + b23 - b24 - b25),
            (b31 + b41),
            (-b35 + b43 - b45),
            (b31 - b35),
            -b35,
            -b21,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
    ];
    let c11 = (hs[0][10] + hs[0][11] - hs[0][13] + hs[0][15] - hs[1][0] + hs[1][1]
        - hs[1][6]
        - hs[1][12]
        + hs[1][14]
        - hs[2][13]);
    let c12 =
        (hs[0][2] - hs[0][12] - hs[1][6] - hs[1][8] - hs[2][6] - hs[2][10] + hs[2][12] - hs[2][14]);
    let c13 = (hs[0][11] - hs[0][13] + hs[0][15] - hs[1][0] + hs[1][1]
        - (hs[1][6] << 1)
        - hs[2][5]
        - hs[2][6]
        + hs[2][12]
        - hs[2][13]
        + hs[2][14]);
    let c14 =
        (hs[0][7] - hs[0][8] + hs[0][14] - hs[1][3] - hs[1][4] - hs[1][5] - hs[1][12] - hs[1][15]
            + hs[2][3]
            + hs[2][7]);
    let c15 = (hs[0][0] + hs[0][9] + hs[1][4] + hs[1][5] - hs[1][11] - hs[1][12]
        + hs[1][15]
        + hs[2][4]
        + hs[2][9]);
    let c21 = (hs[0][7] - hs[0][8] - hs[0][10] + hs[0][14] - hs[1][3]
        + hs[1][9]
        + hs[2][3]
        + hs[2][4]
        + hs[2][14]);
    let c22 =
        (-hs[0][2] + hs[0][3] - hs[0][4] - hs[0][7] + hs[0][9] + hs[0][15] - hs[1][0] - hs[1][10]);
    let c23 = (-hs[0][0] - hs[0][1] - hs[0][2] + hs[0][3] - hs[0][4] - hs[0][5] + hs[0][6]
        - hs[0][14]
        + hs[0][15]
        - hs[1][0]
        - hs[1][2]
        - hs[2][3]);
    let c24 =
        (hs[0][0] + hs[0][1] - hs[0][11] + hs[0][12] + hs[0][14] + hs[1][2] - hs[1][7] + hs[2][3]);
    let c25 = (hs[0][15] - hs[1][3] - hs[1][5] - hs[1][15] + hs[2][1] + hs[2][3] + hs[2][7]);
    let c31 =
        (-hs[0][4] - hs[0][5] + hs[0][15] - hs[1][2] + hs[1][15] - hs[2][3] + hs[2][4] + hs[2][8]);
    let c32 = (-hs[0][13] + hs[0][15] - hs[1][13] + hs[2][3] + hs[2][4] + hs[2][12]);
    let c33 = (-hs[0][8] + hs[0][14] - hs[1][0] - hs[1][4] - hs[1][6] + hs[2][2] - hs[2][13]);
    let c34 = (-hs[0][1] + hs[0][3] + hs[0][6] - hs[0][14] - hs[1][0] - hs[1][6] - hs[2][11]);
    let c35 = (hs[0][14] - hs[1][0] + hs[1][1]
        - (hs[1][6] << 1)
        - hs[2][0]
        - hs[2][5]
        - hs[2][6]
        - hs[2][13]);

    return [
        c11, c12, c13, c14, c15, c21, c22, c23, c24, c25, c31, c32, c33, c34, c35,
    ];
}
pub fn multiply_3_by_4_matrix_a_with_4_by_11_matrix_b(a: [i32; 12], b: [i32; 44]) -> [i32; 33] {
    let [a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34] = a;
    let [b_1_1, b_1_2, b_1_3, b_1_4, b_1_5, b_1_6, b_1_7, b_1_8, b_1_9, b_1_10, b_1_11, b_2_1, b_2_2, b_2_3, b_2_4, b_2_5, b_2_6, b_2_7, b_2_8, b_2_9, b_2_10, b_2_11, b_3_1, b_3_2, b_3_3, b_3_4, b_3_5, b_3_6, b_3_7, b_3_8, b_3_9, b_3_10, b_3_11, b_4_1, b_4_2, b_4_3, b_4_4, b_4_5, b_4_6, b_4_7, b_4_8, b_4_9, b_4_10, b_4_11] =
        b;
    let lefts = [
        i32x16::from([
            -a22,
            (-a22 - a32 - a34),
            -a21,
            (a11 + a14 - a21),
            (a11 - a13 - a21),
            (a11 - a13 - a21 + a22 + a23 + a32 + a33),
            (a11 + a14 - a21 - a22 - a24 - a32 - a34),
            -a12,
            (-a12 + a32 + a34),
            (a11 - a12 - a21),
            (-a12 + a31),
            a31,
            (-a22 + a31 - a32),
            (a11 - a13 - a31),
            (a32 + a34),
            (a11 - a13),
        ]),
        i32x16::from([
            (a11 + a14),
            (a11 + a14 - a31),
            (-a22 - a32 - a33),
            (-a12 + a32 + a33),
            (-a12 - a14 + a32 + a34),
            (-a12 - a14 + a23 - a24 + a32 + a34),
            (a23 - a24),
            (-a22 - a32),
            (-a21 + a22 - a31 + a32),
            (-a12 + a32),
            (a11 - a21),
            (-a12 - a14 - a24 + a32 + a34),
            (a11 - a12),
            a33,
            (a11 - a31),
            (a23 - a24 - a33 + a34),
        ]),
        i32x16::from([
            a34,
            a13,
            a14,
            (a32 + a33),
            (a33 - a34),
            ((a11 << 1) - a13 + a14 - a23 + a24 - (a31 << 1) + a33 - a34),
            (a11 - a13 - a23 + a24 - a31 + a33),
            (a13 - a14 + a23 - a24 - a33 + a34),
            a23,
            (a11 - (a12 << 1) - a14 - a21 + a22 - a24 + a32 + a34),
            (a11 - a13 - a23 - a31 + a33),
            a24,
            (a11 - a13 - a31 + a33),
            (a13 + a14 - a23 + a24),
            (a31 - a32),
            a13,
        ]),
        i32x16::from([
            (-a31 - a32 - a33 - a34),
            (a21 + a22),
            -a22,
            (a11 + a12),
            (a11 + a14),
            (-a13 + a22),
            (a33 + a34),
            a32,
            (-a21 - a22 + a31 + a32 + a33 + a34),
            (a22 + a23),
            (a12 - a14 - a33 - a34),
            (a21 + a24),
            (a22 + a23 - a24),
            (a12 + a13),
            (-a11 - a12 + a33 + a34),
            (a11 - a22),
        ]),
        i32x16::from([
            (-a21 + a22 + a23 - a24 + a31 + a32 + a33 + a34),
            (a14 + a22),
            (a21 - a22 - a23 + a24),
            -a34,
            (-a22 + a24),
            a31,
            (a32 + a33),
            -a24,
            -a14,
            (a21 + a22 - a31),
            (a13 - a32),
            -a11,
            (a14 - a22 - a23 + a24),
            (-a11 + a24),
            (a11 + a22 + a23 - a24),
            (-a32 - a33),
        ]),
        i32x16::from([
            (a13 + a14 + a33 + a34),
            (-a12 + a14),
            (a21 + a22 + a23 + a24 - a31 - a32 - a33 - a34),
            (-a21 - a22 + a31 + a32),
            (-a21 + a22 + a23 - a24 + a31),
            (-a11 + a12 + a13 - a14),
            (a32 + a33 - a34),
            (a12 + a22),
            (-a12 + a14 - a32),
            (-a13 - a33),
            (a11 + a12 + a32),
            (-a13 - a23),
            (a21 + a24 - a31),
            (a11 + a12 + a31 + a32),
            (a11 + a21),
            (-a21 - a24 + a31 + a34),
        ]),
        i32x16::from([
            (-a14 - a24),
            (a12 - a14 + a32 - a34),
            (a14 + a24),
            (-a21 + a31),
            (a12 + a32),
            (a21 - a22 - a23 + a24 - a31 + a32 + a33 - a34),
            (a12 + a13 - a14 + a22 + a23 - a24),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (-b_2_3 + b_2_4 + b_2_5),
            (-b_2_5 + b_4_3),
            (-b_1_3 + b_1_4 + b_1_5),
            (b_1_5 - b_4_3),
            (-b_1_4 - b_3_3),
            b_3_3,
            b_4_3,
            (b_1_2 + b_2_2 - b_2_4 - b_2_5),
            (-b_2_5 + b_4_2 - b_4_4),
            (b_1_2 + b_2_2 + b_2_3 - b_2_4 - b_2_5),
            (b_1_2 + b_2_1),
            (-b_1_1 + b_1_4 + b_1_5 - b_2_1),
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5 - b_2_1),
            (-b_1_4 - b_3_1 + b_3_5),
            -b_2_5,
            -b_1_4,
        ]),
        i32x16::from([
            b_1_5,
            (b_1_5 + b_3_5 - b_4_1),
            (-b_2_4 + b_3_3),
            (-b_2_4 + b_3_2 + b_4_4),
            (-b_4_2 + b_4_4),
            (-b_3_2 - b_4_4),
            b_3_5,
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5 - b_2_1 - b_2_3 + b_3_3 + b_4_3),
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5),
            (b_2_1 - b_2_2 + b_3_2 + b_4_2),
            (b_1_2 + b_1_3 + b_2_2 + b_2_3 - b_2_4 - b_2_5 + b_3_3 - b_4_3),
            (-b_2_2 - b_2_3 + b_2_4 + b_2_5 - b_3_2 - b_4_2),
            b_1_2,
            (-b_2_4 - b_3_1 + b_3_4 + b_3_5 + b_4_4),
            (-b_1_1 + b_1_2 - b_3_1 + b_4_1),
            b_4_4,
        ]),
        i32x16::from([
            (-b_2_5 - b_4_1 + b_4_5),
            (-b_1_4 + b_3_2 - b_3_4),
            (b_1_5 + b_3_5 + b_4_2 - b_4_4 - b_4_5),
            -b_2_4,
            b_4_4,
            -b_4_1,
            (b_3_5 + b_4_1),
            -b_3_2,
            (b_3_3 - b_3_4 - b_4_4),
            (-b_2_2 - b_2_3 + b_2_4 + b_2_5),
            (-b_3_1 - b_4_1),
            (b_3_5 - b_4_3 + b_4_5),
            (-b_3_1 + b_3_5),
            b_3_5,
            b_2_1,
            (-b_2_9 + b_3_9),
        ]),
        i32x16::from([
            (-b_1_8 + b_1_11),
            -b_1_11,
            (-b_1_11 + b_2_11 - b_3_11 + b_4_11),
            (b_2_10 - b_3_10),
            (-b_3_10 - b_4_10),
            (-b_2_9 + b_3_11),
            (-b_2_6 + b_3_6),
            (b_2_7 + b_2_9 - b_3_7 - b_3_9),
            (b_2_6 - b_3_6 - b_4_11),
            -b_3_11,
            (-b_1_8 + b_1_11 + b_2_6 - b_3_6 + b_3_8 + b_3_10 - b_3_11 - b_4_10),
            -b_1_9,
            (b_1_6 - b_2_6 + b_3_6 - b_4_6),
            -b_2_9,
            (-b_1_8 + b_1_11 - b_4_10),
            (-b_1_11 - b_2_10 + b_3_10),
        ]),
        i32x16::from([
            (b_1_8 - b_1_11 - b_2_6 + (b_3_6 >> 1) - (b_3_11 >> 1) - (b_4_6 >> 1) + (b_4_11 >> 1)),
            (-b_2_6 + b_2_8 - b_2_11 + b_3_6 - b_3_8 + b_3_11 - b_4_11),
            (-b_1_6 + b_1_8 - b_1_11),
            -b_4_7,
            -b_4_11,
            -b_1_7,
            (-b_3_11 + b_4_11),
            (-b_1_9 + b_4_9),
            (b_1_8 - b_1_11 - b_2_8 + b_2_11 + b_3_8 - b_3_11 - b_4_8 + b_4_11),
            (b_1_11 - b_2_7 - b_2_9 - b_2_11 + b_3_7 + b_3_9 + b_3_11 - b_4_11),
            (b_2_9 - b_3_7 - b_3_9),
            (-b_1_10 + b_2_10 - b_3_10 + b_4_10),
            (b_1_8 - b_1_11 - b_2_6 + b_3_8 - b_3_11 - b_4_6),
            (b_1_9 - b_3_10 - b_4_10),
            (-b_1_6 + b_1_8 - b_1_11 - b_3_10),
            (b_3_10 - b_4_10),
        ]),
        i32x16::from([
            (-b_3_8 - b_3_10 + b_3_11),
            (b_2_6 - b_2_8 + b_2_11 - b_3_6 + b_3_8 - b_3_11),
            (-(b_3_6 >> 1) - (b_3_11 >> 1) - (b_4_6 >> 1) - (b_4_11 >> 1)),
            (-b_2_6 - b_2_7 - b_2_9 - b_2_11 + b_3_6 + b_3_7 + b_3_9 + b_3_11),
            (-b_1_6 + b_2_6 - b_3_6 - b_3_7 - b_3_9 + b_4_6),
            -b_3_10,
            (-b_3_7 - b_3_9),
            (b_2_6 - b_2_8 + b_2_9 - b_2_10 - b_3_6 + b_3_8 + b_3_10 - b_3_11),
            (-b_1_8 + b_1_11 + b_2_8 - b_2_11 - b_3_8 + b_3_11 - b_4_7 + b_4_8 - b_4_11),
            -b_3_7,
            (-b_1_7 + b_1_10 - b_2_10 + b_3_10 - b_4_10),
            (b_3_9 - b_3_11),
            (b_1_9 - b_3_7 - b_3_9 - b_4_7 - b_4_9),
            (b_1_7 - b_1_8 - b_1_10 + b_1_11),
            (b_1_6 - b_1_8 + b_1_9 - b_1_10),
            (-b_3_7 - b_3_9 - b_4_7 - b_4_9),
        ]),
        i32x16::from([
            (-b_3_10 + b_4_9 - b_4_10),
            (-b_3_8 - b_3_10 + b_3_11 - b_4_7 + b_4_8 + b_4_10 - b_4_11),
            (b_3_6 - b_3_8 + b_3_11 + b_4_6 - b_4_8),
            (b_1_6 + b_1_7 + b_1_9 + b_1_11 - b_2_6 - b_2_7 - b_2_9 - b_2_11
                + b_3_6
                + b_3_7
                + b_3_9
                + b_3_11
                - b_4_6
                - b_4_7
                - b_4_9
                - b_4_11),
            (b_1_7 - b_1_8 - b_1_10 + b_1_11 - b_2_7 + b_2_8 + b_2_10 - b_2_11 - b_3_8 - b_3_10
                + b_3_11
                - b_4_7
                + b_4_8
                + b_4_10
                - b_4_11),
            (-(b_3_6 >> 1) - b_3_7 - b_3_9 - (b_3_11 >> 1) + (b_4_6 >> 1) + (b_4_11 >> 1)),
            (-b_3_6 + b_3_8 + b_3_10 - b_3_11),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
        lefts[4] * rights[4],
        lefts[5] * rights[5],
        lefts[6] * rights[6],
    ];
    let c11 = (-hs[0][10] - hs[0][11] + hs[0][13] - hs[0][15] + hs[1][0] - hs[1][1]
        + hs[1][6]
        + hs[1][12]
        - hs[1][14]
        + hs[2][13]);
    let c_1_2 = (-hs[0][2] + hs[0][12] + hs[1][6] + hs[1][8] + hs[2][6] + hs[2][10] - hs[2][12]
        + hs[2][14]);
    let c_1_3 = (-hs[0][11] + hs[0][13] - hs[0][15] + hs[1][0] - hs[1][1]
        + (hs[1][6] << 1)
        + hs[2][5]
        + hs[2][6]
        - hs[2][12]
        + hs[2][13]
        - hs[2][14]);
    let c_1_4 =
        (-hs[0][7] + hs[0][8] - hs[0][14] + hs[1][3] + hs[1][4] + hs[1][5] + hs[1][12] + hs[1][15]
            - hs[2][3]
            - hs[2][7]);
    let c_1_5 = (-hs[0][0] - hs[0][9] - hs[1][4] - hs[1][5] + hs[1][11] + hs[1][12]
        - hs[1][15]
        - hs[2][4]
        - hs[2][9]);
    let c_1_6 = (-hs[0][7] + hs[0][8] + hs[0][10] - hs[0][14] + hs[1][3]
        - hs[1][9]
        - hs[2][3]
        - hs[2][4]
        - hs[2][14]);
    let c_1_7 =
        (hs[0][2] - hs[0][3] + hs[0][4] + hs[0][7] - hs[0][9] - hs[0][15] + hs[1][0] + hs[1][10]);
    let c_1_8 = (hs[0][0] + hs[0][1] + hs[0][2] - hs[0][3] + hs[0][4] + hs[0][5] - hs[0][6]
        + hs[0][14]
        - hs[0][15]
        + hs[1][0]
        + hs[1][2]
        + hs[2][3]);
    let c_1_9 =
        (-hs[0][0] - hs[0][1] + hs[0][11] - hs[0][12] - hs[0][14] - hs[1][2] + hs[1][7] - hs[2][3]);
    let c_1_10 = (-hs[0][15] + hs[1][3] + hs[1][5] + hs[1][15] - hs[2][1] - hs[2][3] - hs[2][7]);
    let c_1_11 =
        (hs[0][4] + hs[0][5] - hs[0][15] + hs[1][2] - hs[1][15] + hs[2][3] - hs[2][4] - hs[2][8]);
    let c_2_1 = (hs[0][13] - hs[0][15] + hs[1][13] - hs[2][3] - hs[2][4] - hs[2][12]);
    let c_2_2 = (hs[0][8] - hs[0][14] + hs[1][0] + hs[1][4] + hs[1][6] - hs[2][2] + hs[2][13]);
    let c_2_3 = (hs[0][1] - hs[0][3] - hs[0][6] + hs[0][14] + hs[1][0] + hs[1][6] + hs[2][11]);
    let c_2_4 = (-hs[0][14] + hs[1][0] - hs[1][1]
        + (hs[1][6] << 1)
        + hs[2][0]
        + hs[2][5]
        + hs[2][6]
        + hs[2][13]);
    let c_2_5 = (hs[3][4] - hs[3][6] + hs[3][10] - hs[3][12] + hs[3][14]
        - hs[4][12]
        - hs[4][14]
        - hs[5][0]
        - hs[6][6]);
    let c_2_6 =
        (hs[3][0] - hs[3][8] + hs[3][9] + hs[3][12] - hs[4][0] - hs[4][2] + hs[4][4] - hs[5][2]);
    let c_2_7 =
        (hs[3][0] + hs[3][6] - hs[4][0] - hs[4][2] + hs[4][6] - hs[5][4] + hs[5][6] - hs[6][5]);
    let c_2_8 = (-hs[2][15] - hs[3][7] + hs[4][8] - hs[4][10] + hs[4][11]
        - hs[5][8]
        - hs[5][10]
        - hs[6][4]);
    let c_2_9 = (hs[2][15] + hs[3][2] + hs[3][5] + hs[3][9] - hs[3][12] - hs[4][5] + hs[4][7]
        - hs[4][9]
        - hs[5][4]
        + hs[5][11]
        - hs[5][12]
        - hs[6][3]);
    let c_2_10 = (hs[2][15] + hs[3][7] + hs[4][3] - hs[4][5] + hs[4][10] + hs[5][9]);
    let c_2_11 = (hs[3][2] - hs[3][3] + hs[3][4] - hs[3][5] - hs[3][6] + hs[3][10] - hs[3][13]
        + hs[3][14]
        - hs[3][15]
        - hs[4][1]
        + hs[4][8]
        - hs[5][0]
        + hs[5][5]
        - hs[5][7]);
    let c_3_1 = (hs[3][0] - hs[3][1] - hs[3][2] - hs[3][8] - hs[4][0] + hs[4][1] + hs[4][4]
        - hs[4][8]
        - hs[4][12]
        - hs[5][2]
        - hs[6][2]);
    let c_3_2 =
        (hs[3][0] - hs[3][1] - hs[3][7] - hs[3][8] - hs[3][10] + hs[4][3] - hs[4][6] - hs[4][9]
            + hs[4][15]
            - hs[5][1]
            - hs[5][3]
            - hs[5][8]
            - hs[6][1]);
    let c_3_3 = (hs[2][15] - hs[3][4] - hs[3][13] + hs[4][7] - hs[4][13] - hs[6][0]);
    let c_3_4 = (-hs[2][15] - hs[3][5] - hs[3][9] - hs[3][11] - hs[4][7] - hs[5][11]);
    let c_3_5 = (-hs[2][15]
        - hs[3][11]
        - hs[4][3]
        - hs[4][10]
        - hs[5][6]
        - hs[5][9]
        - hs[5][12]
        - hs[5][15]);
    let c_3_6 = (hs[3][3] - hs[3][4] + hs[4][11] - hs[5][5]);
    let c_3_7 = (hs[3][1] - hs[3][11] + hs[3][15]
        - hs[4][2]
        - hs[4][11]
        - hs[4][13]
        - hs[4][14]
        - hs[5][14]);
    let c_3_8 = (-hs[3][0] - hs[3][3] - hs[3][14] - hs[4][5] - hs[4][15] - hs[5][10] - hs[5][13]);
    let c_3_9 =
        (hs[3][2] - hs[3][3] - hs[3][5] - hs[3][13] - hs[3][15] - hs[4][1] - hs[5][1] - hs[5][7]);
    let c_3_10 = (-hs[3][1] - hs[3][2] - hs[3][9] - hs[4][4]);
    let c_3_11 = (-hs[3][1] - hs[3][6] - hs[3][7] - hs[3][8] - hs[4][6] - hs[4][9] - hs[5][3]);

    return [
        c11, c_1_2, c_1_3, c_1_4, c_1_5, c_1_6, c_1_7, c_1_8, c_1_9, c_1_10, c_1_11, c_2_1, c_2_2,
        c_2_3, c_2_4, c_2_5, c_2_6, c_2_7, c_2_8, c_2_9, c_2_10, c_2_11, c_3_1, c_3_2, c_3_3,
        c_3_4, c_3_5, c_3_6, c_3_7, c_3_8, c_3_9, c_3_10, c_3_11,
    ];
}
pub fn multiply_3_by_5_matrix_a_with_5_by_5_matrix_b(a: [i32; 15], b: [i32; 25]) -> [i32; 15] {
    let [a11, a12, a13, a14, a15, a21, a22, a23, a24, a25, a31, a32, a33, a34, a35] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45, b51, b52, b53, b54, b55] =
        b;
    let lefts = [
        i32x16::from([
            a33,
            a34,
            (-a21 + a33),
            (-a11 - a34),
            -a11,
            (-a11 - a14 + a24),
            (a12 + a14 - a34),
            (a23 - a25 - a33),
            (-a31 + a33 - a34),
            (a14 - a15 - a34),
            -a21,
            (-a22 - a23 + a33),
            (a12 + a14 + a22 + a23 - a32 - a33 - a34),
            (-a14 + a15 - a23 + a25 + a33 + a34 - a35),
            (a23 - a24 - a33),
            (-a21 + a31 + a32),
        ]),
        i32x16::from([
            (-a31 - a32),
            (a21 - a31 - a35),
            (-a31 - a35),
            -a24,
            (a14 - a15 - a24),
            (a12 + a14 - a24),
            (a14 - a15 + a21 - a24 + a25 - a31 - a35),
            (a13 - a24),
            (a14 - a24),
            (a12 + a14 - a21 - a22 - a24 + a31 + a32),
            (a14 - a15),
            (a13 + a21 - a23),
            (-a11 + a13 - a14),
            (a12 + a14),
            (-a22 - a23),
            a33,
        ]),
        i32x16::from([
            a34,
            a13,
            (a13 - a23 + a25),
            (a13 - a22 - a23),
            (a13 - a23),
            a12,
            (a23 - a25),
            (-a11 + a31 + a35),
            (-a11 + a13 - a15 - a23 + a25 + a31 + a35),
            (-a11 + a31 + a32),
            (a12 + a13 - a15 - a22 - a23 + a25),
            (a12 + a13 - a15 - a23 + a25),
            (a13 - a14 + a34),
            a13,
            (a12 + a13 - a15 - a22 - a23),
            -a35,
        ]),
        i32x16::from([
            (a32 - a35),
            a25,
            (-a11 - a12 - a13 + a22 + a23 + a31 + a32),
            a15,
            (-a11 + a13 - a14 + a21 - a23 + a24),
            -a32,
            -a22,
            (-a21 + a31 - a34),
            (-a11 + a31),
            (a32 - a35),
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (-b15 - b31 + b33 - b35),
            (b15 - b41 + b43 - b45),
            (b15 - b34),
            (b15 + b42),
            (-b11 + b12 - b13 - b42),
            (-b11 + b12 - b13 + b14 - b42),
            (b25 + b41),
            (-b33 - b55),
            b15,
            (-b43 - b55),
            (-b11 - b13 + b14 + b34),
            (b25 + b31),
            b25,
            -b55,
            (b25 - b34 - b35 - b55),
            (-b11 + b24),
        ]),
        i32x16::from([
            -b11,
            (b13 - b54),
            b13,
            (b25 - b34 - b35 + b41 + b43 - b44 - b45 - b55),
            (-b43 - b54),
            (-b24 + b41),
            -b54,
            (b25 - b34 - b35 - b45 - b55),
            (-b11 + b12 - b13 + b14 + b24 - b42 - b44 - b54),
            -b24,
            -b43,
            b34,
            -b42,
            b41,
            -b31,
            (-b31 - b32 + b33 - b35),
        ]),
        i32x16::from([
            (b14 + b15 - b24 + b41 - b43 + b44 + b45 - b54),
            (b31 - b32 + b33 - b42),
            (b33 - b51 + b52),
            (-b22 + b23 + b31),
            (-b11 + b12 - b13 + b14 - b22 + b23 + b32 + b34 - b51 + b52),
            (-b21 + b22 - b23 + b41),
            b33,
            (b13 - b23 + b51 - b52),
            (b23 - b51 + b52),
            (-b11 + b22 - b23 + b51),
            (b23 - b51),
            b23,
            (b25 - b42 - b45 - b55),
            (b25 - b35 - b45 - b55),
            -b51,
            (-b13 + b23 + b53 - b55),
        ]),
        i32x16::from([
            b23,
            (b33 - b51 + b53 - b54),
            (-b22 + b23 - b51),
            (-b43 - b51 + b52 - b53),
            (-b11 + b12 - b13 + b14),
            (-b11 + b21 + b25 + b51),
            (-b21 + b23 + b24 + b31),
            (b14 + b15 - b24 - b54),
            (b12 + b15 - b22 - b52),
            (b23 - b51),
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
    ];
    let c11 =
        (hs[1][0] + hs[1][13] + hs[1][14] + hs[2][3] - hs[2][5] + hs[2][9] + hs[2][14] + hs[3][2]);
    let c12 = (hs[0][15] + hs[1][0] - hs[1][5] + hs[1][9] + hs[1][13] + hs[1][14] - hs[2][10]
        + hs[2][11]
        + hs[2][14]
        + hs[3][6]);
    let c13 = (-hs[0][6] + hs[0][11] + hs[0][12] + hs[1][0] + hs[1][13] + hs[1][14]
        - hs[3][0]
        - hs[3][5]
        + hs[3][9]);
    let c14 = (-hs[0][4] + hs[1][0] - hs[1][2] + hs[1][12] + hs[1][14] - hs[2][1]
        + hs[2][2]
        + hs[2][3]
        + hs[2][6]
        - hs[2][7]
        - hs[2][8]
        + hs[2][9]
        + hs[2][11]
        + hs[2][14]
        + hs[3][2]);
    let c15 = (-hs[0][5] + hs[0][10] + hs[1][11] + hs[1][12] + hs[1][14] - hs[2][1]
        + hs[2][2]
        + hs[2][3]
        - hs[2][4]
        + hs[2][6]
        - hs[2][10]
        + hs[2][11]
        + hs[2][14]
        + hs[3][4]);
    let c21 =
        (hs[0][0] - hs[0][3] - hs[0][4] + hs[0][8] + hs[1][0] - hs[1][2] - hs[1][15] - hs[2][7]
            + hs[2][9]
            + hs[3][8]
            + hs[3][9]);
    let c22 =
        (-hs[1][2] - hs[1][10] + hs[2][2] + hs[2][6] - hs[2][7] - hs[2][8] + hs[2][11] - hs[3][3]);
    let c23 = (hs[1][1] - hs[1][2] + hs[1][4] - hs[1][6] - hs[1][10] + hs[2][6] - hs[2][10]
        + hs[2][11]
        + hs[2][14]
        + hs[3][1]);
    let c24 =
        (hs[0][7] + hs[0][9] + hs[0][13] - hs[1][2] - hs[1][10] + hs[2][6] - hs[2][15] + hs[3][0]);
    let c25 =
        (hs[0][4] - hs[0][5] + hs[1][3] + hs[1][4] - hs[1][5] - hs[1][7] - hs[1][8] - hs[1][10]
            + hs[1][13]
            + hs[2][13]);
    let c31 = (-hs[0][10] + hs[0][15] + hs[1][0] + hs[1][1] - hs[1][2] + hs[1][3] + hs[1][4]
        - hs[1][5]
        - hs[1][6]
        - hs[1][7]
        + hs[1][9]
        - hs[1][10]
        - hs[1][11]
        + hs[1][13]
        + hs[2][13]);
    let c32 = (hs[0][1] - hs[0][2] + hs[0][8] - hs[0][10] + hs[0][15] + hs[1][0] + hs[1][1]
        - hs[1][2]
        + hs[2][0]
        + hs[3][7]);
    let c33 = (-hs[0][1] - hs[0][3] + hs[0][6] + hs[0][9] - hs[1][10] - hs[1][12] - hs[1][13]
        + hs[2][12]
        - hs[2][13]);
    let c34 = (-hs[0][0] - hs[0][2] + hs[0][7] - hs[0][11] - hs[0][14] + hs[1][7] + hs[1][11]
        - hs[1][14]
        + hs[2][6]
        - hs[2][13]);
    let c35 =
        (-hs[0][0] - hs[0][1] + hs[0][6] + hs[0][7] - hs[0][8] + hs[0][9] - hs[0][11] - hs[0][12]
            + hs[0][13]
            - hs[1][10]
            - hs[1][13]
            - hs[1][14]
            + hs[2][6]);

    return [
        c11, c12, c13, c14, c15, c21, c22, c23, c24, c25, c31, c32, c33, c34, c35,
    ];
}
pub fn multiply_3_by_5_matrix_a_with_5_by_9_matrix_b(a: [i32; 15], b: [i32; 45]) -> [i32; 27] {
    let [a11, a12, a13, a14, a15, a21, a22, a23, a24, a25, a31, a32, a33, a34, a35] = a;
    let [b11, b12, b13, b14, b15, b16, b17, b18, b19, b21, b22, b23, b24, b25, b26, b27, b28, b29, b31, b32, b33, b34, b35, b36, b37, b38, b39, b41, b42, b43, b44, b45, b46, b47, b48, b49, b51, b52, b53, b54, b55, b56, b57, b58, b59] =
        b;
    let lefts = [
        i32x16::from([
            (a22 - a23 + a33),
            (-a23 - a25 + a33),
            (-a13 + a21 - a23),
            (a13 + a23 + a25),
            (-a13 - a23 - a24),
            (-a23 - a24),
            (a23 + a25),
            (a12 - a13 + a32),
            (-a12 - a15 - a32),
            (a13 + a22),
            (a11 - a32),
            (a11 + a31 - a33),
            (-a21 + a33),
            (-a11 - a31 - a34),
            (a12 + a15 - a23 - a25 + a32 + a33 + a35),
            (a11 + a13 + a14 + a23 + a24 + a31 + a34),
        ]),
        i32x16::from([
            (-a11 - a13 - a15 - a23 - a25 - a31 - a35),
            (a11 + a31 + a35),
            (-a23 - a24 + a33),
            (-a12 - a14 - a32),
            (-a12 - a15 + a22),
            (-a12 - a14 + a22),
            (-a11 - a15 - a21 - a25 - (a31 << 1) - (a35 << 1)),
            -a33,
            -a21,
            a32,
            -a13,
            -a22,
            (-a11 - a12 - a22),
            -a34,
            a11,
            (-a12 - a14 + a22 + a24),
        ]),
        i32x16::from([
            -a35,
            a14,
            a15,
            (a12 + a14 - a23 - a24 + a32 + a33 + a34),
            (a22 + a24 + a32 + a34),
            (-a31 - a35),
            (-a21 - a31 - a35),
            (a12 + a14),
            a24,
            a22,
            -a21,
            -a25,
            (a21 + a31 + a34),
            (-a11 - a15 - a31 - a35),
            (-a21 + a31 + a32),
            a33,
        ]),
        i32x16::from([
            a34,
            (-a21 + a33),
            (-a11 - a34),
            -a11,
            (-a11 - a14 + a24),
            (a12 + a14 - a34),
            (a23 - a25 - a33),
            (-a31 + a33 - a34),
            (a14 - a15 - a34),
            -a21,
            (-a22 - a23 + a33),
            (a12 + a14 + a22 + a23 - a32 - a33 - a34),
            (-a14 + a15 - a23 + a25 + a33 + a34 - a35),
            (a23 - a24 - a33),
            (-a21 + a31 + a32),
            (-a31 - a32),
        ]),
        i32x16::from([
            (a21 - a31 - a35),
            (-a31 - a35),
            -a24,
            (a14 - a15 - a24),
            (a12 + a14 - a24),
            (a14 - a15 + a21 - a24 + a25 - a31 - a35),
            (a13 - a24),
            (a14 - a24),
            (a12 + a14 - a21 - a22 - a24 + a31 + a32),
            (a14 - a15),
            (a13 + a21 - a23),
            (-a11 + a13 - a14),
            (a12 + a14),
            (-a22 - a23),
            a33,
            a34,
        ]),
        i32x16::from([
            a13,
            (a13 - a23 + a25),
            (a13 - a22 - a23),
            (a13 - a23),
            a12,
            (a23 - a25),
            (-a11 + a31 + a35),
            (-a11 + a13 - a15 - a23 + a25 + a31 + a35),
            (-a11 + a31 + a32),
            (a12 + a13 - a15 - a22 - a23 + a25),
            (a12 + a13 - a15 - a23 + a25),
            (a13 - a14 + a34),
            a13,
            (a12 + a13 - a15 - a22 - a23),
            -a35,
            (a32 - a35),
        ]),
        i32x16::from([
            a25,
            (-a11 - a12 - a13 + a22 + a23 + a31 + a32),
            a15,
            (-a11 + a13 - a14 + a21 - a23 + a24),
            -a32,
            -a22,
            (-a21 + a31 - a34),
            (-a11 + a31),
            (a32 - a35),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (-b32 + b42 + b52),
            (b34 - b52),
            (-b31 + b41 + b51),
            (-b34 + b51),
            (-b33 - b41),
            b33,
            b34,
            (b21 + b22 - b42 - b52),
            (b24 - b44 - b52),
            (b21 + b22 + b32 - b42 - b52),
            (b12 + b21),
            (-b11 - b12 + b41 + b51),
            (-b11 - b12 - b31 + b41 + b51),
            (-b13 - b41 + b53),
            -b52,
            -b41,
        ]),
        i32x16::from([
            b51,
            (-b14 + b51 + b53),
            (b33 - b42),
            (b23 - b42 + b44),
            (-b24 + b44),
            (-b23 - b44),
            b53,
            (-b11 - b12 - b31 - b32 + b33 + b34 + b41 + b51),
            (-b11 - b31 + b41 + b51),
            (b12 - b22 + b23 + b24),
            (b21 + b22 + b31 + b32 + b33 - b34 - b42 - b52),
            (-b22 - b23 - b24 - b32 + b42 + b52),
            b21,
            (-b13 - b42 + b43 + b44 + b53),
            (-b11 - b13 + b14 + b21),
            b44,
        ]),
        i32x16::from([
            (-b14 - b52 + b54),
            (b23 - b41 - b43),
            (b24 - b44 + b51 + b53 - b54),
            -b42,
            b44,
            -b14,
            (b14 + b53),
            -b23,
            (b33 - b43 - b44),
            (-b22 - b32 + b42 + b52),
            (-b13 - b14),
            (-b34 + b53 + b54),
            (-b13 + b53),
            b53,
            b12,
            (b19 + b35 - b37 + b39),
        ]),
        i32x16::from([
            (-b19 + b45 - b47 + b49),
            (-b19 + b38),
            (-b19 - b46),
            (b15 - b16 + b17 + b46),
            (b15 - b16 + b17 - b18 + b46),
            (-b29 - b45),
            (b37 + b59),
            -b19,
            (b47 + b59),
            (b15 + b17 - b18 - b38),
            (-b29 - b35),
            -b29,
            b59,
            (-b29 + b38 + b39 + b59),
            (b15 - b28),
            b15,
        ]),
        i32x16::from([
            (-b17 + b58),
            -b17,
            (-b29 + b38 + b39 - b45 - b47 + b48 + b49 + b59),
            (b47 + b58),
            (b28 - b45),
            b58,
            (-b29 + b38 + b39 + b49 + b59),
            (b15 - b16 + b17 - b18 - b28 + b46 + b48 + b58),
            b28,
            b47,
            -b38,
            b46,
            -b45,
            b35,
            (b35 + b36 - b37 + b39),
            (-b18 - b19 + b28 - b45 + b47 - b48 - b49 + b58),
        ]),
        i32x16::from([
            (-b35 + b36 - b37 + b46),
            (-b37 + b55 - b56),
            (b26 - b27 - b35),
            (b15 - b16 + b17 - b18 + b26 - b27 - b36 - b38 + b55 - b56),
            (b25 - b26 + b27 - b45),
            -b37,
            (-b17 + b27 - b55 + b56),
            (-b27 + b55 - b56),
            (b15 - b26 + b27 - b55),
            (-b27 + b55),
            -b27,
            (-b29 + b46 + b49 + b59),
            (-b29 + b39 + b49 + b59),
            b55,
            (b17 - b27 - b57 + b59),
            -b27,
        ]),
        i32x16::from([
            (-b37 + b55 - b57 + b58),
            (b26 - b27 + b55),
            (b47 + b55 - b56 + b57),
            (b15 - b16 + b17 - b18),
            (b15 - b25 - b29 - b55),
            (b25 - b27 - b28 - b35),
            (-b18 - b19 + b28 + b58),
            (-b16 - b19 + b26 + b56),
            (-b27 + b55),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
        lefts[4] * rights[4],
        lefts[5] * rights[5],
        lefts[6] * rights[6],
    ];
    let c11 = (-hs[0][3]
        - hs[0][4]
        - hs[0][5]
        - hs[0][6]
        - hs[0][9]
        - hs[0][13]
        - hs[0][15]
        - hs[1][0]
        - hs[1][1]
        - hs[1][10]
        - hs[1][12]
        - hs[1][14]
        - (hs[2][5] << 1)
        - hs[2][6]
        - hs[2][9]
        - hs[2][10]
        - hs[2][12]);
    let c12 = (hs[0][2]
        + hs[0][3]
        + hs[0][4]
        + hs[0][5]
        + hs[0][6]
        + hs[0][9]
        + hs[1][8]
        + hs[1][10]
        + hs[2][9]);
    let c13 = (-hs[0][10] - hs[0][11] - hs[0][12]
        + hs[0][13]
        + hs[1][1]
        + hs[1][8]
        + hs[1][14]
        + (hs[2][5] << 1)
        + hs[2][6]
        + hs[2][10]
        + hs[2][12]
        - hs[2][14]);
    let c14 = (hs[0][7]
        + hs[0][8]
        + hs[0][9]
        + hs[0][10]
        + hs[1][3]
        + hs[1][4]
        + hs[1][5]
        + hs[1][9]
        + hs[1][11]
        + hs[1][12]
        + (hs[2][9] << 1));
    let c15 = (hs[0][0] + hs[0][1] - hs[0][5] + hs[0][6] + hs[0][12] + hs[1][2] + hs[1][7]
        - hs[1][8]
        - hs[2][9]);
    let c16 = (hs[0][1] - hs[0][5] + hs[0][6] - hs[0][8] + hs[0][12] - hs[0][14] + hs[1][2]
        - hs[1][3]
        - hs[1][4]
        - hs[1][5]
        + hs[1][7]
        - hs[1][8]
        - hs[1][9]
        - hs[1][11]
        - hs[2][3]
        - hs[2][9]
        + hs[2][14]);
    let c17 = (hs[0][4] + hs[0][5] + hs[0][13] + hs[0][15] - hs[2][1] + hs[2][5] + hs[2][6]
        - hs[2][7]
        + hs[2][10]
        + hs[2][12]
        - hs[2][13]);
    let c18 =
        (-hs[0][5] - hs[1][5] - hs[1][6] - hs[1][15] + hs[2][5] + hs[2][6] - hs[2][7] - hs[2][8]
            + hs[2][10]
            + hs[2][13]);
    let c19 = (-hs[0][5] + hs[1][2] - hs[1][3] - hs[1][13] + hs[1][15]
        - hs[2][3]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        + hs[2][7]
        - hs[2][10]
        - hs[2][12]);
    let c21 = (-hs[0][3] - hs[0][6] - hs[1][0] - hs[1][1] + hs[1][4] + hs[1][5] + hs[1][11]
        - hs[2][2]
        - hs[2][5]
        + hs[2][7]
        + hs[2][9]
        - hs[2][13]);
    let c22 = (hs[0][6] + hs[1][5] + hs[1][6] + hs[1][11] + hs[1][15] - hs[2][5] - hs[2][6]
        + hs[2][7]
        + hs[2][9]
        - hs[2][11]
        - hs[2][13]);
    let c23 = (hs[0][1] + hs[0][6]
        - hs[0][8]
        - hs[0][14]
        - hs[1][4]
        - hs[1][5]
        - hs[1][11]
        - hs[1][15]
        - hs[2][0]
        + hs[2][4]
        + hs[2][5]
        - hs[2][7]
        - hs[2][9]);
    let c24 = (-hs[3][15] - hs[4][12] - hs[4][13] - hs[5][2] + hs[5][4]
        - hs[5][8]
        - hs[5][13]
        - hs[6][1]);
    let c25 = (-hs[3][14] - hs[3][15] + hs[4][4] - hs[4][8] - hs[4][12] - hs[4][13] + hs[5][9]
        - hs[5][10]
        - hs[5][13]
        - hs[6][5]);
    let c26 = (hs[3][5] - hs[3][10] - hs[3][11] - hs[3][15] - hs[4][12] - hs[4][13]
        + hs[5][15]
        + hs[6][4]
        - hs[6][8]);
    let c27 = (hs[3][3] - hs[3][15] + hs[4][1] - hs[4][11] - hs[4][13] + hs[5][0]
        - hs[5][1]
        - hs[5][2]
        - hs[5][5]
        + hs[5][6]
        + hs[5][7]
        - hs[5][8]
        - hs[5][10]
        - hs[5][13]
        - hs[6][1]);
    let c28 =
        (hs[3][4] - hs[3][9] - hs[4][10] - hs[4][11] - hs[4][13] + hs[5][0] - hs[5][1] - hs[5][2]
            + hs[5][3]
            - hs[5][5]
            + hs[5][9]
            - hs[5][10]
            - hs[5][13]
            - hs[6][3]);
    let c29 =
        (-hs[2][15] + hs[3][2] + hs[3][3] - hs[3][7] - hs[3][15] + hs[4][1] + hs[4][14] + hs[5][6]
            - hs[5][8]
            - hs[6][7]
            - hs[6][8]);
    let c31 =
        (hs[4][1] + hs[4][9] - hs[5][1] - hs[5][5] + hs[5][6] + hs[5][7] - hs[5][10] + hs[6][2]);
    let c32 = (-hs[4][0] + hs[4][1] - hs[4][3] + hs[4][5] + hs[4][9] - hs[5][5] + hs[5][9]
        - hs[5][10]
        - hs[5][13]
        - hs[6][0]);
    let c33 =
        (-hs[3][6] - hs[3][8] - hs[3][12] + hs[4][1] + hs[4][9] - hs[5][5] + hs[5][14] - hs[5][15]);
    let c34 =
        (-hs[3][3] + hs[3][4] - hs[4][2] - hs[4][3] + hs[4][4] + hs[4][6] + hs[4][7] + hs[4][9]
            - hs[4][12]
            - hs[5][12]);
    let c35 = (hs[3][9] - hs[3][14] - hs[3][15] - hs[4][0] + hs[4][1] - hs[4][2] - hs[4][3]
        + hs[4][4]
        + hs[4][5]
        + hs[4][6]
        - hs[4][8]
        + hs[4][9]
        + hs[4][10]
        - hs[4][12]
        - hs[5][12]);
    let c36 = (-hs[3][0] + hs[3][1] - hs[3][7] + hs[3][9] - hs[3][14] - hs[3][15] - hs[4][0]
        + hs[4][1]
        - hs[4][15]
        - hs[6][6]);
    let c37 = (hs[3][0] + hs[3][2] - hs[3][5] - hs[3][8] + hs[4][9] + hs[4][11] + hs[4][12]
        - hs[5][11]
        + hs[5][12]);
    let c38 = (hs[2][15] + hs[3][1] - hs[3][6] + hs[3][10] + hs[3][13] - hs[4][6] - hs[4][10]
        + hs[4][13]
        - hs[5][5]
        + hs[5][12]);
    let c39 =
        (hs[2][15] + hs[3][0] - hs[3][5] - hs[3][6] + hs[3][7] - hs[3][8] + hs[3][10] + hs[3][11]
            - hs[3][12]
            + hs[4][9]
            + hs[4][12]
            + hs[4][13]
            - hs[5][5]);

    return [
        c11, c12, c13, c14, c15, c16, c17, c18, c19, c21, c22, c23, c24, c25, c26, c27, c28, c29,
        c31, c32, c33, c34, c35, c36, c37, c38, c39,
    ];
}
pub fn multiply_3_by_9_matrix_a_with_9_by_11_matrix_b(a: [i32; 27], b: [i32; 99]) -> [i32; 33] {
    let [a11, a12, a13, a14, a15, a16, a17, a18, a19, a21, a22, a23, a24, a25, a26, a27, a28, a29, a31, a32, a33, a34, a35, a36, a37, a38, a39] =
        a;
    let [b_1_1, b_1_2, b_1_3, b_1_4, b_1_5, b_1_6, b_1_7, b_1_8, b_1_9, b_1_10, b_1_11, b_2_1, b_2_2, b_2_3, b_2_4, b_2_5, b_2_6, b_2_7, b_2_8, b_2_9, b_2_10, b_2_11, b_3_1, b_3_2, b_3_3, b_3_4, b_3_5, b_3_6, b_3_7, b_3_8, b_3_9, b_3_10, b_3_11, b_4_1, b_4_2, b_4_3, b_4_4, b_4_5, b_4_6, b_4_7, b_4_8, b_4_9, b_4_10, b_4_11, b_5_1, b_5_2, b_5_3, b_5_4, b_5_5, b_5_6, b_5_7, b_5_8, b_5_9, b_5_10, b_5_11, b_6_1, b_6_2, b_6_3, b_6_4, b_6_5, b_6_6, b_6_7, b_6_8, b_6_9, b_6_10, b_6_11, b_7_1, b_7_2, b_7_3, b_7_4, b_7_5, b_7_6, b_7_7, b_7_8, b_7_9, b_7_10, b_7_11, b_8_1, b_8_2, b_8_3, b_8_4, b_8_5, b_8_6, b_8_7, b_8_8, b_8_9, b_8_10, b_8_11, b_9_1, b_9_2, b_9_3, b_9_4, b_9_5, b_9_6, b_9_7, b_9_8, b_9_9, b_9_10, b_9_11] =
        b;
    let lefts = [
        i32x16::from([
            (-a11 + a17 - a24 + a27 + a31 - a34),
            (-a12 + a18 - a25 + a28 + a32 - a35),
            (-a13 + a19 - a26 + a29 + a33 - a36),
            (-a11 - a17 - a24 + a27 + a31 + a34),
            (-a12 - a18 - a25 + a28 + a32 + a35),
            (-a13 - a19 - a26 + a29 + a33 + a36),
            (-a11 - a17 - a24 - a27 - a31 + a34),
            (-a12 - a18 - a25 - a28 - a32 + a35),
            (-a13 - a19 - a26 - a29 - a33 + a36),
            (-a11 + a17 - a24 - a27 - a31 - a34),
            (-a12 + a18 - a25 - a28 - a32 - a35),
            (-a13 + a19 - a26 - a29 - a33 - a36),
            (a11 + a17 - a24 + a27 - a31 - a34),
            (a12 + a18 - a25 + a28 - a32 - a35),
            (a13 + a19 - a26 + a29 - a33 - a36),
            (a11 + a17 - a24 - a27 + a31 - a34),
        ]),
        i32x16::from([
            (a12 + a18 - a25 - a28 + a32 - a35),
            (a13 + a19 - a26 - a29 + a33 - a36),
            (a11 - a17 - a24 + a27 - a31 + a34),
            (a12 - a18 - a25 + a28 - a32 + a35),
            (a13 - a19 - a26 + a29 - a33 + a36),
            (a11 - a17 - a24 - a27 + a31 + a34),
            (a12 - a18 - a25 - a28 + a32 + a35),
            (a13 - a19 - a26 - a29 + a33 + a36),
            (a11 - a17 - a24 + a27 + a31 - a34),
            (a12 - a18 - a25 + a28 + a32 - a35),
            (a13 - a19 - a26 + a29 + a33 - a36),
            (a11 + a17 - a24 - a27 - a31 + a34),
            (a12 + a18 - a25 - a28 - a32 + a35),
            (a13 + a19 - a26 - a29 - a33 + a36),
            (-a11 - a17 + a24 - a27 - a31 - a34),
            (-a12 - a18 + a25 - a28 - a32 - a35),
        ]),
        i32x16::from([
            (-a13 - a19 + a26 - a29 - a33 - a36),
            (a11 - a17 - a24 - a27 - a31 - a34),
            (a12 - a18 - a25 - a28 - a32 - a35),
            (a13 - a19 - a26 - a29 - a33 - a36),
            (-a11 - a17 - a24 - a27 + a31 - a34),
            (-a12 - a18 - a25 - a28 + a32 - a35),
            (-a13 - a19 - a26 - a29 + a33 - a36),
            (-a11 - a17 - a24 + a27 - a31 - a34),
            (-a12 - a18 - a25 + a28 - a32 - a35),
            (-a13 - a19 - a26 + a29 - a33 - a36),
            (a11 - a17 + a24 + a27 - a31 - a34),
            (a12 - a18 + a25 + a28 - a32 - a35),
            (a13 - a19 + a26 + a29 - a33 - a36),
            (a11 - a17 + a24 - a27 + a31 - a34),
            (a12 - a18 + a25 - a28 + a32 - a35),
            (a13 - a19 + a26 - a29 + a33 - a36),
        ]),
        i32x16::from([
            (-a11 - a17 + a31 + a37),
            (-a12 - a18 + a32 + a38),
            (-a13 - a19 + a33 + a39),
            (a11 + a17 + a31 + a37),
            (a12 + a18 + a32 + a38),
            (a13 + a19 + a33 + a39),
            (-a11 + a17 - a31 + a37),
            (-a12 + a18 - a32 + a38),
            (-a13 + a19 - a33 + a39),
            (-a11 + a17 + a31 - a37),
            (-a12 + a18 + a32 - a38),
            (-a13 + a19 + a33 - a39),
            (-a11 - a14 + a31 + a34),
            (-a12 - a15 + a32 + a35),
            (-a13 - a16 + a33 + a36),
            (-a11 + a14 - a31 + a34),
        ]),
        i32x16::from([
            (-a12 + a15 - a32 + a35),
            (-a13 + a16 - a33 + a36),
            (-a11 - a14 - a31 - a34),
            (-a12 - a15 - a32 - a35),
            (-a13 - a16 - a33 - a36),
            (a11 - a14 - a31 + a34),
            (a12 - a15 - a32 + a35),
            (a13 - a16 - a33 + a36),
            (a21 + a24 + a31 + a34),
            (a22 + a25 + a32 + a35),
            (a23 + a26 + a33 + a36),
            (a21 - a24 + a31 - a34),
            (a22 - a25 + a32 - a35),
            (a23 - a26 + a33 - a36),
            (a21 - a24 - a31 + a34),
            (a22 - a25 - a32 + a35),
        ]),
        i32x16::from([
            (a23 - a26 - a33 + a36),
            (a21 + a24 - a31 - a34),
            (a22 + a25 - a32 - a35),
            (a23 + a26 - a33 - a36),
            (a24 - a27 + a34 - a37),
            (a25 - a28 + a35 - a38),
            (a26 - a29 + a36 - a39),
            (a24 + a27 + a34 + a37),
            (a25 + a28 + a35 + a38),
            (a26 + a29 + a36 + a39),
            (a24 + a27 - a34 - a37),
            (a25 + a28 - a35 - a38),
            (a26 + a29 - a36 - a39),
            (-a24 + a27 + a34 - a37),
            (-a25 + a28 + a35 - a38),
            (-a26 + a29 + a36 - a39),
        ]),
        i32x16::from([
            (-a14 - a17 - a24 - a27),
            (-a15 - a18 - a25 - a28),
            (-a16 - a19 - a26 - a29),
            (a14 - a17 - a24 + a27),
            (a15 - a18 - a25 + a28),
            (a16 - a19 - a26 + a29),
            (-a14 + a17 - a24 + a27),
            (-a15 + a18 - a25 + a28),
            (-a16 + a19 - a26 + a29),
            (a14 + a17 - a24 - a27),
            (a15 + a18 - a25 - a28),
            (a16 + a19 - a26 - a29),
            (a11 - a17 - a21 + a27),
            (a12 - a18 - a22 + a28),
            (a13 - a19 - a23 + a29),
            (a11 + a17 + a21 + a27),
        ]),
        i32x16::from([
            (a12 + a18 + a22 + a28),
            (a13 + a19 + a23 + a29),
            (-a11 + a17 - a21 + a27),
            (-a12 + a18 - a22 + a28),
            (-a13 + a19 - a23 + a29),
            (a11 + a17 - a21 - a27),
            (a12 + a18 - a22 - a28),
            (a13 + a19 - a23 - a29),
            -a22,
            (-a22 - a32 - a34),
            -a21,
            (a11 + a14 - a21),
            (a11 - a13 - a21),
            (a11 - a13 - a21 + a22 + a23 + a32 + a33),
            (a11 + a14 - a21 - a22 - a24 - a32 - a34),
            -a12,
        ]),
        i32x16::from([
            (-a12 + a32 + a34),
            (a11 - a12 - a21),
            (-a12 + a31),
            a31,
            (-a22 + a31 - a32),
            (a11 - a13 - a31),
            (a32 + a34),
            (a11 - a13),
            (a11 + a14),
            (a11 + a14 - a31),
            (-a22 - a32 - a33),
            (-a12 + a32 + a33),
            (-a12 - a14 + a32 + a34),
            (-a12 - a14 + a23 - a24 + a32 + a34),
            (a23 - a24),
            (-a22 - a32),
        ]),
        i32x16::from([
            (-a21 + a22 - a31 + a32),
            (-a12 + a32),
            (a11 - a21),
            (-a12 - a14 - a24 + a32 + a34),
            (a11 - a12),
            a33,
            (a11 - a31),
            (a23 - a24 - a33 + a34),
            a34,
            a13,
            a14,
            (a32 + a33),
            (a33 - a34),
            ((a11 << 1) - a13 + a14 - a23 + a24 - (a31 << 1) + a33 - a34),
            (a11 - a13 - a23 + a24 - a31 + a33),
            (a13 - a14 + a23 - a24 - a33 + a34),
        ]),
        i32x16::from([
            a23,
            (a11 - (a12 << 1) - a14 - a21 + a22 - a24 + a32 + a34),
            (a11 - a13 - a23 - a31 + a33),
            a24,
            (a11 - a13 - a31 + a33),
            (a13 + a14 - a23 + a24),
            (a31 - a32),
            (-a29 + a36 - a39),
            (-a19 + a38 - a39),
            (-a29 - a38),
            (-a19 - a36),
            (-a16 + a18 - a36),
            (-a18 - a26),
            (a19 - a35 + a39),
            (a29 + a37 + a39),
            (a36 + a38 - a39),
        ]),
        i32x16::from([
            (a19 + a37 + a39),
            (a26 - a28 - a38),
            (-a29 + a35 - a39),
            (a35 - a39),
            (a37 + a39),
            -a29,
            (a25 + a28 + a38),
            (a15 + a16 + a25 + a28 + a35 + a36 + a38),
            (a27 + a28 + a38),
            (-a16 - a17 - a27 - a28 - a36 - a37 - a38),
            (a18 + a28),
            (a18 + a27 + a28),
            (-a18 - a25 - a28),
            (-a27 - a28),
            (-a18 - a28 + a29),
            -a18,
        ]),
        i32x16::from([
            (a25 + a28),
            (-a17 - a18 - a19 - a27 - a28 - a37 - a39),
            (a26 - a28 + a29),
            (a16 - a19 + a26),
            (a15 + a18 - a19 + a25 + a28 + a35 - a39),
            (a15 + a16 + a25 + a26 - a29 + a35 - a39),
            -a36,
            a38,
            (-a16 - a26),
            (a16 + a17 + a26),
            (a15 + a16 + a26),
            -a26,
            -a15,
            (a16 + a17 + a26 + a27 + a29 + a37 + a39),
            (-a16 - a17 - a36),
            (-a16 - a17),
        ]),
        i32x16::from([
            (a15 + a16 + a36),
            (-a25 - a26 - a27),
            (a16 + a17 + a25 + a26 + a27),
            a19,
            (a18 - a19 + a28 - a29),
            (a15 + a16 + a25 + a26 + a27),
            -a37,
            (-a35 + a37),
            a27,
            (a15 + a16),
            -a17,
            a26,
            -a35,
            a25,
            a38,
            a36,
        ]),
        i32x16::from([(a35 + a36), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    ];
    let rights = [
        i32x16::from([
            (-(((b_1_8 >> 1) >> 1) >> 1) - (((b_1_9 >> 1) >> 1) >> 1) - b_1_10
                + (((b_4_7 >> 1) >> 1) >> 1)
                + b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                - b_7_6
                - (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)),
            (-(((b_2_8 >> 1) >> 1) >> 1) - (((b_2_9 >> 1) >> 1) >> 1) - b_2_10
                + (((b_5_7 >> 1) >> 1) >> 1)
                + b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                - b_8_6
                - (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)),
            (-(((b_3_8 >> 1) >> 1) >> 1) - (((b_3_9 >> 1) >> 1) >> 1) - b_3_10
                + (((b_6_7 >> 1) >> 1) >> 1)
                + b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                - b_9_6
                - (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)),
            (-(((b_1_8 >> 1) >> 1) >> 1) + (((b_1_9 >> 1) >> 1) >> 1) + b_1_10
                - (((b_4_7 >> 1) >> 1) >> 1)
                + b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                - b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)),
            (-(((b_2_8 >> 1) >> 1) >> 1) + (((b_2_9 >> 1) >> 1) >> 1) + b_2_10
                - (((b_5_7 >> 1) >> 1) >> 1)
                + b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                - b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)),
            (-(((b_3_8 >> 1) >> 1) >> 1) + (((b_3_9 >> 1) >> 1) >> 1) + b_3_10
                - (((b_6_7 >> 1) >> 1) >> 1)
                + b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                - b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)),
            (-(((b_1_8 >> 1) >> 1) >> 1) - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_4_7 >> 1) >> 1) >> 1)
                - b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                - b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)),
            (-(((b_2_8 >> 1) >> 1) >> 1) - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_5_7 >> 1) >> 1) >> 1)
                - b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                - b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)),
            (-(((b_3_8 >> 1) >> 1) >> 1) - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_6_7 >> 1) >> 1) >> 1)
                - b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                - b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)),
            ((((b_1_8 >> 1) >> 1) >> 1) - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_4_7 >> 1) >> 1) >> 1)
                + b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                + b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)),
            ((((b_2_8 >> 1) >> 1) >> 1) - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_5_7 >> 1) >> 1) >> 1)
                + b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                + b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)),
            ((((b_3_8 >> 1) >> 1) >> 1) - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_6_7 >> 1) >> 1) >> 1)
                + b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                + b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)),
            (-b_1_6 + (((b_1_8 >> 1) >> 1) >> 1) - (((b_1_11 >> 1) >> 1) >> 1) - b_4_6
                + (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                + b_7_10
                - (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 + (((b_2_8 >> 1) >> 1) >> 1) - (((b_2_11 >> 1) >> 1) >> 1) - b_5_6
                + (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                + b_8_10
                - (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 + (((b_3_8 >> 1) >> 1) >> 1) - (((b_3_11 >> 1) >> 1) >> 1) - b_6_6
                + (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                + b_9_10
                - (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 + (((b_1_8 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) + b_4_6
                - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                + b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            (-b_2_6 + (((b_2_8 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) + b_5_6
                - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                + b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 + (((b_3_8 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) + b_6_6
                - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                + b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 - (((b_1_8 >> 1) >> 1) >> 1) - (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                + (((b_4_7 >> 1) >> 1) >> 1)
                - (((b_4_9 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 - (((b_2_8 >> 1) >> 1) >> 1) - (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                + (((b_5_7 >> 1) >> 1) >> 1)
                - (((b_5_9 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 - (((b_3_8 >> 1) >> 1) >> 1) - (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                + (((b_6_7 >> 1) >> 1) >> 1)
                - (((b_6_9 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (b_1_6 + (((b_1_8 >> 1) >> 1) >> 1) - (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                + (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                + (((b_7_7 >> 1) >> 1) >> 1)
                + b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (b_2_6 + (((b_2_8 >> 1) >> 1) >> 1) - (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                + (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                + (((b_8_7 >> 1) >> 1) >> 1)
                + b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (b_3_6 + (((b_3_8 >> 1) >> 1) >> 1) - (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                + (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                + (((b_9_7 >> 1) >> 1) >> 1)
                + b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 - (((b_1_7 >> 1) >> 1) >> 1)
                + (((b_1_9 >> 1) >> 1) >> 1)
                + b_4_6
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                - b_7_10),
            (-b_2_6 - (((b_2_7 >> 1) >> 1) >> 1)
                + (((b_2_9 >> 1) >> 1) >> 1)
                + b_5_6
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                - b_8_10),
            (-b_3_6 - (((b_3_7 >> 1) >> 1) >> 1)
                + (((b_3_9 >> 1) >> 1) >> 1)
                + b_6_6
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                - b_9_10),
            (-b_1_6 + (((b_1_7 >> 1) >> 1) >> 1) - (((b_1_9 >> 1) >> 1) >> 1) + b_4_6
                - (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10),
            (-b_2_6 + (((b_2_7 >> 1) >> 1) >> 1) - (((b_2_9 >> 1) >> 1) >> 1) + b_5_6
                - (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10),
            (-b_3_6 + (((b_3_7 >> 1) >> 1) >> 1) - (((b_3_9 >> 1) >> 1) >> 1) + b_6_6
                - (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10),
            (-b_1_6 + (((b_1_7 >> 1) >> 1) >> 1) + (((b_1_9 >> 1) >> 1) >> 1) - b_4_6
                + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10),
            (-b_2_6 + (((b_2_7 >> 1) >> 1) >> 1) + (((b_2_9 >> 1) >> 1) >> 1) - b_5_6
                + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10),
        ]),
        i32x16::from([
            (-b_3_6 + (((b_3_7 >> 1) >> 1) >> 1) + (((b_3_9 >> 1) >> 1) >> 1) - b_6_6
                + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10),
            (b_1_6
                + (((b_1_7 >> 1) >> 1) >> 1)
                + (((b_1_9 >> 1) >> 1) >> 1)
                + b_4_6
                + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_11 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10),
            (b_2_6
                + (((b_2_7 >> 1) >> 1) >> 1)
                + (((b_2_9 >> 1) >> 1) >> 1)
                + b_5_6
                + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_11 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10),
            (b_3_6
                + (((b_3_7 >> 1) >> 1) >> 1)
                + (((b_3_9 >> 1) >> 1) >> 1)
                + b_6_6
                + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_11 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10),
            (-(((b_1_7 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                - b_7_6
                + (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-(((b_2_7 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                - b_8_6
                + (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-(((b_3_7 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                - b_9_6
                + (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_7 >> 1) >> 1) >> 1) - b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                + b_7_6
                - (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_7 >> 1) >> 1) >> 1) - b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                + b_8_6
                - (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_7 >> 1) >> 1) >> 1) - b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                + b_9_6
                - (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-(((b_1_7 >> 1) >> 1) >> 1)
                - b_1_10
                - (((b_1_11 >> 1) >> 1) >> 1)
                - (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                - b_7_6
                - (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-(((b_2_7 >> 1) >> 1) >> 1)
                - b_2_10
                - (((b_2_11 >> 1) >> 1) >> 1)
                - (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                - b_8_6
                - (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-(((b_3_7 >> 1) >> 1) >> 1)
                - b_3_10
                - (((b_3_11 >> 1) >> 1) >> 1)
                - (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                - b_9_6
                - (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-(((b_1_7 >> 1) >> 1) >> 1) - b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                + b_4_10
                - b_7_6
                - (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_11 >> 1) >> 1) >> 1)),
            (-(((b_2_7 >> 1) >> 1) >> 1) - b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                + b_5_10
                - b_8_6
                - (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_11 >> 1) >> 1) >> 1)),
            (-(((b_3_7 >> 1) >> 1) >> 1) - b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                + b_6_10
                - b_9_6
                - (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_11 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                - b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)
                - b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                - b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)
                - b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                - b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)
                - b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + b_7_6
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + b_8_6
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + b_9_6
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                - b_7_6
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                - b_7_10
                - (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                - b_8_6
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                - b_8_10
                - (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                - b_9_6
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                - b_9_10
                - (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10
                - (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10
                - (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10
                - (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 - b_1_10 - b_4_6 + (((b_4_7 >> 1) >> 1) >> 1) - (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)),
            (-b_2_6 - b_2_10 - b_5_6 + (((b_5_7 >> 1) >> 1) >> 1) - (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)),
            (-b_3_6 - b_3_10 - b_6_6 + (((b_6_7 >> 1) >> 1) >> 1) - (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)),
            (-b_1_6 - b_1_10 + b_4_6 - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                + b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            (-b_2_6 - b_2_10 + b_5_6 - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                + b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)),
            (-b_3_6 - b_3_10 + b_6_6 - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                + b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)),
            (-b_1_6 - b_1_10 - b_4_6 - (((b_4_7 >> 1) >> 1) >> 1) + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)),
            (-b_2_6 - b_2_10 - b_5_6 - (((b_5_7 >> 1) >> 1) >> 1) + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)),
            (-b_3_6 - b_3_10 - b_6_6 - (((b_6_7 >> 1) >> 1) >> 1) + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)),
            (b_1_6 + b_1_10 - b_4_6 - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)),
            (b_2_6 + b_2_10 - b_5_6 - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)),
            (b_3_6 + b_3_10 - b_6_6 - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)),
            (-b_1_6 - (((b_1_7 >> 1) >> 1) >> 1) + (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                - (((b_1_11 >> 1) >> 1) >> 1)
                - b_4_6
                + b_4_10
                + (((b_7_9 >> 1) >> 1) >> 1)
                - (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 - (((b_2_7 >> 1) >> 1) >> 1) + (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                - (((b_2_11 >> 1) >> 1) >> 1)
                - b_5_6
                + b_5_10
                + (((b_8_9 >> 1) >> 1) >> 1)
                - (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 - (((b_3_7 >> 1) >> 1) >> 1) + (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                - (((b_3_11 >> 1) >> 1) >> 1)
                - b_6_6
                + b_6_10
                + (((b_9_9 >> 1) >> 1) >> 1)
                - (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 - (((b_1_7 >> 1) >> 1) >> 1)
                + (((b_1_8 >> 1) >> 1) >> 1)
                + (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 - (((b_2_7 >> 1) >> 1) >> 1)
                + (((b_2_8 >> 1) >> 1) >> 1)
                + (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 - (((b_3_7 >> 1) >> 1) >> 1)
                + (((b_3_8 >> 1) >> 1) >> 1)
                + (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 + (((b_1_7 >> 1) >> 1) >> 1)
                - (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                - (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 + (((b_2_7 >> 1) >> 1) >> 1)
                - (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                - (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            (-b_3_6 + (((b_3_7 >> 1) >> 1) >> 1)
                - (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                - (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (b_1_6 - (((b_1_7 >> 1) >> 1) >> 1) + (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                - b_1_10
                - (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (b_2_6 - (((b_2_7 >> 1) >> 1) >> 1) + (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                - b_2_10
                - (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (b_3_6 - (((b_3_7 >> 1) >> 1) >> 1) + (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                - b_3_10
                - (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                - b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                - b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                - b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                - b_7_6
                - (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)
                - (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10
                + (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                - b_8_6
                - (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)
                - (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10
                + (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                - b_9_6
                - (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)
                - (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10
                + (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + b_7_6
                - (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)
                - b_7_10
                - (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + b_8_6
                - (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)
                - b_8_10
                - (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + b_9_6
                - (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)
                - b_9_10
                - (((b_9_11 >> 1) >> 1) >> 1)),
            ((((b_1_9 >> 1) >> 1) >> 1) + (((b_1_11 >> 1) >> 1) >> 1) - (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                - b_7_6
                + (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)
                + (((b_7_9 >> 1) >> 1) >> 1)
                + b_7_10
                - (((b_7_11 >> 1) >> 1) >> 1)),
            ((((b_2_9 >> 1) >> 1) >> 1) + (((b_2_11 >> 1) >> 1) >> 1) - (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                - b_8_6
                + (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)
                + (((b_8_9 >> 1) >> 1) >> 1)
                + b_8_10
                - (((b_8_11 >> 1) >> 1) >> 1)),
            ((((b_3_9 >> 1) >> 1) >> 1) + (((b_3_11 >> 1) >> 1) >> 1) - (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                - b_9_6
                + (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)
                + (((b_9_9 >> 1) >> 1) >> 1)
                + b_9_10
                - (((b_9_11 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            (b_1_6
                + b_1_10
                + b_4_6
                + (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)),
            (b_2_6
                + b_2_10
                + b_5_6
                + (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)),
            (b_3_6
                + b_3_10
                + b_6_6
                + (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)),
            (-b_1_6 - b_1_10 + b_4_6 + (((b_4_7 >> 1) >> 1) >> 1) + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_9 >> 1) >> 1) >> 1)
                - b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)),
            (-b_2_6 - b_2_10 + b_5_6 + (((b_5_7 >> 1) >> 1) >> 1) + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_9 >> 1) >> 1) >> 1)
                - b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)),
            (-b_3_6 - b_3_10 + b_6_6 + (((b_6_7 >> 1) >> 1) >> 1) + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_9 >> 1) >> 1) >> 1)
                - b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)),
            (-b_1_6 - b_1_10 - b_4_6
                + (((b_4_7 >> 1) >> 1) >> 1)
                + (((b_4_8 >> 1) >> 1) >> 1)
                + (((b_4_9 >> 1) >> 1) >> 1)
                + b_4_10
                - (((b_4_11 >> 1) >> 1) >> 1)
                - (((b_7_7 >> 1) >> 1) >> 1)
                - (((b_7_8 >> 1) >> 1) >> 1)),
            (-b_2_6 - b_2_10 - b_5_6
                + (((b_5_7 >> 1) >> 1) >> 1)
                + (((b_5_8 >> 1) >> 1) >> 1)
                + (((b_5_9 >> 1) >> 1) >> 1)
                + b_5_10
                - (((b_5_11 >> 1) >> 1) >> 1)
                - (((b_8_7 >> 1) >> 1) >> 1)
                - (((b_8_8 >> 1) >> 1) >> 1)),
            (-b_3_6 - b_3_10 - b_6_6
                + (((b_6_7 >> 1) >> 1) >> 1)
                + (((b_6_8 >> 1) >> 1) >> 1)
                + (((b_6_9 >> 1) >> 1) >> 1)
                + b_6_10
                - (((b_6_11 >> 1) >> 1) >> 1)
                - (((b_9_7 >> 1) >> 1) >> 1)
                - (((b_9_8 >> 1) >> 1) >> 1)),
            (b_1_6 + b_1_10 - b_4_6 + (((b_4_7 >> 1) >> 1) >> 1) + (((b_4_8 >> 1) >> 1) >> 1)
                - (((b_4_9 >> 1) >> 1) >> 1)
                + b_4_10
                + (((b_4_11 >> 1) >> 1) >> 1)
                + (((b_7_7 >> 1) >> 1) >> 1)
                + (((b_7_8 >> 1) >> 1) >> 1)),
            (b_2_6 + b_2_10 - b_5_6 + (((b_5_7 >> 1) >> 1) >> 1) + (((b_5_8 >> 1) >> 1) >> 1)
                - (((b_5_9 >> 1) >> 1) >> 1)
                + b_5_10
                + (((b_5_11 >> 1) >> 1) >> 1)
                + (((b_8_7 >> 1) >> 1) >> 1)
                + (((b_8_8 >> 1) >> 1) >> 1)),
            (b_3_6 + b_3_10 - b_6_6 + (((b_6_7 >> 1) >> 1) >> 1) + (((b_6_8 >> 1) >> 1) >> 1)
                - (((b_6_9 >> 1) >> 1) >> 1)
                + b_6_10
                + (((b_6_11 >> 1) >> 1) >> 1)
                + (((b_9_7 >> 1) >> 1) >> 1)
                + (((b_9_8 >> 1) >> 1) >> 1)),
            (b_1_6 + (((b_1_7 >> 1) >> 1) >> 1) + (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                - b_4_6
                + b_4_10
                + (((b_7_9 >> 1) >> 1) >> 1)
                - (((b_7_11 >> 1) >> 1) >> 1)),
            (b_2_6 + (((b_2_7 >> 1) >> 1) >> 1) + (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                - b_5_6
                + b_5_10
                + (((b_8_9 >> 1) >> 1) >> 1)
                - (((b_8_11 >> 1) >> 1) >> 1)),
            (b_3_6 + (((b_3_7 >> 1) >> 1) >> 1) + (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                - b_6_6
                + b_6_10
                + (((b_9_9 >> 1) >> 1) >> 1)
                - (((b_9_11 >> 1) >> 1) >> 1)),
            (b_1_6
                - (((b_1_7 >> 1) >> 1) >> 1)
                - (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
        ]),
        i32x16::from([
            (b_2_6
                - (((b_2_7 >> 1) >> 1) >> 1)
                - (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (b_3_6
                - (((b_3_7 >> 1) >> 1) >> 1)
                - (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (b_1_6
                + (((b_1_7 >> 1) >> 1) >> 1)
                + (((b_1_8 >> 1) >> 1) >> 1)
                + (((b_1_9 >> 1) >> 1) >> 1)
                + b_1_10
                - (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (b_2_6
                + (((b_2_7 >> 1) >> 1) >> 1)
                + (((b_2_8 >> 1) >> 1) >> 1)
                + (((b_2_9 >> 1) >> 1) >> 1)
                + b_2_10
                - (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (b_3_6
                + (((b_3_7 >> 1) >> 1) >> 1)
                + (((b_3_8 >> 1) >> 1) >> 1)
                + (((b_3_9 >> 1) >> 1) >> 1)
                + b_3_10
                - (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_1_6 + (((b_1_7 >> 1) >> 1) >> 1) + (((b_1_8 >> 1) >> 1) >> 1)
                - (((b_1_9 >> 1) >> 1) >> 1)
                - b_1_10
                + (((b_1_11 >> 1) >> 1) >> 1)
                + b_4_6
                - b_4_10
                - (((b_7_9 >> 1) >> 1) >> 1)
                + (((b_7_11 >> 1) >> 1) >> 1)),
            (-b_2_6 + (((b_2_7 >> 1) >> 1) >> 1) + (((b_2_8 >> 1) >> 1) >> 1)
                - (((b_2_9 >> 1) >> 1) >> 1)
                - b_2_10
                + (((b_2_11 >> 1) >> 1) >> 1)
                + b_5_6
                - b_5_10
                - (((b_8_9 >> 1) >> 1) >> 1)
                + (((b_8_11 >> 1) >> 1) >> 1)),
            (-b_3_6 + (((b_3_7 >> 1) >> 1) >> 1) + (((b_3_8 >> 1) >> 1) >> 1)
                - (((b_3_9 >> 1) >> 1) >> 1)
                - b_3_10
                + (((b_3_11 >> 1) >> 1) >> 1)
                + b_6_6
                - b_6_10
                - (((b_9_9 >> 1) >> 1) >> 1)
                + (((b_9_11 >> 1) >> 1) >> 1)),
            (-b_2_3 + b_2_4 + b_2_5),
            (-b_2_5 + b_4_3),
            (-b_1_3 + b_1_4 + b_1_5),
            (b_1_5 - b_4_3),
            (-b_1_4 - b_3_3),
            b_3_3,
            b_4_3,
            (b_1_2 + b_2_2 - b_2_4 - b_2_5),
        ]),
        i32x16::from([
            (-b_2_5 + b_4_2 - b_4_4),
            (b_1_2 + b_2_2 + b_2_3 - b_2_4 - b_2_5),
            (b_1_2 + b_2_1),
            (-b_1_1 + b_1_4 + b_1_5 - b_2_1),
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5 - b_2_1),
            (-b_1_4 - b_3_1 + b_3_5),
            -b_2_5,
            -b_1_4,
            b_1_5,
            (b_1_5 + b_3_5 - b_4_1),
            (-b_2_4 + b_3_3),
            (-b_2_4 + b_3_2 + b_4_4),
            (-b_4_2 + b_4_4),
            (-b_3_2 - b_4_4),
            b_3_5,
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5 - b_2_1 - b_2_3 + b_3_3 + b_4_3),
        ]),
        i32x16::from([
            (-b_1_1 - b_1_3 + b_1_4 + b_1_5),
            (b_2_1 - b_2_2 + b_3_2 + b_4_2),
            (b_1_2 + b_1_3 + b_2_2 + b_2_3 - b_2_4 - b_2_5 + b_3_3 - b_4_3),
            (-b_2_2 - b_2_3 + b_2_4 + b_2_5 - b_3_2 - b_4_2),
            b_1_2,
            (-b_2_4 - b_3_1 + b_3_4 + b_3_5 + b_4_4),
            (-b_1_1 + b_1_2 - b_3_1 + b_4_1),
            b_4_4,
            (-b_2_5 - b_4_1 + b_4_5),
            (-b_1_4 + b_3_2 - b_3_4),
            (b_1_5 + b_3_5 + b_4_2 - b_4_4 - b_4_5),
            -b_2_4,
            b_4_4,
            -b_4_1,
            (b_3_5 + b_4_1),
            -b_3_2,
        ]),
        i32x16::from([
            (b_3_3 - b_3_4 - b_4_4),
            (-b_2_2 - b_2_3 + b_2_4 + b_2_5),
            (-b_3_1 - b_4_1),
            (b_3_5 - b_4_3 + b_4_5),
            (-b_3_1 + b_3_5),
            b_3_5,
            b_2_1,
            (b_5_3 - b_7_3 + b_9_1 + b_9_3),
            (b_5_4 - b_7_4 - b_9_1 + b_9_4),
            (b_8_3 - b_9_1),
            (-b_6_4 - b_9_1),
            (b_5_1 - b_6_1 + b_6_4 + b_7_1),
            (b_5_1 - b_6_1 + b_6_4 + b_7_1 - b_8_1),
            (-b_5_4 - b_9_2),
            (b_7_3 + b_9_5),
            -b_9_1,
        ]),
        i32x16::from([
            (b_7_4 + b_9_5),
            (b_5_1 + b_7_1 - b_8_1 - b_8_3),
            (-b_5_3 - b_9_2),
            -b_9_2,
            b_9_5,
            (b_8_3 - b_9_2 + b_9_3 + b_9_5),
            (b_5_1 - b_8_2),
            b_5_1,
            (-b_7_1 + b_8_5),
            -b_7_1,
            (-b_5_4 - b_7_4 + b_8_3 + b_8_4 - b_9_2 + b_9_3 + b_9_4 + b_9_5),
            (b_7_4 + b_8_5),
            (-b_5_4 + b_8_2),
            b_8_5,
            (b_8_3 - b_9_2 + b_9_3 + b_9_4 + b_9_5),
            (b_5_1 - b_6_1 + b_6_4 + b_7_1 - b_8_1 - b_8_2 + b_8_4 + b_8_5),
        ]),
        i32x16::from([
            b_8_2,
            b_7_4,
            -b_8_3,
            b_6_4,
            -b_5_4,
            b_5_3,
            (b_5_3 + b_6_3 - b_7_3 + b_9_3),
            (-b_5_4 + b_7_4 - b_8_1 + b_8_2 - b_8_4 + b_8_5 - b_9_1 - b_9_4),
            (-b_5_3 + b_6_3 + b_6_4 - b_7_3),
            (b_5_5 - b_6_5 - b_7_3),
            (-b_5_3 + b_6_2 - b_7_2),
            (b_5_1 + b_5_5 - b_6_1 + b_6_2 - b_6_3 - b_6_5 + b_7_1 - b_7_2 - b_8_1 - b_8_3),
            (b_5_2 - b_5_4 - b_6_2 + b_7_2),
            -b_7_3,
            (-b_5_5 + b_6_5 - b_7_1 + b_7_2),
            (b_5_5 - b_6_5 - b_7_2),
        ]),
        i32x16::from([
            (b_5_1 - b_5_5 - b_6_2 + b_7_2),
            (b_5_5 - b_7_2),
            -b_7_2,
            (b_6_4 - b_9_2 + b_9_4 + b_9_5),
            (-b_9_2 + b_9_3 + b_9_4 + b_9_5),
            b_5_5,
            (b_7_1 - b_7_2 - b_7_5 + b_9_5),
            -b_7_2,
            (b_5_5 - b_7_3 - b_7_5 + b_8_5),
            (b_5_5 + b_6_2 - b_7_2),
            (b_5_5 - b_6_5 + b_7_4 + b_7_5),
            (b_5_1 - b_6_1 + b_7_1 - b_8_1),
            (b_5_1 - b_5_2 - b_5_5 - b_9_2),
            (b_5_2 - b_5_3 - b_7_2 - b_8_2),
            (-b_8_1 + b_8_2 + b_8_5 - b_9_1),
            (-b_6_1 + b_6_2 + b_6_5 - b_9_1),
        ]),
        i32x16::from([(b_5_5 - b_7_2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
        lefts[4] * rights[4],
        lefts[5] * rights[5],
        lefts[6] * rights[6],
        lefts[7] * rights[7],
        lefts[8] * rights[8],
        lefts[9] * rights[9],
        lefts[10] * rights[10],
        lefts[11] * rights[11],
        lefts[12] * rights[12],
        lefts[13] * rights[13],
        lefts[14] * rights[14],
    ];
    let c11 =
        (-hs[8][2] - hs[8][3] + hs[8][5] - hs[8][7] + hs[8][8] - hs[8][9] + hs[8][14] + hs[9][4]
            - hs[9][6]
            + hs[10][5]
            + hs[10][10]
            + hs[10][11]
            + hs[10][12]
            + hs[12][3]
            + hs[12][14]
            + hs[12][15]
            + hs[13][0]
            + hs[13][9]
            + hs[13][11]
            + hs[13][15]);
    let c_1_2 = (-hs[7][10] + hs[8][4] + hs[8][14] + hs[9][0] + hs[9][14] + hs[10][2] - hs[10][4]
        + hs[10][6]
        + hs[10][9]
        + hs[11][1]
        + hs[11][6]
        - hs[11][8]
        - hs[11][13]
        + hs[12][0]
        - hs[12][2]
        - hs[13][11]
        + hs[13][14]);
    let c_1_3 = (-hs[8][3] + hs[8][5] - hs[8][7] + hs[8][8] - hs[8][9]
        + (hs[8][14] << 1)
        + hs[9][13]
        + hs[9][14]
        - hs[10][4]
        + hs[10][5]
        - hs[10][6]
        + hs[10][15]
        - hs[11][6]
        + hs[11][7]
        + hs[11][8]
        + hs[11][9]
        + hs[11][13]
        - hs[12][0]
        - hs[12][14]
        - hs[12][15]
        - hs[13][0]
        - hs[13][9]
        - hs[13][14]
        - hs[13][15]);
    let c_1_4 = (-hs[7][15] + hs[8][0] - hs[8][6]
        + hs[8][11]
        + hs[8][12]
        + hs[8][13]
        + hs[9][4]
        + hs[9][7]
        - hs[9][11]
        - hs[9][15]
        - hs[10][13]
        - hs[11][3]
        - hs[11][12]
        - hs[12][0]
        - hs[12][4]
        - hs[12][12]
        - hs[13][1]
        - hs[13][2]
        - hs[13][5]
        + hs[13][9]);
    let c_1_5 = (-hs[7][8] - hs[8][1] - hs[8][12] - hs[8][13] + hs[9][3] + hs[9][4]
        - hs[9][7]
        - hs[9][12]
        - hs[10][1]
        + hs[11][2]
        - hs[11][3]
        + hs[12][0]
        + hs[12][5]
        + hs[12][10]
        + hs[13][1]
        + hs[13][5]
        - hs[13][9]
        + hs[13][13]);
    let c_1_6 = (-hs[7][15] + hs[8][0] + hs[8][2] - hs[8][6] + hs[8][11]
        - hs[9][1]
        - hs[9][11]
        - hs[9][12]
        - hs[10][6]
        + hs[11][3]
        - hs[11][6]
        + hs[11][7]
        - hs[12][0]
        - hs[13][0]
        - hs[13][7]
        - hs[13][9]
        + hs[13][12]
        - hs[14][0]);
    let c_1_7 =
        (hs[7][10] - hs[7][11] + hs[7][12] + hs[7][15] - hs[8][1] - hs[8][7] + hs[8][8] + hs[9][2]
            - hs[11][14]
            - hs[12][2]
            - hs[12][3]
            - hs[12][8]
            - hs[12][9]
            - hs[12][10]
            - hs[12][11]
            - hs[12][15]
            - hs[13][1]
            - hs[13][2]
            - hs[13][3]
            - hs[13][4]
            - hs[13][5]
            + hs[13][9]
            - hs[13][11]);
    let c_1_8 = (hs[7][8] + hs[7][9] + hs[7][10] - hs[7][11] + hs[7][12] + hs[7][13] - hs[7][14]
        + hs[8][6]
        - hs[8][7]
        + hs[8][8]
        + hs[8][10]
        + hs[9][11]
        - hs[10][14]
        + hs[11][2]
        - hs[11][3]
        + hs[11][4]
        - hs[11][5]
        + hs[12][2]
        + hs[12][5]
        + hs[12][9]
        + hs[12][10]
        + hs[12][11]
        - hs[12][13]
        + hs[12][15]
        + hs[13][1]
        + hs[13][2]
        + hs[13][5]
        - hs[13][9]
        + hs[13][11]);
    let c_1_9 = (-hs[7][8] - hs[7][9] + hs[8][3] - hs[8][4] - hs[8][6] - hs[8][10] + hs[8][15]
        - hs[9][11]
        - hs[10][7]
        - hs[10][9]
        + hs[10][14]
        - hs[10][15]
        - hs[11][2]
        + hs[11][3]
        - hs[11][4]
        + hs[11][5]
        - hs[12][6]);
    let c_1_10 = (-hs[8][7] + hs[8][11] + hs[8][13] + hs[9][7] - hs[9][9] - hs[9][11] - hs[9][15]
        + hs[10][12]
        - hs[10][13]
        - hs[11][0]
        - hs[11][3]
        + hs[11][4]
        - hs[11][11]
        - hs[11][12]
        - hs[11][13]
        - hs[11][15]
        - hs[12][0]
        - hs[12][1]
        + hs[12][3]
        - hs[12][4]
        + hs[13][3]
        + hs[13][11]);
    let c_1_11 = (hs[7][12] + hs[7][13] - hs[8][7] + hs[8][10] - hs[9][7] + hs[9][11]
        - hs[9][12]
        - hs[10][0]
        - hs[10][12]
        + hs[11][5]
        + hs[11][10]
        + hs[11][11]
        + hs[11][12]
        + hs[11][13]
        + hs[11][14]
        + hs[11][15]
        + hs[12][0]
        - hs[13][11]);
    let c_2_1 = (hs[8][5] - hs[8][7] + hs[9][5] - hs[9][11] - hs[9][12] - hs[10][4] - hs[10][8]
        + hs[10][10]
        + hs[10][13]
        + hs[10][15]
        + hs[11][0]
        + hs[11][3]
        - hs[11][4]
        - hs[12][7]
        - hs[13][3]
        + hs[13][14]);
    let c_2_2 = (hs[8][0] - hs[8][6] + hs[8][8] + hs[8][12] + hs[8][14] - hs[9][10]
        + hs[10][5]
        + hs[11][0]
        - hs[11][4]
        + hs[11][11]
        + hs[11][13]
        + hs[12][1]
        + hs[12][15]
        + hs[13][1]
        + hs[13][2]
        + hs[13][5]
        - hs[13][10]);
    let c_2_3 = (hs[7][9] - hs[7][11] - hs[7][14]
        + hs[8][6]
        + hs[8][8]
        + hs[8][14]
        + hs[10][3]
        + hs[10][14]
        - hs[11][4]
        - hs[11][13]
        - hs[12][9]
        + hs[12][13]
        - hs[12][15]
        - hs[13][1]
        - hs[13][2]
        - hs[13][8]);
    let c_2_4 = (-hs[8][6] + hs[8][8] - hs[8][9]
        + (hs[8][14] << 1)
        + hs[9][8]
        + hs[9][13]
        + hs[9][14]
        + hs[10][5]
        + hs[11][4]
        + hs[11][8]
        + hs[11][9]
        + hs[11][13]
        - hs[12][14]
        - hs[12][15]
        + hs[13][6]
        + hs[13][7]
        + hs[14][0]);
    let c_2_5 = (-(((hs[0][0] >> 1) >> 1) >> 1)
        - (((hs[0][1] >> 1) >> 1) >> 1)
        - (((hs[0][2] >> 1) >> 1) >> 1)
        + (((hs[0][3] >> 1) >> 1) >> 1)
        + (((hs[0][4] >> 1) >> 1) >> 1)
        + (((hs[0][5] >> 1) >> 1) >> 1)
        + (((hs[0][6] >> 1) >> 1) >> 1)
        + (((hs[0][7] >> 1) >> 1) >> 1)
        + (((hs[0][8] >> 1) >> 1) >> 1)
        + (((hs[0][9] >> 1) >> 1) >> 1)
        + (((hs[0][10] >> 1) >> 1) >> 1)
        + (((hs[0][11] >> 1) >> 1) >> 1)
        + (((hs[2][4] >> 1) >> 1) >> 1)
        + (((hs[2][5] >> 1) >> 1) >> 1)
        + (((hs[2][6] >> 1) >> 1) >> 1)
        - (((hs[2][7] >> 1) >> 1) >> 1)
        - (((hs[2][8] >> 1) >> 1) >> 1)
        - (((hs[2][9] >> 1) >> 1) >> 1)
        + (((hs[2][10] >> 1) >> 1) >> 1)
        + (((hs[2][11] >> 1) >> 1) >> 1)
        + (((hs[2][12] >> 1) >> 1) >> 1)
        + (((hs[2][13] >> 1) >> 1) >> 1)
        + (((hs[2][14] >> 1) >> 1) >> 1)
        + (((hs[2][15] >> 1) >> 1) >> 1)
        + (((hs[3][12] >> 1) >> 1) >> 1)
        + (((hs[3][13] >> 1) >> 1) >> 1)
        + (((hs[3][14] >> 1) >> 1) >> 1)
        + (((hs[3][15] >> 1) >> 1) >> 1)
        + (((hs[4][0] >> 1) >> 1) >> 1)
        + (((hs[4][1] >> 1) >> 1) >> 1)
        + (((hs[4][2] >> 1) >> 1) >> 1)
        + (((hs[4][3] >> 1) >> 1) >> 1)
        + (((hs[4][4] >> 1) >> 1) >> 1)
        + (((hs[4][5] >> 1) >> 1) >> 1)
        + (((hs[4][6] >> 1) >> 1) >> 1)
        + (((hs[4][7] >> 1) >> 1) >> 1)
        + (((hs[4][8] >> 1) >> 1) >> 1)
        + (((hs[4][9] >> 1) >> 1) >> 1)
        + (((hs[4][10] >> 1) >> 1) >> 1)
        - (((hs[4][11] >> 1) >> 1) >> 1)
        - (((hs[4][12] >> 1) >> 1) >> 1)
        - (((hs[4][13] >> 1) >> 1) >> 1)
        - (((hs[4][14] >> 1) >> 1) >> 1)
        - (((hs[4][15] >> 1) >> 1) >> 1)
        - (((hs[5][0] >> 1) >> 1) >> 1)
        - (((hs[5][1] >> 1) >> 1) >> 1)
        - (((hs[5][2] >> 1) >> 1) >> 1)
        - (((hs[5][3] >> 1) >> 1) >> 1)
        - (((hs[6][0] >> 1) >> 1) >> 1)
        - (((hs[6][1] >> 1) >> 1) >> 1)
        - (((hs[6][2] >> 1) >> 1) >> 1)
        + (((hs[6][3] >> 1) >> 1) >> 1)
        + (((hs[6][4] >> 1) >> 1) >> 1)
        + (((hs[6][5] >> 1) >> 1) >> 1)
        + (((hs[6][6] >> 1) >> 1) >> 1)
        + (((hs[6][7] >> 1) >> 1) >> 1)
        + (((hs[6][8] >> 1) >> 1) >> 1)
        - (((hs[6][9] >> 1) >> 1) >> 1)
        - (((hs[6][10] >> 1) >> 1) >> 1)
        - (((hs[6][11] >> 1) >> 1) >> 1)
        + (((hs[6][12] >> 1) >> 1) >> 1)
        + (((hs[6][13] >> 1) >> 1) >> 1)
        + (((hs[6][14] >> 1) >> 1) >> 1)
        + (((hs[6][15] >> 1) >> 1) >> 1)
        + (((hs[7][0] >> 1) >> 1) >> 1)
        + (((hs[7][1] >> 1) >> 1) >> 1)
        - (((hs[7][2] >> 1) >> 1) >> 1)
        - (((hs[7][3] >> 1) >> 1) >> 1)
        - (((hs[7][4] >> 1) >> 1) >> 1)
        - (((hs[7][5] >> 1) >> 1) >> 1)
        - (((hs[7][6] >> 1) >> 1) >> 1)
        - (((hs[7][7] >> 1) >> 1) >> 1));
    let c_2_6 = (-(((hs[0][0] >> 1) >> 1) >> 1)
        - (((hs[0][1] >> 1) >> 1) >> 1)
        - (((hs[0][2] >> 1) >> 1) >> 1)
        - (((hs[0][3] >> 1) >> 1) >> 1)
        - (((hs[0][4] >> 1) >> 1) >> 1)
        - (((hs[0][5] >> 1) >> 1) >> 1)
        + (((hs[0][6] >> 1) >> 1) >> 1)
        + (((hs[0][7] >> 1) >> 1) >> 1)
        + (((hs[0][8] >> 1) >> 1) >> 1)
        - (((hs[0][9] >> 1) >> 1) >> 1)
        - (((hs[0][10] >> 1) >> 1) >> 1)
        - (((hs[0][11] >> 1) >> 1) >> 1)
        + (((hs[2][4] >> 1) >> 1) >> 1)
        + (((hs[2][5] >> 1) >> 1) >> 1)
        + (((hs[2][6] >> 1) >> 1) >> 1)
        + (((hs[2][7] >> 1) >> 1) >> 1)
        + (((hs[2][8] >> 1) >> 1) >> 1)
        + (((hs[2][9] >> 1) >> 1) >> 1)
        - (((hs[2][10] >> 1) >> 1) >> 1)
        - (((hs[2][11] >> 1) >> 1) >> 1)
        - (((hs[2][12] >> 1) >> 1) >> 1)
        + (((hs[2][13] >> 1) >> 1) >> 1)
        + (((hs[2][14] >> 1) >> 1) >> 1)
        + (((hs[2][15] >> 1) >> 1) >> 1)
        - (((hs[3][12] >> 1) >> 1) >> 1)
        - (((hs[3][13] >> 1) >> 1) >> 1)
        - (((hs[3][14] >> 1) >> 1) >> 1)
        + (((hs[3][15] >> 1) >> 1) >> 1)
        + (((hs[4][0] >> 1) >> 1) >> 1)
        + (((hs[4][1] >> 1) >> 1) >> 1)
        - (((hs[4][2] >> 1) >> 1) >> 1)
        - (((hs[4][3] >> 1) >> 1) >> 1)
        - (((hs[4][4] >> 1) >> 1) >> 1)
        + (((hs[4][5] >> 1) >> 1) >> 1)
        + (((hs[4][6] >> 1) >> 1) >> 1)
        + (((hs[4][7] >> 1) >> 1) >> 1)
        - (((hs[4][8] >> 1) >> 1) >> 1)
        - (((hs[4][9] >> 1) >> 1) >> 1)
        - (((hs[4][10] >> 1) >> 1) >> 1)
        - (((hs[4][11] >> 1) >> 1) >> 1)
        - (((hs[4][12] >> 1) >> 1) >> 1)
        - (((hs[4][13] >> 1) >> 1) >> 1)
        - (((hs[4][14] >> 1) >> 1) >> 1)
        - (((hs[4][15] >> 1) >> 1) >> 1)
        - (((hs[5][0] >> 1) >> 1) >> 1)
        + (((hs[5][1] >> 1) >> 1) >> 1)
        + (((hs[5][2] >> 1) >> 1) >> 1)
        + (((hs[5][3] >> 1) >> 1) >> 1)
        - (((hs[6][0] >> 1) >> 1) >> 1)
        - (((hs[6][1] >> 1) >> 1) >> 1)
        - (((hs[6][2] >> 1) >> 1) >> 1)
        - (((hs[6][3] >> 1) >> 1) >> 1)
        - (((hs[6][4] >> 1) >> 1) >> 1)
        - (((hs[6][5] >> 1) >> 1) >> 1)
        + (((hs[6][6] >> 1) >> 1) >> 1)
        + (((hs[6][7] >> 1) >> 1) >> 1)
        + (((hs[6][8] >> 1) >> 1) >> 1)
        + (((hs[6][9] >> 1) >> 1) >> 1)
        + (((hs[6][10] >> 1) >> 1) >> 1)
        + (((hs[6][11] >> 1) >> 1) >> 1)
        - (((hs[6][12] >> 1) >> 1) >> 1)
        - (((hs[6][13] >> 1) >> 1) >> 1)
        - (((hs[6][14] >> 1) >> 1) >> 1)
        + (((hs[6][15] >> 1) >> 1) >> 1)
        + (((hs[7][0] >> 1) >> 1) >> 1)
        + (((hs[7][1] >> 1) >> 1) >> 1)
        - (((hs[7][2] >> 1) >> 1) >> 1)
        - (((hs[7][3] >> 1) >> 1) >> 1)
        - (((hs[7][4] >> 1) >> 1) >> 1)
        + (((hs[7][5] >> 1) >> 1) >> 1)
        + (((hs[7][6] >> 1) >> 1) >> 1)
        + (((hs[7][7] >> 1) >> 1) >> 1));
    let c_2_7 = ((((hs[0][12] >> 1) >> 1) >> 1)
        + (((hs[0][13] >> 1) >> 1) >> 1)
        + (((hs[0][14] >> 1) >> 1) >> 1)
        - (((hs[0][15] >> 1) >> 1) >> 1)
        - (((hs[1][0] >> 1) >> 1) >> 1)
        - (((hs[1][1] >> 1) >> 1) >> 1)
        + (((hs[1][2] >> 1) >> 1) >> 1)
        + (((hs[1][3] >> 1) >> 1) >> 1)
        + (((hs[1][4] >> 1) >> 1) >> 1)
        + (((hs[1][5] >> 1) >> 1) >> 1)
        + (((hs[1][6] >> 1) >> 1) >> 1)
        + (((hs[1][7] >> 1) >> 1) >> 1)
        - (((hs[1][8] >> 1) >> 1) >> 1)
        - (((hs[1][9] >> 1) >> 1) >> 1)
        - (((hs[1][10] >> 1) >> 1) >> 1)
        + (((hs[1][11] >> 1) >> 1) >> 1)
        + (((hs[1][12] >> 1) >> 1) >> 1)
        + (((hs[1][13] >> 1) >> 1) >> 1)
        + (((hs[1][14] >> 1) >> 1) >> 1)
        + (((hs[1][15] >> 1) >> 1) >> 1)
        + (((hs[2][0] >> 1) >> 1) >> 1)
        - (((hs[2][1] >> 1) >> 1) >> 1)
        - (((hs[2][2] >> 1) >> 1) >> 1)
        - (((hs[2][3] >> 1) >> 1) >> 1)
        - (((hs[3][0] >> 1) >> 1) >> 1)
        - (((hs[3][1] >> 1) >> 1) >> 1)
        - (((hs[3][2] >> 1) >> 1) >> 1)
        + (((hs[3][3] >> 1) >> 1) >> 1)
        + (((hs[3][4] >> 1) >> 1) >> 1)
        + (((hs[3][5] >> 1) >> 1) >> 1)
        - (((hs[3][6] >> 1) >> 1) >> 1)
        - (((hs[3][7] >> 1) >> 1) >> 1)
        - (((hs[3][8] >> 1) >> 1) >> 1)
        - (((hs[3][9] >> 1) >> 1) >> 1)
        - (((hs[3][10] >> 1) >> 1) >> 1)
        - (((hs[3][11] >> 1) >> 1) >> 1)
        - (((hs[5][4] >> 1) >> 1) >> 1)
        - (((hs[5][5] >> 1) >> 1) >> 1)
        - (((hs[5][6] >> 1) >> 1) >> 1)
        - (((hs[5][7] >> 1) >> 1) >> 1)
        - (((hs[5][8] >> 1) >> 1) >> 1)
        - (((hs[5][9] >> 1) >> 1) >> 1)
        - (((hs[5][10] >> 1) >> 1) >> 1)
        - (((hs[5][11] >> 1) >> 1) >> 1)
        - (((hs[5][12] >> 1) >> 1) >> 1)
        + (((hs[5][13] >> 1) >> 1) >> 1)
        + (((hs[5][14] >> 1) >> 1) >> 1)
        + (((hs[5][15] >> 1) >> 1) >> 1));
    let c_2_8 = (-hs[1][8] - hs[1][9] - hs[1][10] + hs[1][11] + hs[1][12] + hs[1][13]
        - hs[1][14]
        - hs[1][15]
        - hs[2][0]
        + hs[2][1]
        + hs[2][2]
        + hs[2][3]
        + hs[2][4]
        + hs[2][5]
        + hs[2][6]
        - hs[2][7]
        - hs[2][8]
        - hs[2][9]
        - hs[2][10]
        - hs[2][11]
        - hs[2][12]
        - hs[2][13]
        - hs[2][14]
        - hs[2][15]
        - hs[3][0]
        - hs[3][1]
        - hs[3][2]
        - hs[3][3]
        - hs[3][4]
        - hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        + hs[3][9]
        + hs[3][10]
        + hs[3][11]
        - hs[3][12]
        - hs[3][13]
        - hs[3][14]
        - hs[3][15]
        - hs[4][0]
        - hs[4][1]
        + hs[4][2]
        + hs[4][3]
        + hs[4][4]
        + hs[4][5]
        + hs[4][6]
        + hs[4][7]
        - hs[5][4]
        - hs[5][5]
        - hs[5][6]
        + hs[5][7]
        + hs[5][8]
        + hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[5][12]
        - hs[5][13]
        - hs[5][14]
        - hs[5][15]
        - hs[6][0]
        - hs[6][1]
        - hs[6][2]
        + hs[6][3]
        + hs[6][4]
        + hs[6][5]
        - hs[6][6]
        - hs[6][7]
        - hs[6][8]
        + hs[6][9]
        + hs[6][10]
        + hs[6][11]);
    let c_2_9 = (-hs[0][0] - hs[0][1] - hs[0][2] + hs[0][3] + hs[0][4] + hs[0][5]
        - hs[0][6]
        - hs[0][7]
        - hs[0][8]
        - hs[0][9]
        - hs[0][10]
        - hs[0][11]
        - hs[0][12]
        - hs[0][13]
        - hs[0][14]
        + hs[0][15]
        + hs[1][0]
        + hs[1][1]
        - hs[1][2]
        - hs[1][3]
        - hs[1][4]
        - hs[1][5]
        - hs[1][6]
        - hs[1][7]
        - hs[4][8]
        - hs[4][9]
        - hs[4][10]
        - hs[4][11]
        - hs[4][12]
        - hs[4][13]
        + hs[4][14]
        + hs[4][15]
        + hs[5][0]
        - hs[5][1]
        - hs[5][2]
        - hs[5][3]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        - hs[6][15]
        - hs[7][0]
        - hs[7][1]
        - hs[7][2]
        - hs[7][3]
        - hs[7][4]
        - hs[7][5]
        - hs[7][6]
        - hs[7][7]);
    let c_2_10 = (-hs[1][8]
        - hs[1][9]
        - hs[1][10]
        - hs[1][11]
        - hs[1][12]
        - hs[1][13]
        - hs[1][14]
        - hs[1][15]
        - hs[2][0]
        - hs[2][1]
        - hs[2][2]
        - hs[2][3]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        - hs[2][7]
        - hs[2][8]
        - hs[2][9]
        + hs[2][10]
        + hs[2][11]
        + hs[2][12]
        - hs[2][13]
        - hs[2][14]
        - hs[2][15]
        + hs[3][0]
        + hs[3][1]
        + hs[3][2]
        - hs[3][3]
        - hs[3][4]
        - hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        - hs[3][9]
        - hs[3][10]
        - hs[3][11]
        + hs[3][12]
        + hs[3][13]
        + hs[3][14]
        - hs[3][15]
        - hs[4][0]
        - hs[4][1]
        + hs[4][2]
        + hs[4][3]
        + hs[4][4]
        - hs[4][5]
        - hs[4][6]
        - hs[4][7]
        - hs[5][4]
        - hs[5][5]
        - hs[5][6]
        - hs[5][7]
        - hs[5][8]
        - hs[5][9]
        + hs[5][10]
        + hs[5][11]
        + hs[5][12]
        - hs[5][13]
        - hs[5][14]
        - hs[5][15]
        + hs[6][0]
        + hs[6][1]
        + hs[6][2]
        + hs[6][3]
        + hs[6][4]
        + hs[6][5]
        - hs[6][6]
        - hs[6][7]
        - hs[6][8]
        - hs[6][9]
        - hs[6][10]
        - hs[6][11]);
    let c_2_11 = (hs[0][0]
        + hs[0][1]
        + hs[0][2]
        + hs[0][3]
        + hs[0][4]
        + hs[0][5]
        + hs[0][6]
        + hs[0][7]
        + hs[0][8]
        - hs[0][9]
        - hs[0][10]
        - hs[0][11]
        + hs[0][12]
        + hs[0][13]
        + hs[0][14]
        + hs[0][15]
        + hs[1][0]
        + hs[1][1]
        - hs[1][2]
        - hs[1][3]
        - hs[1][4]
        + hs[1][5]
        + hs[1][6]
        + hs[1][7]
        - hs[3][0]
        - hs[3][1]
        - hs[3][2]
        - hs[3][3]
        - hs[3][4]
        - hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        + hs[3][9]
        + hs[3][10]
        + hs[3][11]
        + hs[3][12]
        + hs[3][13]
        + hs[3][14]
        + hs[3][15]
        + hs[4][0]
        + hs[4][1]
        - hs[4][2]
        - hs[4][3]
        - hs[4][4]
        - hs[4][5]
        - hs[4][6]
        - hs[4][7]
        - hs[5][4]
        - hs[5][5]
        - hs[5][6]
        + hs[5][7]
        + hs[5][8]
        + hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[5][12]
        - hs[5][13]
        - hs[5][14]
        - hs[5][15]
        - hs[6][0]
        - hs[6][1]
        - hs[6][2]
        + hs[6][3]
        + hs[6][4]
        + hs[6][5]
        - hs[6][6]
        - hs[6][7]
        - hs[6][8]
        + hs[6][9]
        + hs[6][10]
        + hs[6][11]);
    let c_3_1 = (-hs[1][8] - hs[1][9] - hs[1][10]
        + hs[1][11]
        + hs[1][12]
        + hs[1][13]
        + hs[1][14]
        + hs[1][15]
        + hs[2][0]
        - hs[2][1]
        - hs[2][2]
        - hs[2][3]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        - hs[2][7]
        - hs[2][8]
        - hs[2][9]
        - hs[2][10]
        - hs[2][11]
        - hs[2][12]
        + hs[2][13]
        + hs[2][14]
        + hs[2][15]
        + hs[4][8]
        + hs[4][9]
        + hs[4][10]
        + hs[4][11]
        + hs[4][12]
        + hs[4][13]
        - hs[4][14]
        - hs[4][15]
        - hs[5][0]
        + hs[5][1]
        + hs[5][2]
        + hs[5][3]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        - hs[6][15]
        - hs[7][0]
        - hs[7][1]
        - hs[7][2]
        - hs[7][3]
        - hs[7][4]
        - hs[7][5]
        - hs[7][6]
        - hs[7][7]);
    let c_3_2 = (-hs[0][0] - hs[0][1] - hs[0][2] - hs[0][3] - hs[0][4] - hs[0][5]
        + hs[0][6]
        + hs[0][7]
        + hs[0][8]
        - hs[0][9]
        - hs[0][10]
        - hs[0][11]
        - hs[0][12]
        - hs[0][13]
        - hs[0][14]
        + hs[0][15]
        + hs[1][0]
        + hs[1][1]
        + hs[1][2]
        + hs[1][3]
        + hs[1][4]
        + hs[1][5]
        + hs[1][6]
        + hs[1][7]
        + hs[3][0]
        + hs[3][1]
        + hs[3][2]
        - hs[3][3]
        - hs[3][4]
        - hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        - hs[3][9]
        - hs[3][10]
        - hs[3][11]
        - hs[3][12]
        - hs[3][13]
        - hs[3][14]
        + hs[3][15]
        + hs[4][0]
        + hs[4][1]
        - hs[4][2]
        - hs[4][3]
        - hs[4][4]
        + hs[4][5]
        + hs[4][6]
        + hs[4][7]
        + hs[5][4]
        + hs[5][5]
        + hs[5][6]
        + hs[5][7]
        + hs[5][8]
        + hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[5][12]
        + hs[5][13]
        + hs[5][14]
        + hs[5][15]
        - hs[6][0]
        - hs[6][1]
        - hs[6][2]
        - hs[6][3]
        - hs[6][4]
        - hs[6][5]
        + hs[6][6]
        + hs[6][7]
        + hs[6][8]
        + hs[6][9]
        + hs[6][10]
        + hs[6][11]);
    let c_3_3 = (hs[0][0] + hs[0][1] + hs[0][2] - hs[0][3] - hs[0][4] - hs[0][5]
        + hs[0][6]
        + hs[0][7]
        + hs[0][8]
        + hs[0][9]
        + hs[0][10]
        + hs[0][11]
        + hs[1][8]
        + hs[1][9]
        + hs[1][10]
        - hs[1][11]
        - hs[1][12]
        - hs[1][13]
        - hs[1][14]
        - hs[1][15]
        - hs[2][0]
        + hs[2][1]
        + hs[2][2]
        + hs[2][3]
        - hs[3][12]
        - hs[3][13]
        - hs[3][14]
        + hs[3][15]
        + hs[4][0]
        + hs[4][1]
        + hs[4][2]
        + hs[4][3]
        + hs[4][4]
        - hs[4][5]
        - hs[4][6]
        - hs[4][7]
        - hs[6][0]
        - hs[6][1]
        - hs[6][2]
        - hs[6][3]
        - hs[6][4]
        - hs[6][5]
        - hs[6][6]
        - hs[6][7]
        - hs[6][8]
        - hs[6][9]
        - hs[6][10]
        - hs[6][11]);
    let c_3_4 = (-hs[0][12] - hs[0][13] - hs[0][14] - hs[0][15] - hs[1][0] - hs[1][1]
        + hs[1][2]
        + hs[1][3]
        + hs[1][4]
        - hs[1][5]
        - hs[1][6]
        - hs[1][7]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        + hs[2][7]
        + hs[2][8]
        + hs[2][9]
        + hs[2][10]
        + hs[2][11]
        + hs[2][12]
        + hs[2][13]
        + hs[2][14]
        + hs[2][15]
        + hs[3][0]
        + hs[3][1]
        + hs[3][2]
        + hs[3][3]
        + hs[3][4]
        + hs[3][5]
        + hs[3][6]
        + hs[3][7]
        + hs[3][8]
        - hs[3][9]
        - hs[3][10]
        - hs[3][11]
        - hs[4][8]
        - hs[4][9]
        - hs[4][10]
        + hs[4][11]
        + hs[4][12]
        + hs[4][13]
        - hs[4][14]
        - hs[4][15]
        - hs[5][0]
        - hs[5][1]
        - hs[5][2]
        - hs[5][3]
        + hs[5][4]
        + hs[5][5]
        + hs[5][6]
        - hs[5][7]
        - hs[5][8]
        - hs[5][9]
        + hs[5][10]
        + hs[5][11]
        + hs[5][12]
        + hs[5][13]
        + hs[5][14]
        + hs[5][15]
        + hs[6][12]
        + hs[6][13]
        + hs[6][14]
        - hs[6][15]
        - hs[7][0]
        - hs[7][1]
        - hs[7][2]
        - hs[7][3]
        - hs[7][4]
        + hs[7][5]
        + hs[7][6]
        + hs[7][7]);
    let c_3_5 = (-hs[0][12]
        - hs[0][13]
        - hs[0][14]
        - hs[0][15]
        - hs[1][0]
        - hs[1][1]
        - hs[1][2]
        - hs[1][3]
        - hs[1][4]
        + hs[1][5]
        + hs[1][6]
        + hs[1][7]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        + hs[2][7]
        + hs[2][8]
        + hs[2][9]
        - hs[2][10]
        - hs[2][11]
        - hs[2][12]
        - hs[2][13]
        - hs[2][14]
        - hs[2][15]
        + hs[3][0]
        + hs[3][1]
        + hs[3][2]
        + hs[3][3]
        + hs[3][4]
        + hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        + hs[3][9]
        + hs[3][10]
        + hs[3][11]
        - hs[4][8]
        - hs[4][9]
        - hs[4][10]
        + hs[4][11]
        + hs[4][12]
        + hs[4][13]
        + hs[4][14]
        + hs[4][15]
        + hs[5][0]
        + hs[5][1]
        + hs[5][2]
        + hs[5][3]
        + hs[5][4]
        + hs[5][5]
        + hs[5][6]
        - hs[5][7]
        - hs[5][8]
        - hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[5][12]
        - hs[5][13]
        - hs[5][14]
        - hs[5][15]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        - hs[6][15]
        - hs[7][0]
        - hs[7][1]
        + hs[7][2]
        + hs[7][3]
        + hs[7][4]
        + hs[7][5]
        + hs[7][6]
        + hs[7][7]);
    let c_3_6 = ((((hs[0][12] >> 1) >> 1) >> 1)
        + (((hs[0][13] >> 1) >> 1) >> 1)
        + (((hs[0][14] >> 1) >> 1) >> 1)
        + (((hs[0][15] >> 1) >> 1) >> 1)
        + (((hs[1][0] >> 1) >> 1) >> 1)
        + (((hs[1][1] >> 1) >> 1) >> 1)
        + (((hs[1][2] >> 1) >> 1) >> 1)
        + (((hs[1][3] >> 1) >> 1) >> 1)
        + (((hs[1][4] >> 1) >> 1) >> 1)
        - (((hs[1][5] >> 1) >> 1) >> 1)
        - (((hs[1][6] >> 1) >> 1) >> 1)
        - (((hs[1][7] >> 1) >> 1) >> 1)
        + (((hs[1][8] >> 1) >> 1) >> 1)
        + (((hs[1][9] >> 1) >> 1) >> 1)
        + (((hs[1][10] >> 1) >> 1) >> 1)
        + (((hs[1][11] >> 1) >> 1) >> 1)
        + (((hs[1][12] >> 1) >> 1) >> 1)
        + (((hs[1][13] >> 1) >> 1) >> 1)
        - (((hs[1][14] >> 1) >> 1) >> 1)
        - (((hs[1][15] >> 1) >> 1) >> 1)
        - (((hs[2][0] >> 1) >> 1) >> 1)
        - (((hs[2][1] >> 1) >> 1) >> 1)
        - (((hs[2][2] >> 1) >> 1) >> 1)
        - (((hs[2][3] >> 1) >> 1) >> 1)
        + (((hs[3][12] >> 1) >> 1) >> 1)
        + (((hs[3][13] >> 1) >> 1) >> 1)
        + (((hs[3][14] >> 1) >> 1) >> 1)
        + (((hs[3][15] >> 1) >> 1) >> 1)
        + (((hs[4][0] >> 1) >> 1) >> 1)
        + (((hs[4][1] >> 1) >> 1) >> 1)
        + (((hs[4][2] >> 1) >> 1) >> 1)
        + (((hs[4][3] >> 1) >> 1) >> 1)
        + (((hs[4][4] >> 1) >> 1) >> 1)
        + (((hs[4][5] >> 1) >> 1) >> 1)
        + (((hs[4][6] >> 1) >> 1) >> 1)
        + (((hs[4][7] >> 1) >> 1) >> 1)
        + (((hs[4][8] >> 1) >> 1) >> 1)
        + (((hs[4][9] >> 1) >> 1) >> 1)
        + (((hs[4][10] >> 1) >> 1) >> 1)
        - (((hs[4][11] >> 1) >> 1) >> 1)
        - (((hs[4][12] >> 1) >> 1) >> 1)
        - (((hs[4][13] >> 1) >> 1) >> 1)
        - (((hs[4][14] >> 1) >> 1) >> 1)
        - (((hs[4][15] >> 1) >> 1) >> 1)
        - (((hs[5][0] >> 1) >> 1) >> 1)
        - (((hs[5][1] >> 1) >> 1) >> 1)
        - (((hs[5][2] >> 1) >> 1) >> 1)
        - (((hs[5][3] >> 1) >> 1) >> 1)
        + (((hs[6][0] >> 1) >> 1) >> 1)
        + (((hs[6][1] >> 1) >> 1) >> 1)
        + (((hs[6][2] >> 1) >> 1) >> 1)
        - (((hs[6][3] >> 1) >> 1) >> 1)
        - (((hs[6][4] >> 1) >> 1) >> 1)
        - (((hs[6][5] >> 1) >> 1) >> 1)
        - (((hs[6][6] >> 1) >> 1) >> 1)
        - (((hs[6][7] >> 1) >> 1) >> 1)
        - (((hs[6][8] >> 1) >> 1) >> 1)
        + (((hs[6][9] >> 1) >> 1) >> 1)
        + (((hs[6][10] >> 1) >> 1) >> 1)
        + (((hs[6][11] >> 1) >> 1) >> 1)
        + (((hs[6][12] >> 1) >> 1) >> 1)
        + (((hs[6][13] >> 1) >> 1) >> 1)
        + (((hs[6][14] >> 1) >> 1) >> 1)
        + (((hs[6][15] >> 1) >> 1) >> 1)
        + (((hs[7][0] >> 1) >> 1) >> 1)
        + (((hs[7][1] >> 1) >> 1) >> 1)
        - (((hs[7][2] >> 1) >> 1) >> 1)
        - (((hs[7][3] >> 1) >> 1) >> 1)
        - (((hs[7][4] >> 1) >> 1) >> 1)
        - (((hs[7][5] >> 1) >> 1) >> 1)
        - (((hs[7][6] >> 1) >> 1) >> 1)
        - (((hs[7][7] >> 1) >> 1) >> 1));
    let c_3_7 = ((((hs[0][12] >> 1) >> 1) >> 1)
        + (((hs[0][13] >> 1) >> 1) >> 1)
        + (((hs[0][14] >> 1) >> 1) >> 1)
        - (((hs[0][15] >> 1) >> 1) >> 1)
        - (((hs[1][0] >> 1) >> 1) >> 1)
        - (((hs[1][1] >> 1) >> 1) >> 1)
        - (((hs[1][2] >> 1) >> 1) >> 1)
        - (((hs[1][3] >> 1) >> 1) >> 1)
        - (((hs[1][4] >> 1) >> 1) >> 1)
        - (((hs[1][5] >> 1) >> 1) >> 1)
        - (((hs[1][6] >> 1) >> 1) >> 1)
        - (((hs[1][7] >> 1) >> 1) >> 1)
        - (((hs[1][8] >> 1) >> 1) >> 1)
        - (((hs[1][9] >> 1) >> 1) >> 1)
        - (((hs[1][10] >> 1) >> 1) >> 1)
        - (((hs[1][11] >> 1) >> 1) >> 1)
        - (((hs[1][12] >> 1) >> 1) >> 1)
        - (((hs[1][13] >> 1) >> 1) >> 1)
        - (((hs[1][14] >> 1) >> 1) >> 1)
        - (((hs[1][15] >> 1) >> 1) >> 1)
        - (((hs[2][0] >> 1) >> 1) >> 1)
        - (((hs[2][1] >> 1) >> 1) >> 1)
        - (((hs[2][2] >> 1) >> 1) >> 1)
        - (((hs[2][3] >> 1) >> 1) >> 1)
        + (((hs[3][12] >> 1) >> 1) >> 1)
        + (((hs[3][13] >> 1) >> 1) >> 1)
        + (((hs[3][14] >> 1) >> 1) >> 1)
        - (((hs[3][15] >> 1) >> 1) >> 1)
        - (((hs[4][0] >> 1) >> 1) >> 1)
        - (((hs[4][1] >> 1) >> 1) >> 1)
        + (((hs[4][2] >> 1) >> 1) >> 1)
        + (((hs[4][3] >> 1) >> 1) >> 1)
        + (((hs[4][4] >> 1) >> 1) >> 1)
        - (((hs[4][5] >> 1) >> 1) >> 1)
        - (((hs[4][6] >> 1) >> 1) >> 1)
        - (((hs[4][7] >> 1) >> 1) >> 1)
        + (((hs[4][8] >> 1) >> 1) >> 1)
        + (((hs[4][9] >> 1) >> 1) >> 1)
        + (((hs[4][10] >> 1) >> 1) >> 1)
        + (((hs[4][11] >> 1) >> 1) >> 1)
        + (((hs[4][12] >> 1) >> 1) >> 1)
        + (((hs[4][13] >> 1) >> 1) >> 1)
        + (((hs[4][14] >> 1) >> 1) >> 1)
        + (((hs[4][15] >> 1) >> 1) >> 1)
        + (((hs[5][0] >> 1) >> 1) >> 1)
        - (((hs[5][1] >> 1) >> 1) >> 1)
        - (((hs[5][2] >> 1) >> 1) >> 1)
        - (((hs[5][3] >> 1) >> 1) >> 1)
        + (((hs[6][0] >> 1) >> 1) >> 1)
        + (((hs[6][1] >> 1) >> 1) >> 1)
        + (((hs[6][2] >> 1) >> 1) >> 1)
        + (((hs[6][3] >> 1) >> 1) >> 1)
        + (((hs[6][4] >> 1) >> 1) >> 1)
        + (((hs[6][5] >> 1) >> 1) >> 1)
        - (((hs[6][6] >> 1) >> 1) >> 1)
        - (((hs[6][7] >> 1) >> 1) >> 1)
        - (((hs[6][8] >> 1) >> 1) >> 1)
        - (((hs[6][9] >> 1) >> 1) >> 1)
        - (((hs[6][10] >> 1) >> 1) >> 1)
        - (((hs[6][11] >> 1) >> 1) >> 1)
        - (((hs[6][12] >> 1) >> 1) >> 1)
        - (((hs[6][13] >> 1) >> 1) >> 1)
        - (((hs[6][14] >> 1) >> 1) >> 1)
        + (((hs[6][15] >> 1) >> 1) >> 1)
        + (((hs[7][0] >> 1) >> 1) >> 1)
        + (((hs[7][1] >> 1) >> 1) >> 1)
        - (((hs[7][2] >> 1) >> 1) >> 1)
        - (((hs[7][3] >> 1) >> 1) >> 1)
        - (((hs[7][4] >> 1) >> 1) >> 1)
        + (((hs[7][5] >> 1) >> 1) >> 1)
        + (((hs[7][6] >> 1) >> 1) >> 1)
        + (((hs[7][7] >> 1) >> 1) >> 1));
    let c_3_8 = (-(((hs[0][0] >> 1) >> 1) >> 1)
        - (((hs[0][1] >> 1) >> 1) >> 1)
        - (((hs[0][2] >> 1) >> 1) >> 1)
        + (((hs[0][3] >> 1) >> 1) >> 1)
        + (((hs[0][4] >> 1) >> 1) >> 1)
        + (((hs[0][5] >> 1) >> 1) >> 1)
        - (((hs[0][6] >> 1) >> 1) >> 1)
        - (((hs[0][7] >> 1) >> 1) >> 1)
        - (((hs[0][8] >> 1) >> 1) >> 1)
        - (((hs[0][9] >> 1) >> 1) >> 1)
        - (((hs[0][10] >> 1) >> 1) >> 1)
        - (((hs[0][11] >> 1) >> 1) >> 1)
        + (((hs[2][4] >> 1) >> 1) >> 1)
        + (((hs[2][5] >> 1) >> 1) >> 1)
        + (((hs[2][6] >> 1) >> 1) >> 1)
        + (((hs[2][7] >> 1) >> 1) >> 1)
        + (((hs[2][8] >> 1) >> 1) >> 1)
        + (((hs[2][9] >> 1) >> 1) >> 1)
        + (((hs[2][10] >> 1) >> 1) >> 1)
        + (((hs[2][11] >> 1) >> 1) >> 1)
        + (((hs[2][12] >> 1) >> 1) >> 1)
        - (((hs[2][13] >> 1) >> 1) >> 1)
        - (((hs[2][14] >> 1) >> 1) >> 1)
        - (((hs[2][15] >> 1) >> 1) >> 1)
        - (((hs[3][0] >> 1) >> 1) >> 1)
        - (((hs[3][1] >> 1) >> 1) >> 1)
        - (((hs[3][2] >> 1) >> 1) >> 1)
        + (((hs[3][3] >> 1) >> 1) >> 1)
        + (((hs[3][4] >> 1) >> 1) >> 1)
        + (((hs[3][5] >> 1) >> 1) >> 1)
        - (((hs[3][6] >> 1) >> 1) >> 1)
        - (((hs[3][7] >> 1) >> 1) >> 1)
        - (((hs[3][8] >> 1) >> 1) >> 1)
        - (((hs[3][9] >> 1) >> 1) >> 1)
        - (((hs[3][10] >> 1) >> 1) >> 1)
        - (((hs[3][11] >> 1) >> 1) >> 1)
        + (((hs[5][4] >> 1) >> 1) >> 1)
        + (((hs[5][5] >> 1) >> 1) >> 1)
        + (((hs[5][6] >> 1) >> 1) >> 1)
        + (((hs[5][7] >> 1) >> 1) >> 1)
        + (((hs[5][8] >> 1) >> 1) >> 1)
        + (((hs[5][9] >> 1) >> 1) >> 1)
        + (((hs[5][10] >> 1) >> 1) >> 1)
        + (((hs[5][11] >> 1) >> 1) >> 1)
        + (((hs[5][12] >> 1) >> 1) >> 1)
        - (((hs[5][13] >> 1) >> 1) >> 1)
        - (((hs[5][14] >> 1) >> 1) >> 1)
        - (((hs[5][15] >> 1) >> 1) >> 1));
    let c_3_9 = (-hs[0][12] - hs[0][13] - hs[0][14] + hs[0][15] + hs[1][0] + hs[1][1]
        - hs[1][2]
        - hs[1][3]
        - hs[1][4]
        - hs[1][5]
        - hs[1][6]
        - hs[1][7]
        - hs[2][4]
        - hs[2][5]
        - hs[2][6]
        - hs[2][7]
        - hs[2][8]
        - hs[2][9]
        - hs[2][10]
        - hs[2][11]
        - hs[2][12]
        + hs[2][13]
        + hs[2][14]
        + hs[2][15]
        - hs[3][12]
        - hs[3][13]
        - hs[3][14]
        + hs[3][15]
        + hs[4][0]
        + hs[4][1]
        + hs[4][2]
        + hs[4][3]
        + hs[4][4]
        - hs[4][5]
        - hs[4][6]
        - hs[4][7]
        + hs[6][0]
        + hs[6][1]
        + hs[6][2]
        + hs[6][3]
        + hs[6][4]
        + hs[6][5]
        + hs[6][6]
        + hs[6][7]
        + hs[6][8]
        + hs[6][9]
        + hs[6][10]
        + hs[6][11]);
    let c_3_10 = (hs[0][0]
        + hs[0][1]
        + hs[0][2]
        + hs[0][3]
        + hs[0][4]
        + hs[0][5]
        + hs[0][6]
        + hs[0][7]
        + hs[0][8]
        - hs[0][9]
        - hs[0][10]
        - hs[0][11]
        - hs[1][8]
        - hs[1][9]
        - hs[1][10]
        + hs[1][11]
        + hs[1][12]
        + hs[1][13]
        - hs[1][14]
        - hs[1][15]
        - hs[2][0]
        + hs[2][1]
        + hs[2][2]
        + hs[2][3]
        - hs[3][0]
        - hs[3][1]
        - hs[3][2]
        - hs[3][3]
        - hs[3][4]
        - hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        + hs[3][9]
        + hs[3][10]
        + hs[3][11]
        - hs[4][8]
        - hs[4][9]
        - hs[4][10]
        + hs[4][11]
        + hs[4][12]
        + hs[4][13]
        - hs[4][14]
        - hs[4][15]
        - hs[5][0]
        - hs[5][1]
        - hs[5][2]
        - hs[5][3]
        - hs[5][4]
        - hs[5][5]
        - hs[5][6]
        + hs[5][7]
        + hs[5][8]
        + hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[5][12]
        - hs[5][13]
        - hs[5][14]
        - hs[5][15]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        + hs[6][15]
        + hs[7][0]
        + hs[7][1]
        + hs[7][2]
        + hs[7][3]
        + hs[7][4]
        - hs[7][5]
        - hs[7][6]
        - hs[7][7]);
    let c_3_11 = (hs[0][0] + hs[0][1] + hs[0][2]
        - hs[0][3]
        - hs[0][4]
        - hs[0][5]
        - hs[0][6]
        - hs[0][7]
        - hs[0][8]
        - hs[0][9]
        - hs[0][10]
        - hs[0][11]
        - hs[1][8]
        - hs[1][9]
        - hs[1][10]
        - hs[1][11]
        - hs[1][12]
        - hs[1][13]
        + hs[1][14]
        + hs[1][15]
        + hs[2][0]
        + hs[2][1]
        + hs[2][2]
        + hs[2][3]
        + hs[3][0]
        + hs[3][1]
        + hs[3][2]
        + hs[3][3]
        + hs[3][4]
        + hs[3][5]
        - hs[3][6]
        - hs[3][7]
        - hs[3][8]
        + hs[3][9]
        + hs[3][10]
        + hs[3][11]
        - hs[4][8]
        - hs[4][9]
        - hs[4][10]
        + hs[4][11]
        + hs[4][12]
        + hs[4][13]
        + hs[4][14]
        + hs[4][15]
        + hs[5][0]
        + hs[5][1]
        + hs[5][2]
        + hs[5][3]
        - hs[5][4]
        - hs[5][5]
        - hs[5][6]
        + hs[5][7]
        + hs[5][8]
        + hs[5][9]
        + hs[5][10]
        + hs[5][11]
        + hs[5][12]
        + hs[5][13]
        + hs[5][14]
        + hs[5][15]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        - hs[6][15]
        - hs[7][0]
        - hs[7][1]
        + hs[7][2]
        + hs[7][3]
        + hs[7][4]
        + hs[7][5]
        + hs[7][6]
        + hs[7][7]);

    return [
        c11, c_1_2, c_1_3, c_1_4, c_1_5, c_1_6, c_1_7, c_1_8, c_1_9, c_1_10, c_1_11, c_2_1, c_2_2,
        c_2_3, c_2_4, c_2_5, c_2_6, c_2_7, c_2_8, c_2_9, c_2_10, c_2_11, c_3_1, c_3_2, c_3_3,
        c_3_4, c_3_5, c_3_6, c_3_7, c_3_8, c_3_9, c_3_10, c_3_11,
    ];
}
pub fn multiply_4_by_4_matrix_a_with_4_by_4_matrix_b(a: [i32; 16], b: [i32; 16]) -> [i32; 16] {
    let [a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44] = a;
    let [b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44] = b;
    let lefts = [
        i32x16::from([
            (a11 + a31),
            (a11 - a13 + a31),
            -a13,
            -a33,
            -a31,
            (a11 - a13 + a31 - a33),
            (-a21 + a22 - a23 - a24),
            (-a21 + a22 - a23 - a24 - a41 + a42),
            (a11 - a13),
            (-a21 + a22 - a41 + a42),
            (a41 - a42),
            (-a21 + a22 - a23 - a24 - a41 + a42 - a43 - a44),
            (-a23 - a24),
            (a11 - a12 + a21 - a22),
            (-a12 - a14),
            (a12 + a14 - a21 + a22 + a23 + a24),
        ]),
        i32x16::from([
            (a12 + a14 - a21 + a22 + a23 + a24 + a32 + a41 - a42),
            (a12 - a21 + a22 + a32 + a41 - a42),
            (a14 + a23 + a24),
            (a12 + a14 - a21 + a22 + a23 + a24 + a32 + a34 + a41 - a42 - a43 - a44),
            (a32 + a41 - a42),
            (a12 + a14 + a22 + a24),
            (a12 + a14 + a22 + a24 + a32 - a42),
            (a14 + a24),
            (a12 + a14 + a22 + a24 + a32 + a34 - a42 - a44),
            (a32 - a42),
            (a34 - a44),
            (a34 - a43 - a44),
            (a14 + a34),
            (a13 + a14 + a23 + a24 + a33 + a34 - a43 - a44),
            (a11 - a12 - a13 - a14 + a21 - a22 - a23 - a24 + a31 - a32 - a33 - a34 - a41
                + a42
                + a43
                + a44),
            -a43,
        ]),
        i32x16::from([
            a14,
            (a14 - a32),
            (a13 + a14 + a23 + a24 - a31 + a32 + a33 + a34 + a41 - a42 - a43 - a44),
            (-a31 + a32 + a33 + a34 + a41 - a42 - a43 - a44),
            (-a12 - a32),
            (a32 + a34),
            (-a13 - a14 - a23 - a24),
            a32,
            -a21,
            (-a21 + a41),
            (-a21 + a41 - a43),
            (a12 + a22 + a32 - a42),
            (-a21 + a23 + a41 - a43),
            (-a31 + a32 + a41 - a42),
            (a41 - a43),
            (-a43 - a44),
        ]),
        i32x16::from([-a23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    ];
    let rights = [
        i32x16::from([
            (b11 + b31),
            (b11 - b13 + b31),
            (b11 - b13 + b31 - b33),
            -b33,
            -b13,
            -b31,
            (-b21 + b22 - b23 - b24),
            (-b21 + b22 - b23 - b24 - b41 + b42),
            (b11 - b13),
            (-b21 + b22 - b41 + b42),
            (-b23 - b24),
            (b41 - b42),
            (-b21 + b22 - b23 - b24 - b41 + b42 - b43 - b44),
            (-b12 - b14),
            -b21,
            (b12 + b14 - b21 + b22 + b23 + b24),
        ]),
        i32x16::from([
            (b12 + b14 - b21 + b22 + b23 + b24 + b32 + b41 - b42),
            (b12 - b21 + b22 + b32 + b41 - b42),
            (b12 + b14 - b21 + b22 + b23 + b24 + b32 + b34 + b41 - b42 - b43 - b44),
            (b32 + b41 - b42),
            (b14 + b23 + b24),
            (b12 + b14 + b22 + b24),
            (b12 + b14 + b22 + b24 + b32 - b42),
            (b12 + b14 + b22 + b24 + b32 + b34 - b42 - b44),
            (b32 - b42),
            (b14 + b24),
            (b34 - b44),
            (b34 - b43 - b44),
            -b43,
            (b14 + b34),
            b14,
            (b13 + b14 + b23 + b24 + b33 + b34 - b43 - b44),
        ]),
        i32x16::from([
            (-b21 + b41),
            (-b21 + b41 - b43),
            (b14 - b32),
            b32,
            -b23,
            (b41 - b43),
            (b32 + b34),
            (-b21 + b23 + b41 - b43),
            (b11 - b12 + b21 - b22),
            (b11 - b12 - b13 - b14 + b21 - b22 - b23 - b24 + b31 - b32 - b33 - b34 - b41
                + b42
                + b43
                + b44),
            (b13 + b14 + b23 + b24 - b31 + b32 + b33 + b34 + b41 - b42 - b43 - b44),
            (b12 + b22 + b32 - b42),
            (-b31 + b32 + b33 + b34 + b41 - b42 - b43 - b44),
            (-b12 - b32),
            (-b13 - b14 - b23 - b24),
            (-b43 - b44),
        ]),
        i32x16::from([
            (-b31 + b32 + b41 - b42),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
    ];
    let c11 = (hs[0][0] - hs[0][1] - hs[0][4] + hs[0][8] + hs[0][14] + hs[2][0]);
    let c12 = (-hs[0][14] - hs[0][15] + hs[1][0] - hs[1][1] - hs[1][4] + hs[1][5] - hs[1][6]
        + hs[1][9]
        - hs[2][0]
        - hs[2][8]
        + hs[2][11]
        + hs[3][0]);
    let c13 =
        (hs[0][1] + hs[0][4] + hs[0][5] - hs[0][8] - hs[1][12] - hs[2][0] + hs[2][1] + hs[2][5]);
    let c14 =
        (-hs[0][15] + hs[1][0] - hs[1][3] - hs[1][4] + hs[1][5] - hs[1][6] + hs[1][8] + hs[1][9]
            - hs[1][12]
            - hs[1][15]
            - hs[2][0]
            + hs[2][1]
            + hs[2][5]
            - hs[2][8]
            + hs[2][9]
            + hs[2][10]);
    let c21 = (-hs[0][6] + hs[0][7] - hs[0][9] + hs[0][10] - hs[0][13] + hs[0][14] + hs[0][15]
        - hs[1][0]
        + hs[1][1]
        + hs[1][4]
        - hs[1][14]
        + hs[2][0]
        - hs[2][2]
        - hs[2][3]);
    let c22 = (hs[0][6] - hs[0][7] + hs[0][9] - hs[0][10] - hs[0][14] - hs[0][15] + hs[1][0]
        - hs[1][1]
        - hs[1][4]
        + hs[1][5]
        - hs[1][6]
        + hs[1][9]
        - hs[2][0]
        + hs[2][11]);
    let c23 = (-hs[0][6] + hs[0][7] + hs[0][10] + hs[0][11] - hs[0][15] + hs[1][0]
        - hs[1][3]
        - hs[1][4]
        - hs[1][12]
        - hs[2][0]
        + hs[2][1]
        + hs[2][3]
        + hs[2][5]
        + hs[2][13]);
    let c24 =
        (-hs[0][6] + hs[0][7] + hs[0][10] + hs[0][11] - hs[0][15] + hs[1][0] - hs[1][3] - hs[1][4]
            + hs[1][5]
            - hs[1][6]
            + hs[1][8]
            + hs[1][9]
            - hs[1][12]
            - hs[2][0]
            + hs[2][1]
            + hs[2][5]);
    let c31 =
        (hs[0][0] - hs[0][1] + hs[0][2] - hs[0][4] + hs[2][0] - hs[2][1] + hs[2][4] - hs[2][7]);
    let c32 = (hs[1][0] - hs[1][1] - hs[1][2] - hs[1][4] - hs[1][6] + hs[1][7] + hs[1][9]
        - hs[2][0]
        + hs[2][1]
        - hs[2][4]
        + hs[2][7]
        - hs[2][10]
        + hs[2][11]
        + hs[2][12]
        - hs[2][14]
        + hs[3][0]);
    let c33 = (hs[0][3] + hs[0][4] - hs[1][12] - hs[2][0] + hs[2][1] + hs[2][7]);
    let c34 = (-hs[1][4] + hs[1][9] - hs[1][10] + hs[1][11] - hs[1][12] - hs[1][15] - hs[2][0]
        + hs[2][1]
        + hs[2][7]
        - hs[2][14]);
    let c41 =
        (hs[0][7] - hs[0][9] + hs[0][10] - hs[0][12] + hs[1][0] - hs[1][1] - hs[1][2] - hs[1][4]
            + hs[1][14]
            - hs[2][0]
            + hs[2][1]
            + hs[2][2]
            + hs[2][3]
            - hs[2][4]
            - hs[2][6]
            + hs[2][7]);
    let c42 = (-hs[0][7] + hs[0][9] - hs[0][10] + hs[0][12] - hs[1][0]
        + hs[1][1]
        + hs[1][2]
        + hs[1][4]
        + hs[1][6]
        - hs[1][7]
        - hs[1][9]
        + hs[2][0]
        - hs[2][1]
        + hs[2][4]
        - hs[2][7]
        - hs[2][11]);
    let c43 = (hs[0][10] + hs[1][4] - hs[1][11] + hs[1][12] + hs[1][13] + hs[2][0]
        - hs[2][1]
        - hs[2][2]
        - hs[2][3]
        + hs[2][6]
        - hs[2][7]
        + hs[2][15]);
    let c44 = (hs[0][10] + hs[1][4] - hs[1][9] + hs[1][10] - hs[1][11] + hs[1][12] + hs[2][0]
        - hs[2][1]
        - hs[2][7]
        + hs[2][15]);

    return [
        c11, c12, c13, c14, c21, c22, c23, c24, c31, c32, c33, c34, c41, c42, c43, c44,
    ];
}
pub fn multiply_4_by_4_matrix_a_with_4_by_5_matrix_b(a: [i32; 16], b: [i32; 20]) -> [i32; 20] {
    let [a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44] = a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45] =
        b;
    let lefts = [
        i32x16::from([
            a13,
            (-a11 + a13 - a41),
            (-a11 + a13 - a31),
            (-a11 + a13),
            (-a11 + a13 - a31 + a33 - a34),
            a12,
            (a12 + a22 + a24),
            (-a11 - a14 - a41),
            (-a11 - a14 - a31),
            (a22 + a24 + a42),
            (a22 + a24 + a32),
            (a22 + a24),
            (-a11 - a14 - a22 - a24 - a31 - a32 - a34),
            (-a11 - a14 - a22 - a24 - a31 - a32 - a34 - a41 - a42 - a44),
            -a34,
            (-a11 - a12 + a13 - a14 - a22 - a24 - a31 + a33 - a34),
        ]),
        i32x16::from([
            -a21,
            -a24,
            (-a11 - a14),
            (-a11 + a13 - a31 + a32 + a33),
            (a22 + a32),
            -a32,
            (-a21 + a22 + a32),
            -a42,
            (-a21 + a23 - a42),
            (-a11 + a13 - a41 + a42 + a43),
            (-a21 + a23 - a32),
            (-a21 + a23),
            (a12 - a21 + a22 + a23),
            (-a21 + a23 - a41 + a43),
            (-a21 + a23 + a33),
            (-a11 + a13 - a31 + a33 - a34 + a42 + a44),
        ]),
        i32x16::from([
            (-a21 + a23 + a33 + a42 + a43),
            (-a21 + a23 + a32 + a33 + a43),
            (-a11 - a21),
            (-a21 + a22 + a42),
            (-a11 - a41),
            a12,
            (-a11 - a12 - a31),
            (-a21 + a23 + a43),
            -a31,
            (a13 + a21),
            (-a21 + a22 - a31 + a32),
            (-a31 + a33 - a34),
            (a22 - a23 + a32 - a33),
            a44,
            (-a11 - a14 - a21),
            (-a11 - a31),
        ]),
        i32x16::from([
            (-a11 - a14 - (a21 << 1) + a23 - a24 - a31 + a33 - a34),
            (a22 + a42),
            (-a11 - a14 - a22 - a24 - a34 - a41 - a42 - a44),
            (-a11 - a14 - a23 - a24 + a41 - a43 - a44),
            (a22 - a23 + a42 - a43),
            (-a21 + a23 - a31 + a33 - a34),
            (a12 + a22),
            (a41 - a43),
            (a12 + a13 + a22 + a23),
            (-a11 - a14 - a22 - a24 - a41 - a42 - a44),
            (-a11 - a14 - a22 - a24 - a31 - a32 - a34 - a44),
            (-a21 + a23 + a33 + a43),
            -a14,
            -a41,
            (a12 + a21),
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (-b15 - b35),
            (-b15 + b33 - b35),
            (-b15 - b32 - b35),
            (-b15 - b31),
            (b31 + b45),
            (b21 - b25),
            (b21 - b45),
            (-b11 - b31 - b43),
            (-b11 - b31 + b42),
            (b21 + b43),
            (b21 - b42),
            b21,
            b42,
            (-b11 + b12 - b13 - b31),
            (b31 + b41 - b42),
            b45,
        ]),
        i32x16::from([
            (-b11 - b14 - b24 - b31 - b34),
            (-b21 + b41 + b44),
            (-b11 - b31),
            (-b32 - b35 - b45),
            (-b11 + b12 - b14 + b22 - b24 - b31 + b32 - b34 - b42),
            (b21 - b22 - b25 + b32 + b35 + b45),
            (-b11 + b12 - b14 - b24 - b31 + b32 - b34),
            (-b21 - b23 + b25 + b33 - b35 - b45),
            (b25 + b33 - b35 - b45),
            (b33 - b35),
            (b25 - b32 - b35 - b45),
            (b25 - b35 - b45),
            (b25 + b31 + b34 - b35 - b45),
            (-b11 - b13 - b14 - b31 - b44),
            -b32,
            b45,
        ]),
        i32x16::from([
            (-b11 + b12 - b13 + b21 - b22 + b23 - b25 - b31 - b33 + b35 + b45),
            (-b11 + b12 - b13 + b21 - b22 + b23 - b25 - b31 + b32 + b35 + b45),
            (-b14 + b15 + b31 + b44),
            (-b11 - b13 - b14 - b24 - b31 - b33 - b34),
            (b13 - b15 + b33 - b35 - b43),
            (b21 + b23 - b25),
            (-b22 + b23),
            -b33,
            (-b11 + b12 - b31),
            (-b15 - b31 - b34),
            (-b11 + b12 - b14 - b31 + b44),
            b31,
            (-b32 + b34 + b44),
            (b41 + b43),
            (-b11 - b31 - b44),
            (b12 + b15 - b22 + b23 + b32 + b35 - b42),
        ]),
        i32x16::from([
            b44,
            (-b11 - b13 - b14 - b23 - b24 - b31 - b33 - b34 + b43),
            (-b11 + b12 - b13 - b31 + b43),
            b44,
            (-b11 - b13 - b14 - b31 - b33 - b34),
            (b31 - b44),
            (-b24 + b25 + b31 + b34 - b35 - b45),
            b31,
            (b31 + b34 - b35),
            b43,
            (-b11 + b12 - b13 - b31 - b42),
            (-b11 + b12 - b13 + b21 - b22 + b23 - b25 - b31 + b32 - b33 + b35 + b45),
            (-b11 - b31 + b41 - b45),
            (-b11 - b13 - b31),
            -b24,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
    ];
    let c11 = (hs[0][4] + hs[0][6] - hs[0][11] - hs[0][15] + hs[1][2] - hs[2][11] - hs[3][12]);
    let c12 = (hs[0][11] - hs[1][1] - hs[1][2] - hs[2][11] + hs[2][14] + hs[3][0] + hs[3][5]);
    let c13 = (hs[0][8] + hs[0][10] - hs[0][11] - hs[0][12] - hs[0][14] - hs[1][2] + hs[2][11]);
    let c14 = (hs[0][7] + hs[0][9] - hs[0][11] - hs[1][2] + hs[2][13] - hs[3][7] + hs[3][9]);
    let c15 =
        (hs[0][0] - hs[0][2] - hs[0][5] - hs[0][8] + hs[1][2] + hs[2][5] + hs[2][6] + hs[2][8]
            - hs[2][15]);
    let c21 = (-hs[0][10] + hs[0][11] + hs[1][0] + hs[1][4] - hs[1][5] - hs[1][6] - hs[1][10]
        + hs[1][11]);
    let c22 = (hs[0][8] + hs[0][10] - hs[0][11] - hs[0][12] - hs[1][2] + hs[1][5] + hs[1][10]
        - hs[1][11]
        - hs[1][14]
        - hs[2][8]);
    let c23 = (hs[0][12] - hs[0][13] + hs[1][7] + hs[1][14] - hs[2][0]
        + hs[3][10]
        + hs[3][11]
        + hs[3][13]);
    let c24 =
        (-hs[0][0] + hs[0][1] - hs[0][5] + hs[0][7] - hs[1][2] - hs[2][4] + hs[2][5] - hs[3][13]);
    let c25 =
        (hs[0][9] - hs[0][11] - hs[1][0] - hs[1][7] + hs[1][8] - hs[1][11] + hs[2][3] - hs[3][1]);
    let c31 =
        (hs[0][13] + hs[1][5] + hs[2][1] + hs[2][7] - hs[2][8] - hs[3][2] + hs[3][9] - hs[3][11]);
    let c32 = (-hs[0][7] - hs[0][9] + hs[0][11] + hs[1][2] + hs[1][7] - hs[1][8] + hs[1][11]
        - hs[2][7]
        - hs[3][9]
        + hs[3][13]);
    let c33 = (hs[0][3] - hs[1][0] - hs[1][2] + hs[2][2] - hs[2][9] + hs[2][14] - hs[3][14]);
    let c34 = (hs[1][0] + hs[1][2] - hs[1][11] + hs[1][12] + hs[2][11]
        - hs[2][14]
        - hs[3][0]
        - hs[3][5]
        - hs[3][6]
        + hs[3][14]);
    let c35 = (-hs[1][6] + hs[1][11] - hs[1][12] - hs[1][14] - hs[2][8] + hs[2][10]
        - hs[2][11]
        - hs[2][12]
        + hs[3][5]
        + hs[3][6]
        - hs[3][14]);
    let c41 = (hs[1][11] - hs[1][12] + hs[1][13] - hs[2][3] + hs[2][7] - hs[2][11] + hs[3][0]
        - hs[3][3]
        + hs[3][4]
        + hs[3][5]
        + hs[3][6]
        - hs[3][13]
        - hs[3][14]);
    let c42 =
        (-hs[0][0] + hs[0][3] + hs[0][4] - hs[0][5] + hs[0][6] - hs[0][11] - hs[0][15] - hs[2][11]);
    let c43 =
        (hs[0][0] + hs[0][5] - hs[0][6] + hs[0][11] - hs[1][11] + hs[1][12] - hs[2][9] - hs[3][8]);
    let c44 =
        (hs[0][2] - hs[0][3] - hs[0][4] - hs[1][3] - hs[1][10] + hs[1][11] + hs[1][14] + hs[2][11]);
    let c45 = (hs[0][1] - hs[0][3] - hs[0][4] - hs[1][8] - hs[1][9] + hs[1][11] + hs[1][15]
        - hs[2][7]
        + hs[2][11]);

    return [
        c11, c12, c13, c14, c15, c21, c22, c23, c24, c25, c31, c32, c33, c34, c35, c41, c42, c43,
        c44, c45,
    ];
}
pub fn multiply_4_by_5_matrix_a_with_5_by_5_matrix_b(a: [i32; 20], b: [i32; 25]) -> [i32; 20] {
    let [a11, a12, a13, a14, a15, a21, a22, a23, a24, a25, a31, a32, a33, a34, a35, a41, a42, a43, a44, a45] =
        a;
    let [b11, b12, b13, b14, b15, b21, b22, b23, b24, b25, b31, b32, b33, b34, b35, b41, b42, b43, b44, b45, b51, b52, b53, b54, b55] =
        b;
    let lefts = [
        i32x16::from([
            a32,
            (a12 - a13 - a33),
            (-a35 - a42 - a45),
            (-a15 - a42 - a45),
            (a11 - a21 + a22),
            (-a14 - a32 - a34),
            (-a25 - a42 - a45),
            (a24 - a32 - a34),
            (a42 + a45),
            (-a12 + a13 - a23),
            (-a21 + a22 + a31),
            (a21 - a22 + a41),
            (-a21 + a22),
            (a12 - a13),
            (a32 + a34),
            -a43,
        ]),
        i32x16::from([
            a44,
            (-a43 - a44 + a45),
            (-a24 - a33 + a34),
            -a31,
            (-a31 + a33 - a34),
            a33,
            (-a11 + a13 + a43),
            a15,
            a11,
            (-a21 + a25 + a31),
            (-a11 + a13 - a15),
            a25,
            -a24,
            (-a15 + a44 - a45),
            (-a21 + a24 + a25),
            -a35,
        ]),
        i32x16::from([
            a23,
            (-a21 + a24 - a41),
            (a21 - a24 + a25 + a41 - a43 - a44 + a45),
            (-a11 + a21 - a24 - a25),
            -a14,
            (a13 - a15 - a23),
            (-a14 - a31 - a34),
            (a11 - a13 + a15 - a33),
            (a31 - a33 + a34 + a44),
            (-a35 + a43 - a45),
            a22,
            a12,
            (a12 - a13 - a22 + a23 - a24 - a25 + a32 + a34 - a42 - a45),
            a42,
            (-a11 + a12 + a14 + a15 + a21 - a22 + a32 + a34 + a42 + a45),
            (a24 - a34),
        ]),
        i32x16::from([
            (a21 - a25 - a31 + a35),
            (-a13 + a15 + a23 - a25),
            (-a21 + a31),
            (a11 - a13 + a14 + a15 + a31 - a33 + a34 + a35),
            (a14 + a34),
            (-a23 + a24 + a33 - a34),
            (a25 + a45),
            (a33 - a34 - a35 + a43 - a44 - a45),
            (-a13 + a23),
            (-a21 + a24 - a41 + a44),
            (a13 + a33),
            (a11 - a13 + a14 + a31 - a33 + a34),
            (-a15 - a45),
            (-a13 - a14 + a15 - a43 - a44 + a45),
            (-a13 - a43),
            (-a11 + a13 - a41 + a43),
        ]),
        i32x16::from([
            (-a31 + a33 - a34 - a35 - a41 + a43 - a44 - a45),
            a41,
            (-a32 - a34 - a44),
            (-a12 + a13 + a21 - a22 - a32 - a34 + a41 - a42 + a43 - a44),
            (-a11 + a21),
            (a21 + a41),
            (-a12 + a13 - a21 + a22 + a31 - a32 + a33 - a35 - a42 - a45),
            (-a12 + a13 + a43),
            (-a23 - a24 + a25 - a43 - a44 + a45),
            (-a34 - a44),
            (-a31 + a33 - a34 - a41 + a43 - a44),
            (-a11 - a13 + a14 + a15 + a21 + a23 - a24 - a25),
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b22 + b24 - b42),
            (-b24 + b32),
            (b24 + b52),
            (-b21 - b52),
            (b12 - b21),
            (-b21 - b42),
            (b25 - b52),
            (b25 - b42),
            -b52,
            (b25 + b32),
            (b12 - b24),
            (-b12 - b23),
            b12,
            b32,
            b42,
            (-b32 + b33 + b53),
        ]),
        i32x16::from([
            (b42 - b43 - b53),
            b53,
            (-b32 - b34 + b35 - b44),
            (b12 + b14 - b44),
            b44,
            (-b32 - b34 - b44),
            (b11 + b12 - b13 + b31),
            (b31 + b51 + b52),
            (b11 + b12 + b31),
            (b15 - b52 - b54 + b55),
            b31,
            (b15 - b52 + b55),
            (b15 - b42 + b45),
            (b41 + b42 - b43 - b53),
            -b15,
            (b52 + b54),
        ]),
        i32x16::from([
            (-b32 + b35),
            (-b15 + b42 - b43 - b45 - b53),
            (-b32 + b33 + b35 + b53),
            (b15 - b41 - b42 + b45),
            (-b41 - b42),
            (-b31 + b41 + b42 - b45 - b51 - b52 + b55),
            (-b11 - b12 - b14 + b44 + b51 + b52 + b54),
            (-b31 - b51 - b52 - b54),
            (-b12 + b13 - b14 + b44),
            (-b12 + b13 - b14 - b32 + b33 - b34 + b53),
            (b12 + b22 - b25),
            (-b21 - b22 - b32),
            b25,
            (b22 - b23 - b52),
            -b21,
            (-b25 - b32 - b34 + b35 - b44 + b45),
        ]),
        i32x16::from([
            (-b52 - b54 + b55),
            (b41 + b42 - b45 - b51 - b52 + b55),
            (b14 - b15 + b24 + b52 + b54 - b55),
            (b51 + b52 + b54),
            (-b11 - b12 - b14 - b21 + b41 + b44),
            (b32 + b34 - b35),
            (b25 + b32 - b33 - b35 - b53 - b55),
            (-b12 + b13 - b14 - b32 + b33 - b34),
            (-b25 + b31 - b35 + b51 + b52 - b55),
            (b32 - b33 - b35 - b42 + b43 + b45),
            (b11 + b12 + b14 + b24 + b31 + b34),
            (b11 + b12 + b14 - b51 - b52 - b54),
            (b21 - b41 - b42 + b43 - b51 + b53),
            (b41 + b42 - b43),
            (-b11 - b12 + b13 + b23 - b31 + b33 + b41 + b42 - b43),
            (b11 + b12 - b13),
        ]),
        i32x16::from([
            (b12 - b13 + b14 - b24 + b32 - b33 + b34 - b53 + b54),
            (-b12 + b13),
            (-b23 + b42),
            -b23,
            (-b11 + b15 - b21 - b41 - b42 + b45),
            (-b13 - b15 - b23 - b32 + b33 + b35 + b42 - b43 - b45),
            -b24,
            (b23 + b32),
            (b32 - b33 - b35),
            (-b23 - b32 + b33 - b34 + b43 - b44),
            (-b24 + b32 - b33 + b34 - b53 + b54),
            (b41 + b42 - b45),
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
        lefts[4] * rights[4],
    ];
    let c11 = (-hs[0][3] - hs[0][4] - hs[0][5] - hs[0][8]
        + hs[0][12]
        + hs[0][14]
        + hs[1][7]
        + hs[1][8]
        + hs[1][10]
        + hs[2][4]
        - hs[2][14]);
    let c12 = (-hs[0][4] + hs[0][12] + hs[1][8] + hs[1][10] + hs[1][11] - hs[1][12]
        + hs[2][3]
        + hs[2][5]
        + hs[3][1]
        - hs[4][4]);
    let c13 = (hs[0][5] - hs[0][14] + hs[1][3] - hs[1][10] + hs[1][15] - hs[2][4]
        + hs[2][6]
        + hs[2][7]
        + hs[3][3]
        + hs[3][4]);
    let c14 =
        (hs[0][3] + hs[0][8] - hs[1][0] + hs[1][6] - hs[1][7] - hs[1][10] + hs[1][13] + hs[3][12]
            - hs[3][15]
            + hs[4][1]);
    let c15 =
        (hs[0][3] + hs[0][4] + hs[0][5] + hs[0][8] - hs[0][12] - hs[0][13] - hs[0][14] - hs[2][11]
            + hs[2][14]);
    let c21 =
        (hs[0][6] - hs[0][7] + hs[0][8] - hs[0][9] - hs[0][12] - hs[0][13] + hs[0][14] + hs[2][10]
            - hs[2][12]);
    let c22 =
        (hs[0][0] - hs[0][1] - hs[0][2] + hs[0][8] + hs[0][10] - hs[0][12] + hs[0][13] + hs[0][14]
            - hs[4][6]);
    let c23 = (-hs[0][8] - hs[0][11] + hs[0][12] + hs[0][13] - hs[0][14] + hs[2][13] - hs[4][2]
        + hs[4][3]
        + hs[4][7]);
    let c24 = (-hs[0][13] + hs[0][15] - hs[1][1]
        + hs[1][6]
        + hs[1][8]
        + hs[1][13]
        + hs[2][4]
        + hs[3][13]
        - hs[3][14]
        - hs[4][7]);
    let c25 = (hs[0][11] - hs[0][12] - hs[1][1] + hs[1][12] - hs[2][0] - hs[2][1] + hs[2][2]
        - hs[4][1]
        - hs[4][5]
        + hs[4][8]);
    let c31 = (hs[0][14] + hs[1][0] - hs[1][1] - hs[1][3] - hs[1][5] + hs[2][8] - hs[2][9]
        + hs[3][7]
        + hs[4][2]
        - hs[4][9]);
    let c32 = (-hs[0][11] + hs[0][12] + hs[0][13] - hs[0][14] - hs[0][15] - hs[1][0]
        + hs[1][1]
        + hs[4][1]
        - hs[4][2]
        + hs[4][3]
        + hs[4][7]);
    let c33 =
        (-hs[0][1] + hs[0][13] + hs[1][4] + hs[1][5] - hs[1][7] - hs[1][8] - hs[2][6] - hs[2][7]
            + hs[3][10]
            + hs[3][11]);
    let c34 =
        (-hs[0][10] + hs[0][12] + hs[1][2] - hs[1][3] - hs[1][4] - hs[1][9] + hs[1][11] + hs[2][0]
            - hs[3][2]
            - hs[3][5]);
    let c35 = (hs[0][1] + hs[0][2] - hs[0][8] - hs[0][10] + hs[0][12]
        - hs[0][13]
        - hs[1][3]
        - hs[1][4]
        - hs[1][5]
        - hs[1][15]
        + hs[4][6]);
    let c41 =
        (-hs[0][2] + hs[0][8] - hs[0][15] + hs[1][4] + hs[1][15] + hs[2][8] - hs[2][9] - hs[4][0]
            + hs[4][1]
            + hs[4][10]);
    let c42 = (-hs[0][9] - hs[0][13] + hs[1][7] + hs[1][14] + hs[2][0] - hs[2][3] + hs[2][4]
        - hs[2][5]
        + hs[3][8]
        - hs[4][11]);
    let c43 = (hs[0][6] - hs[0][7] + hs[0][8] - hs[0][9] - hs[0][13] + hs[0][14] + hs[1][11]
        - hs[1][12]
        + hs[1][14]
        + hs[2][0]
        - hs[2][12]);
    let c44 = (-hs[0][7] + hs[0][14] - hs[1][2] - hs[1][5] + hs[1][9] - hs[1][12] + hs[1][14]
        - hs[1][15]
        - hs[2][15]
        + hs[3][0]);
    let c45 = (-hs[0][6] - hs[0][8] + hs[0][15] + hs[1][0] - hs[1][11] - hs[1][14] + hs[2][1]
        - hs[2][2]
        - hs[3][6]
        + hs[3][9]);

    return [
        c11, c12, c13, c14, c15, c21, c22, c23, c24, c25, c31, c32, c33, c34, c35, c41, c42, c43,
        c44, c45,
    ];
}
pub fn multiply_4_by_5_matrix_a_with_5_by_9_matrix_b(a: [i32; 20], b: [i32; 45]) -> [i32; 36] {
    let [a11, a12, a13, a14, a15, a21, a22, a23, a24, a25, a31, a32, a33, a34, a35, a41, a42, a43, a44, a45] =
        a;
    let [b11, b12, b13, b14, b15, b16, b17, b18, b19, b21, b22, b23, b24, b25, b26, b27, b28, b29, b31, b32, b33, b34, b35, b36, b37, b38, b39, b41, b42, b43, b44, b45, b46, b47, b48, b49, b51, b52, b53, b54, b55, b56, b57, b58, b59] =
        b;
    let lefts = [
        i32x16::from([
            -a32,
            (-a12 + a13 + a33),
            (a35 + a42 + a45),
            (a15 + a42 + a45),
            (-a11 + a21 - a22),
            (a14 + a32 + a34),
            (a25 + a42 + a45),
            (-a24 + a32 + a34),
            (-a42 - a45),
            (a12 - a13 + a23),
            (a21 - a22 - a31),
            (-a21 + a22 - a41),
            (a21 - a22),
            (-a12 + a13),
            (-a32 - a34),
            a43,
        ]),
        i32x16::from([
            -a44,
            (a43 + a44 - a45),
            (a24 + a33 - a34),
            a31,
            (a31 - a33 + a34),
            -a33,
            (a11 - a13 - a43),
            -a15,
            -a11,
            (a21 - a25 - a31),
            (a11 - a13 + a15),
            -a25,
            a24,
            (a15 - a44 + a45),
            (a21 - a24 - a25),
            a35,
        ]),
        i32x16::from([
            -a23,
            (a21 - a24 + a41),
            (-a21 + a24 - a25 - a41 + a43 + a44 - a45),
            (a11 - a21 + a24 + a25),
            a14,
            (-a13 + a15 + a23),
            (a14 + a31 + a34),
            (-a11 + a13 - a15 + a33),
            (-a31 + a33 - a34 - a44),
            (a35 - a43 + a45),
            -a22,
            -a12,
            (-a12 + a13 + a22 - a23 + a24 + a25 - a32 - a34 + a42 + a45),
            -a42,
            (a11 - a12 - a14 - a15 - a21 + a22 - a32 - a34 - a42 - a45),
            (-a24 + a34),
        ]),
        i32x16::from([
            (-a21 + a25 + a31 - a35),
            (a13 - a15 - a23 + a25),
            (a21 - a31),
            (-a11 + a13 - a14 - a15 - a31 + a33 - a34 - a35),
            (-a14 - a34),
            (a23 - a24 - a33 + a34),
            (-a25 - a45),
            (-a33 + a34 + a35 - a43 + a44 + a45),
            (a13 - a23),
            (a21 - a24 + a41 - a44),
            (-a13 - a33),
            (-a11 + a13 - a14 - a31 + a33 - a34),
            (a15 + a45),
            (a13 + a14 - a15 + a43 + a44 - a45),
            (a13 + a43),
            (a11 - a13 + a41 - a43),
        ]),
        i32x16::from([
            (a31 - a33 + a34 + a35 + a41 - a43 + a44 + a45),
            -a41,
            (a32 + a34 + a44),
            (a12 - a13 - a21 + a22 + a32 + a34 - a41 + a42 - a43 + a44),
            (a11 - a21),
            (-a21 - a41),
            (a12 - a13 + a21 - a22 - a31 + a32 - a33 + a35 + a42 + a45),
            (a12 - a13 - a43),
            (a23 + a24 - a25 + a43 + a44 - a45),
            (a34 + a44),
            (a31 - a33 + a34 + a41 - a43 + a44),
            (a11 + a13 - a14 - a15 - a21 - a23 + a24 + a25),
            (a12 - a13 - a15 + a25),
            (a13 + a45),
            (-a12 + a35),
            (a14 + a15 - a35 - a45),
        ]),
        i32x16::from([
            (a11 + a15 - a35 - a45),
            (-a12 - a13 - a15 + a25),
            (a11 + a15 - a25),
            (a13 + a41 - a43),
            (-a12 + a31 + a32),
            (a23 + a41 - a43),
            (-a22 + a31 + a32),
            (-a11 - a15 + a21 + a22 - a23 + a25 - a31 - a32 - a41 + a43),
            (-a31 - a32 + a42),
            (a33 - a42),
            -a31,
            (-a11 - a15),
            (-a14 + a22 - a23 + a24),
            -a21,
            (a11 + a12 - a13 - a14 - a21 + a24 - a31 - a32 - a41 + a43),
            -a35,
        ]),
        i32x16::from([
            a22,
            (-a22 + a32 + a33),
            (-a22 - a34),
            (-a23 + a42 + a43),
            (a23 - a43 - a45),
            -a45,
            (-a22 + a32 - a35),
            (a22 - a23 - a24 - a25 - a32 + a34 + a35 + a43 + a44 + a45),
            (a24 + a25 - a34 - a44),
            a44,
            (-a32 - a34 + a35 + a42),
            a45,
            -a42,
            a33,
            a14,
            (a23 - a44),
        ]),
        i32x16::from([
            -a13,
            (a12 + a13),
            a12,
            (a33 - a43 + a44 - a45),
            (a12 - a32 - a33 - a34),
            (-a14 - a25),
            a34,
            (-a11 - a15 - a21 + a24 + a31 - a34 + a35 - a44 + a45),
            -a34,
            a41,
            (a14 + a21 - a24),
            -a12,
            (a21 - a24 + a44),
            -a23,
            -a33,
            -a44,
        ]),
        i32x16::from([
            a44,
            (a21 - a24 + a34 + a44),
            (-a24 + a34 + a44),
            -a41,
            -a25,
            (a33 + a41 - a43),
            a42,
            (-a33 + a42),
            -a11,
            (-a13 + a42 + a43 - a44),
            (-a14 + a24 - a34 - a44),
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let rights = [
        i32x16::from([
            (b26 + b28 - b46),
            (-b28 + b36),
            (b28 + b56),
            (-b25 - b56),
            (b16 - b25),
            (-b25 - b46),
            (b29 - b56),
            (b29 - b46),
            -b56,
            (b29 + b36),
            (b16 - b28),
            (-b16 - b27),
            b16,
            b36,
            b46,
            (-b36 + b37 + b57),
        ]),
        i32x16::from([
            (b46 - b47 - b57),
            b57,
            (-b36 - b38 + b39 - b48),
            (b16 + b18 - b48),
            b48,
            (-b36 - b38 - b48),
            (b15 + b16 - b17 + b35),
            (b35 + b55 + b56),
            (b15 + b16 + b35),
            (b19 - b56 - b58 + b59),
            b35,
            (b19 - b56 + b59),
            (b19 - b46 + b49),
            (b45 + b46 - b47 - b57),
            -b19,
            (b56 + b58),
        ]),
        i32x16::from([
            (-b36 + b39),
            (-b19 + b46 - b47 - b49 - b57),
            (-b36 + b37 + b39 + b57),
            (b19 - b45 - b46 + b49),
            (-b45 - b46),
            (-b35 + b45 + b46 - b49 - b55 - b56 + b59),
            (-b15 - b16 - b18 + b48 + b55 + b56 + b58),
            (-b35 - b55 - b56 - b58),
            (-b16 + b17 - b18 + b48),
            (-b16 + b17 - b18 - b36 + b37 - b38 + b57),
            (b16 + b26 - b29),
            (-b25 - b26 - b36),
            b29,
            (b26 - b27 - b56),
            -b25,
            (-b29 - b36 - b38 + b39 - b48 + b49),
        ]),
        i32x16::from([
            (-b56 - b58 + b59),
            (b45 + b46 - b49 - b55 - b56 + b59),
            (b18 - b19 + b28 + b56 + b58 - b59),
            (b55 + b56 + b58),
            (-b15 - b16 - b18 - b25 + b45 + b48),
            (b36 + b38 - b39),
            (b29 + b36 - b37 - b39 - b57 - b59),
            (-b16 + b17 - b18 - b36 + b37 - b38),
            (-b29 + b35 - b39 + b55 + b56 - b59),
            (b36 - b37 - b39 - b46 + b47 + b49),
            (b15 + b16 + b18 + b28 + b35 + b38),
            (b15 + b16 + b18 - b55 - b56 - b58),
            (b25 - b45 - b46 + b47 - b55 + b57),
            (b45 + b46 - b47),
            (-b15 - b16 + b17 + b27 - b35 + b37 + b45 + b46 - b47),
            (b15 + b16 - b17),
        ]),
        i32x16::from([
            (b16 - b17 + b18 - b28 + b36 - b37 + b38 - b57 + b58),
            (-b16 + b17),
            (-b27 + b46),
            -b27,
            (-b15 + b19 - b25 - b45 - b46 + b49),
            (-b17 - b19 - b27 - b36 + b37 + b39 + b46 - b47 - b49),
            -b28,
            (b27 + b36),
            (b36 - b37 - b39),
            (-b27 - b36 + b37 - b38 + b47 - b48),
            (-b28 + b36 - b37 + b38 - b57 + b58),
            (b45 + b46 - b49),
            (-b51 - b53),
            (b33 - b51 - b53),
            (-b23 - b51 - b53),
            (-b13 - b51),
        ]),
        i32x16::from([
            (b13 + b54),
            (b12 - b52),
            (b12 - b54),
            (-b11 - b13 - b34),
            (-b11 - b13 + b24),
            (b12 + b34),
            (b12 - b24),
            b12,
            b24,
            (-b11 - b13 + b21 - b31),
            (b13 + b14 - b24),
            b54,
            (-b11 - b13 - b41 - b42 - b43),
            (-b12 + b14 + b44),
            (-b11 - b13),
            (-b23 - b53 - b54),
        ]),
        i32x16::from([
            (-b11 - b13 + b21 + b22 + b23 - b24 - b41 - b42 - b43),
            (b12 - b22 + b23 - b52 + b53 + b54),
            (-b11 - b13 + b21 + b23 - b41 - b42 - b43),
            (-b12 - b32 + b33 + b52 - b53 - b54),
            (b33 + b52 - b53 - b54),
            (b33 - b53),
            (-b23 + b52 - b53 - b54),
            (b52 - b53 - b54),
            (b13 + b43 + b52 - b53 - b54),
            (-b11 - b13 - b31 - b41 - b44),
            -b23,
            b54,
            (-b11 + b12 - b13 + b21 - b22 - b31 + b32 - b33 - b52 + b53 + b54),
            (-b11 + b12 - b13 + b21 - b22 + b23 - b31 + b32 - b52 + b53 + b54),
            (b13 - b41 + b44 + b51),
            (-b11 - b13 - b31 - b33 - b41 - b42 - b43),
        ]),
        i32x16::from([
            (b31 + b33 - b34 - b51 - b53),
            (b12 + b32 - b52),
            (-b22 + b32),
            -b33,
            (-b11 - b13 + b21),
            (-b13 - b43 - b51),
            (-b11 - b13 + b21 - b41 + b44),
            b13,
            (-b23 + b43 + b44),
            (b14 + b34),
            (-b11 - b13 - b44),
            (b21 - b22 + b23 - b24 + b32 + b51 + b53),
            b44,
            (-b11 - b13 - b31 - b32 - b33 + b34 - b41 - b42 - b43),
            (-b11 - b13 + b21 - b31 + b34),
            b44,
        ]),
        i32x16::from([
            (-b11 - b13 - b31 - b33 - b41 - b43),
            (b13 - b44),
            (b13 - b42 + b43 + b52 - b53 - b54),
            b13,
            (b13 + b43 - b53),
            b34,
            (-b11 - b13 + b21 - b24 - b31),
            (-b11 + b12 - b13 + b21 - b22 + b23 - b31 + b32 - b33 - b52 + b53 + b54),
            (-b11 - b13 + b14 - b54),
            (-b11 - b13 - b31),
            -b42,
            0,
            0,
            0,
            0,
            0,
        ]),
    ];
    let hs = [
        lefts[0] * rights[0],
        lefts[1] * rights[1],
        lefts[2] * rights[2],
        lefts[3] * rights[3],
        lefts[4] * rights[4],
        lefts[5] * rights[5],
        lefts[6] * rights[6],
        lefts[7] * rights[7],
        lefts[8] * rights[8],
    ];
    let c11 = (-hs[4][13]
        - hs[4][14]
        - hs[4][15]
        - hs[5][0]
        - hs[5][3]
        - hs[5][4]
        - hs[5][8]
        - hs[5][9]
        - hs[5][11]
        - hs[5][14]
        - hs[5][15]
        - hs[6][5]
        - hs[6][11]
        - hs[6][14]
        - hs[7][0]
        - hs[7][2]
        - hs[7][10]
        - hs[7][11]
        - hs[7][12]
        - hs[7][14]
        - hs[7][15]
        - hs[8][5]
        - hs[8][6]);
    let c12 = (-hs[5][12]
        - hs[6][2]
        - hs[6][4]
        - hs[6][6]
        - hs[6][7]
        - hs[6][8]
        - hs[6][9]
        - hs[6][10]
        - hs[6][12]
        - hs[6][13]
        - hs[6][14]
        - hs[6][15]
        - hs[7][3]
        + hs[7][5]
        - hs[7][6]
        - hs[7][10]
        - (hs[7][12] << 1)
        - hs[8][1]
        - hs[8][7]
        + hs[8][10]);
    let c13 = (-hs[4][14]
        - hs[5][0]
        - hs[5][4]
        - hs[5][8]
        - hs[5][9]
        - hs[5][11]
        - hs[5][15]
        - hs[6][11]
        - hs[7][2]
        - hs[7][4]
        - hs[7][6]
        - hs[7][7]
        - hs[7][11]
        - hs[7][12]
        - hs[8][1]
        - hs[8][6]);
    let c14 = (-hs[4][13] - hs[5][3] - hs[5][9] - hs[6][5] - hs[6][9] - hs[7][0] - hs[7][14]
        + hs[7][15]
        + hs[8][3]
        - hs[8][5]
        - hs[8][9]);
    let c15 = (hs[5][1] + hs[5][2] - hs[5][11] + hs[6][8] + hs[7][1] - hs[7][2]
        + hs[8][2]
        + hs[8][4]
        + hs[8][10]);
    let c16 = (hs[5][2] + hs[5][5] + hs[5][6] + hs[5][7] - hs[5][8] - hs[5][9] - hs[5][11]
        + hs[6][0]
        + hs[6][2]
        + hs[6][8]
        + hs[6][15]
        + hs[7][6]
        + hs[7][8]
        + hs[7][13]
        - hs[7][14]
        + hs[8][0]
        + hs[8][2]
        + hs[8][4]
        - hs[8][5]
        - hs[8][6]);
    let c17 = (hs[5][6] - hs[5][8] - hs[5][9] + hs[5][15] + hs[6][0] - hs[6][1] + hs[6][2]
        - hs[6][6]
        + hs[6][13]
        + hs[7][6]
        + hs[7][8]
        - hs[8][6]);
    let c18 = (hs[5][5] - hs[5][9] - hs[6][3] - hs[6][4]
        + hs[6][5]
        + hs[6][11]
        + hs[6][12]
        + hs[6][15]
        + hs[7][13]
        - hs[7][14]
        + hs[8][0]
        - hs[8][5]);
    let c19 = (hs[4][12]
        + hs[4][13]
        + hs[4][14]
        + hs[4][15]
        + hs[5][0]
        + hs[5][11]
        + hs[5][15]
        + hs[6][5]
        + hs[6][11]
        + hs[7][5]
        + hs[8][4]);
    let c21 = (hs[6][4]
        + hs[6][6]
        + hs[6][7]
        + hs[6][8]
        + hs[6][9]
        + hs[6][10]
        + hs[6][12]
        + hs[6][13]
        + hs[7][3]
        - hs[7][8]
        + hs[7][12]
        - hs[7][15]
        - hs[8][0]
        + hs[8][1]
        + hs[8][4]
        + hs[8][7]);
    let c22 = (hs[5][0]
        + hs[5][11]
        + hs[5][15]
        + hs[6][10]
        + hs[6][11]
        + hs[6][12]
        + hs[6][13]
        + hs[7][7]
        - hs[7][8]
        + hs[7][12]
        + hs[8][1]
        + hs[8][7]);
    let c23 =
        (hs[6][5] + hs[6][9] + hs[6][12] + hs[6][13] + hs[7][3] - hs[7][15] - hs[8][0] - hs[8][3]
            + hs[8][7]);
    let c24 = (-hs[5][3]
        - hs[5][4]
        - hs[5][8]
        - hs[5][9]
        - hs[5][11]
        - hs[5][14]
        - hs[7][10]
        - hs[7][12]
        - hs[7][14]
        - hs[7][15]
        - hs[8][5]
        - hs[8][6]
        - hs[8][8]);
    let c25 = (hs[5][2] + hs[5][5] + hs[5][6] + hs[5][7]
        - hs[5][8]
        - hs[5][9]
        - hs[5][11]
        - hs[5][13]
        - hs[7][12]
        - hs[7][14]
        - hs[7][15]
        - hs[8][5]
        - hs[8][6]);
    let c26 = (-hs[5][0]
        - hs[5][8]
        - hs[5][9]
        - hs[5][10]
        - hs[5][11]
        - hs[6][11]
        - hs[7][7]
        - hs[7][12]
        - hs[7][14]
        - hs[8][1]
        - hs[8][6]);
    let c27 = (-hs[5][9] + hs[6][11] + hs[7][9] - hs[7][14] - hs[7][15] - hs[8][5] - hs[8][6]);
    let c28 = (hs[0][3] + hs[0][4] + hs[0][5] + hs[0][8]
        - hs[0][12]
        - hs[0][14]
        - hs[1][7]
        - hs[1][8]
        - hs[1][10]
        - hs[2][4]
        + hs[2][14]);
    let c29 = (hs[0][4] - hs[0][12] - hs[1][8] - hs[1][10] - hs[1][11] + hs[1][12]
        - hs[2][3]
        - hs[2][5]
        - hs[3][1]
        + hs[4][4]);
    let c31 = (-hs[0][5] + hs[0][14] - hs[1][3] + hs[1][10] - hs[1][15] + hs[2][4]
        - hs[2][6]
        - hs[2][7]
        - hs[3][3]
        - hs[3][4]);
    let c32 =
        (-hs[0][3] - hs[0][8] + hs[1][0] - hs[1][6] + hs[1][7] + hs[1][10] - hs[1][13] - hs[3][12]
            + hs[3][15]
            - hs[4][1]);
    let c33 = (-hs[0][3] - hs[0][4] - hs[0][5] - hs[0][8]
        + hs[0][12]
        + hs[0][13]
        + hs[0][14]
        + hs[2][11]
        - hs[2][14]);
    let c34 = (-hs[0][6] + hs[0][7] - hs[0][8] + hs[0][9] + hs[0][12] + hs[0][13]
        - hs[0][14]
        - hs[2][10]
        + hs[2][12]);
    let c35 = (-hs[0][0] + hs[0][1] + hs[0][2] - hs[0][8] - hs[0][10] + hs[0][12]
        - hs[0][13]
        - hs[0][14]
        + hs[4][6]);
    let c36 = (hs[0][8] + hs[0][11] - hs[0][12] - hs[0][13] + hs[0][14] - hs[2][13] + hs[4][2]
        - hs[4][3]
        - hs[4][7]);
    let c37 =
        (hs[0][13] - hs[0][15] + hs[1][1] - hs[1][6] - hs[1][8] - hs[1][13] - hs[2][4] - hs[3][13]
            + hs[3][14]
            + hs[4][7]);
    let c38 = (-hs[0][11] + hs[0][12] + hs[1][1] - hs[1][12] + hs[2][0] + hs[2][1] - hs[2][2]
        + hs[4][1]
        + hs[4][5]
        - hs[4][8]);
    let c39 = (-hs[0][14] - hs[1][0] + hs[1][1] + hs[1][3] + hs[1][5] - hs[2][8] + hs[2][9]
        - hs[3][7]
        - hs[4][2]
        + hs[4][9]);
    let c41 = (hs[0][11] - hs[0][12] - hs[0][13] + hs[0][14] + hs[0][15] + hs[1][0]
        - hs[1][1]
        - hs[4][1]
        + hs[4][2]
        - hs[4][3]
        - hs[4][7]);
    let c42 =
        (hs[0][1] - hs[0][13] - hs[1][4] - hs[1][5] + hs[1][7] + hs[1][8] + hs[2][6] + hs[2][7]
            - hs[3][10]
            - hs[3][11]);
    let c43 =
        (hs[0][10] - hs[0][12] - hs[1][2] + hs[1][3] + hs[1][4] + hs[1][9] - hs[1][11] - hs[2][0]
            + hs[3][2]
            + hs[3][5]);
    let c44 = (-hs[0][1] - hs[0][2] + hs[0][8] + hs[0][10] - hs[0][12]
        + hs[0][13]
        + hs[1][3]
        + hs[1][4]
        + hs[1][5]
        + hs[1][15]
        - hs[4][6]);
    let c45 =
        (hs[0][2] - hs[0][8] + hs[0][15] - hs[1][4] - hs[1][15] - hs[2][8] + hs[2][9] + hs[4][0]
            - hs[4][1]
            - hs[4][10]);
    let c46 = (hs[0][9] + hs[0][13] - hs[1][7] - hs[1][14] - hs[2][0] + hs[2][3] - hs[2][4]
        + hs[2][5]
        - hs[3][8]
        + hs[4][11]);
    let c47 = (-hs[0][6] + hs[0][7] - hs[0][8] + hs[0][9] + hs[0][13] - hs[0][14] - hs[1][11]
        + hs[1][12]
        - hs[1][14]
        - hs[2][0]
        + hs[2][12]);
    let c48 = (hs[0][7] - hs[0][14] + hs[1][2] + hs[1][5] - hs[1][9] + hs[1][12] - hs[1][14]
        + hs[1][15]
        + hs[2][15]
        - hs[3][0]);
    let c49 = (hs[0][6] + hs[0][8] - hs[0][15] - hs[1][0] + hs[1][11] + hs[1][14] - hs[2][1]
        + hs[2][2]
        + hs[3][6]
        - hs[3][9]);

    return [
        c11, c12, c13, c14, c15, c16, c17, c18, c19, c21, c22, c23, c24, c25, c26, c27, c28, c29,
        c31, c32, c33, c34, c35, c36, c37, c38, c39, c41, c42, c43, c44, c45, c46, c47, c48, c49,
    ];
}
